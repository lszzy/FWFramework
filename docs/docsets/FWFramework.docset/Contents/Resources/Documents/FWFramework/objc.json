[
  {
    "docs\/FWFramework\/Database.h" : {
      "key.diagnostic_stage" : "",
      "key.substructure" : [
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 11,
          "key.doc.comment" : "数据库模型协议信息",
          "key.doc.file" : "docs\/FWFramework\/Database.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 14,
          "key.filepath" : "docs\/FWFramework\/Database.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.protocol",
          "key.name" : "__FWDatabaseModel",
          "key.parsed_declaration" : "@protocol __FWDatabaseModel <NSObject>",
          "key.parsed_scope.end" : 81,
          "key.parsed_scope.start" : 14,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 24,
              "key.doc.comment" : "自定义数据存储路径\n- returns: 自定义数据库路径(目录即可)",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 21,
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "自定义数据库路径(目录即可)"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+databasePath",
              "key.parsed_declaration" : "+ (nullable NSString *)databasePath;",
              "key.parsed_scope.end" : 21,
              "key.parsed_scope.start" : 21,
              "key.swift_declaration" : "optional static func databasePath() -> String?",
              "key.swift_name" : "databasePath()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWDatabaseModel(cm)databasePath"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 24,
              "key.doc.comment" : "注意：\n ***该返回值在改变数据模型属性类型\/增加\/删除属性时需要更改否则无法自动更新原来模型数据表字段以及类型***",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 27,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+databaseVersion",
              "key.parsed_declaration" : "+ (nullable NSString *)databaseVersion;",
              "key.parsed_scope.end" : 27,
              "key.parsed_scope.start" : 27,
              "key.swift_declaration" : "optional static func databaseVersion() -> String?",
              "key.swift_name" : "databaseVersion()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWDatabaseModel(cm)databaseVersion"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 24,
              "key.doc.comment" : "注意：\n ***该加密功能需要引用SQLCipher三方库才支持***\n \/\/\/ 引入方式有:\n *** 手动引入 ***\n *** pod 'Component\/SQLCipher' ***",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 36,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+databasePasswordKey",
              "key.parsed_declaration" : "+ (nullable NSString *)databasePasswordKey;",
              "key.parsed_scope.end" : 36,
              "key.parsed_scope.start" : 36,
              "key.swift_declaration" : "optional static func databasePasswordKey() -> String?",
              "key.swift_name" : "databasePasswordKey()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWDatabaseModel(cm)databasePasswordKey"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 24,
              "key.doc.comment" : "引入第三方创建的数据库存储路径比如:FMDB\n来使用FWDatabase进行操作其他方式创建的数据库\n\n- returns: 存储路径",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 44,
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "存储路径"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+databaseVendorPath",
              "key.parsed_declaration" : "+ (nullable NSString *)databaseVendorPath;",
              "key.parsed_scope.end" : 44,
              "key.parsed_scope.start" : 44,
              "key.swift_declaration" : "optional static func databaseVendorPath() -> String?",
              "key.swift_name" : "databaseVendorPath()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWDatabaseModel(cm)databaseVendorPath"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "注意：\n ***数据库结构会一次性升级到最新版本，只需要处理数据迁移或清理即可。当升级多个版本时，可依次比较version进行处理**",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 50,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+databaseMigration:",
              "key.parsed_declaration" : "+ (void)databaseMigration:(nonnull NSString *)version;",
              "key.parsed_scope.end" : 50,
              "key.parsed_scope.start" : 50,
              "key.swift_declaration" : "optional static func databaseMigration(_ version: String)",
              "key.swift_name" : "databaseMigration(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWDatabaseModel(cm)databaseMigration:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 24,
              "key.doc.comment" : "指定自定义表名，默认类名\n\n在指定引入其他方式创建的数据库时，这个时候如果表名不是模型类名需要实现该方法指定表名称\n\n- returns: 表名",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 59,
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "表名"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+tableName",
              "key.parsed_declaration" : "+ (nullable NSString *)tableName;",
              "key.parsed_scope.end" : 59,
              "key.parsed_scope.start" : 59,
              "key.swift_declaration" : "optional static func tableName() -> String?",
              "key.swift_name" : "tableName()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWDatabaseModel(cm)tableName"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 24,
              "key.doc.comment" : "返回自定义主键名称",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 65,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+tablePrimaryKey",
              "key.parsed_declaration" : "+ (nullable NSString *)tablePrimaryKey;",
              "key.parsed_scope.end" : 65,
              "key.parsed_scope.start" : 65,
              "key.swift_declaration" : "optional static func tablePrimaryKey() -> String?",
              "key.swift_name" : "tablePrimaryKey()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWDatabaseModel(cm)tablePrimaryKey"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 35,
              "key.doc.comment" : "指定数据库表属性黑名单集合\n\n- returns: 返回数据库表属性黑名单集合",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 72,
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "返回数据库表属性黑名单集合"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+tablePropertyBlacklist",
              "key.parsed_declaration" : "+ (nullable NSArray<NSString *> *)tablePropertyBlacklist;",
              "key.parsed_scope.end" : 72,
              "key.parsed_scope.start" : 72,
              "key.swift_declaration" : "optional static func tablePropertyBlacklist() -> [String]?",
              "key.swift_name" : "tablePropertyBlacklist()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWDatabaseModel(cm)tablePropertyBlacklist"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 35,
              "key.doc.comment" : "指定数据库表属性白名单集合\n\n- returns: 返回数据库表属性白名单集合",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 79,
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "返回数据库表属性白名单集合"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+tablePropertyWhitelist",
              "key.parsed_declaration" : "+ (nullable NSArray<NSString *> *)tablePropertyWhitelist;",
              "key.parsed_scope.end" : 79,
              "key.parsed_scope.start" : 79,
              "key.swift_declaration" : "optional static func tablePropertyWhitelist() -> [String]?",
              "key.swift_name" : "tablePropertyWhitelist()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWDatabaseModel(cm)tablePropertyWhitelist"
            }
          ],
          "key.swift_declaration" : "protocol DatabaseModel : NSObjectProtocol",
          "key.swift_name" : "DatabaseModel",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(pl)__FWDatabaseModel"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "本地数据库管理类\n\n- see: https:\/\/github.com\/netyouli\/WHC_ModelSqliteKit",
          "key.doc.file" : "docs\/FWFramework\/Database.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 89,
          "key.filepath" : "docs\/FWFramework\/Database.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWDatabaseManager",
          "key.parsed_declaration" : "\n@interface __FWDatabaseManager : NSObject",
          "key.parsed_scope.end" : 334,
          "key.parsed_scope.start" : 89,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 46,
              "key.doc.comment" : "全局数据库模型版本号，默认1.0。如果模型实现了fwDatabaseVersion且不为空，则会忽略全局版本号",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 94,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "version",
              "key.parsed_declaration" : "@property (class, nonatomic, copy, readwrite) NSString *_Nonnull version;",
              "key.parsed_scope.end" : 94,
              "key.parsed_scope.start" : 94,
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cpy)version"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 保存模型到本地，主键存在时更新，不存在时新增\n- parameter: model_object 模型对象\n- returns: 是否保存成功",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 101,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型对象\n"
                    }
                  ],
                  "name" : "model_object"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "是否保存成功"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+save:",
              "key.parsed_declaration" : "+ (BOOL)save:(nullable id)model_object;",
              "key.parsed_scope.end" : 101,
              "key.parsed_scope.start" : 101,
              "key.swift_declaration" : "class func save(_ model_object: Any?) -> Bool",
              "key.swift_name" : "save(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)save:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 新增模型数组到本地(事务方式)\n- parameter: model_array 模型数组对象(model_array 里对象类型要一致)\n- returns: 是否插入成功",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 108,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型数组对象(model_array 里对象类型要一致)\n"
                    }
                  ],
                  "name" : "model_array"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "是否插入成功"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+inserts:",
              "key.parsed_declaration" : "+ (BOOL)inserts:(nullable NSArray *)model_array;",
              "key.parsed_scope.end" : 108,
              "key.parsed_scope.start" : 108,
              "key.swift_declaration" : "class func inserts(_ model_array: [Any]?) -> Bool",
              "key.swift_name" : "inserts(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)inserts:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 新增模型到本地，自动更新主键\n- parameter: model_object 模型对象\n- returns: 是否插入成功",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 115,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型对象\n"
                    }
                  ],
                  "name" : "model_object"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "是否插入成功"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+insert:",
              "key.parsed_declaration" : "+ (BOOL)insert:(nullable id)model_object;",
              "key.parsed_scope.end" : 115,
              "key.parsed_scope.start" : 115,
              "key.swift_declaration" : "class func insert(_ model_object: Any?) -> Bool",
              "key.swift_name" : "insert(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)insert:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 15,
              "key.doc.comment" : "说明: 获取模型类表总条数\n- parameter: model_class 模型类\n- returns: 总条数",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 122,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类\n"
                    }
                  ],
                  "name" : "model_class"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "总条数"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+count:",
              "key.parsed_declaration" : "+ (NSUInteger)count:(nonnull Class)model_class;",
              "key.parsed_scope.end" : 122,
              "key.parsed_scope.start" : 122,
              "key.swift_declaration" : "class func count(_ model_class: AnyClass) -> UInt",
              "key.swift_name" : "count(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)count:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 15,
              "key.doc.comment" : "说明: 获取模型类表总条数\n- parameter: model_class 模型类\n- parameter: where 查询条件(查询语法和SQL where 查询语法一样，where为空则查询所有)\n- returns: 总条数",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 130,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类\n"
                    }
                  ],
                  "name" : "model_class"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "查询条件(查询语法和SQL where 查询语法一样，where为空则查询所有)\n"
                    }
                  ],
                  "name" : "where"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "总条数"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+count:where:",
              "key.parsed_declaration" : "+ (NSUInteger)count:(nonnull Class)model_class where:(nullable NSString *)where;",
              "key.parsed_scope.end" : 130,
              "key.parsed_scope.start" : 130,
              "key.swift_declaration" : "class func count(_ model_class: AnyClass, where: String?) -> UInt",
              "key.swift_name" : "count(_:where:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)count:where:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 14,
              "key.doc.comment" : "说明: 查询本地模型对象\n- parameter: model_class 模型类\n- returns: 查询模型对象数组",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 137,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类\n"
                    }
                  ],
                  "name" : "model_class"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "查询模型对象数组"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:",
              "key.parsed_declaration" : "+ (nonnull NSArray *)query:(nonnull Class)model_class;",
              "key.parsed_scope.end" : 137,
              "key.parsed_scope.start" : 137,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass) -> [Any]",
              "key.swift_name" : "query(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 14,
              "key.doc.comment" : "说明: 查询本地模型对象\n- parameter: model_class 模型类\n- parameter: where 查询条件(查询语法和SQL where 查询语法一样，where为空则查询所有)\n- returns: 查询模型对象数组",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 145,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类\n"
                    }
                  ],
                  "name" : "model_class"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "查询条件(查询语法和SQL where 查询语法一样，where为空则查询所有)\n"
                    }
                  ],
                  "name" : "where"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "查询模型对象数组"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:where:",
              "key.parsed_declaration" : "+ (nonnull NSArray *)query:(nonnull Class)model_class\n                     where:(nullable NSString *)where;",
              "key.parsed_scope.end" : 145,
              "key.parsed_scope.start" : 145,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, where: String?) -> [Any]",
              "key.swift_name" : "query(_:where:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:where:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 14,
              "key.doc.comment" : "\bexample: [FWDatabase query:[Person class] order:@\"age desc\/asc\"];\n对person数据表查询并且根据age自动降序或者升序排序",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 156,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:order:",
              "key.parsed_declaration" : "+ (nonnull NSArray *)query:(nonnull Class)model_class\n                     order:(nullable NSString *)order;",
              "key.parsed_scope.end" : 156,
              "key.parsed_scope.start" : 156,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, order: String?) -> [Any]",
              "key.swift_name" : "query(_:order:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:order:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 14,
              "key.doc.comment" : "\bexample: [FWDatabase query:[Person class] limit:@\"8\"];\n对person数据表查询并且并且限制查询数量为8\n\bexample: [FWDatabase query:[Person class] limit:@\"8 offset 8\"];\n对person数据表查询并且对查询列表偏移8并且限制查询数量为8",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 169,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:limit:",
              "key.parsed_declaration" : "+ (nonnull NSArray *)query:(nonnull Class)model_class\n                     limit:(nullable NSString *)limit;",
              "key.parsed_scope.end" : 169,
              "key.parsed_scope.start" : 169,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, limit: String?) -> [Any]",
              "key.swift_name" : "query(_:limit:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:limit:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 14,
              "key.doc.comment" : "\bexample: [FWDatabase query:[Person class] where:@\"age < 30\" order:@\"age desc\/asc\"];\n对person数据表查询age小于30岁并且根据age自动降序或者升序排序",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 181,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:where:order:",
              "key.parsed_declaration" : "+ (nonnull NSArray *)query:(nonnull Class)model_class\n                     where:(nullable NSString *)where\n                     order:(nullable NSString *)order;",
              "key.parsed_scope.end" : 181,
              "key.parsed_scope.start" : 181,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, where: String?, order: String?) -> [Any]",
              "key.swift_name" : "query(_:where:order:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:where:order:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 14,
              "key.doc.comment" : "\bexample: [FWDatabase query:[Person class] where:@\"age <= 30\" limit:@\"8\"];\n对person数据表查询age小于30岁并且限制查询数量为8\n\bexample: [FWDatabase query:[Person class] where:@\"age <= 30\" limit:@\"8 offset 8\"];\n对person数据表查询age小于30岁并且对查询列表偏移8并且限制查询数量为8",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 195,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:where:limit:",
              "key.parsed_declaration" : "+ (nonnull NSArray *)query:(nonnull Class)model_class\n                     where:(nullable NSString *)where\n                     limit:(nullable NSString *)limit;",
              "key.parsed_scope.end" : 195,
              "key.parsed_scope.start" : 195,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, where: String?, limit: String?) -> [Any]",
              "key.swift_name" : "query(_:where:limit:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:where:limit:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 14,
              "key.doc.comment" : "\bexample: [FWDatabase query:[Person class] order:@\"age desc\/asc\" limit:@\"8\"];\n对person数据表查询并且根据age自动降序或者升序排序并且限制查询的数量为8\n\bexample: [FWDatabase query:[Person class] order:@\"age desc\/asc\" limit:@\"8 offset 8\"];\n对person数据表查询并且根据age自动降序或者升序排序并且限制查询的数量为8偏移为8",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 209,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:order:limit:",
              "key.parsed_declaration" : "+ (nonnull NSArray *)query:(nonnull Class)model_class\n                     order:(nullable NSString *)order\n                     limit:(nullable NSString *)limit;",
              "key.parsed_scope.end" : 209,
              "key.parsed_scope.start" : 209,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, order: String?, limit: String?) -> [Any]",
              "key.swift_name" : "query(_:order:limit:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:order:limit:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 14,
              "key.doc.comment" : "\bexample: [FWDatabase query:[Person class] where:@\"age <= 30\" order:@\"age desc\/asc\" limit:@\"8\"];\n对person数据表查询age小于30岁并且根据age自动降序或者升序排序并且限制查询的数量为8\n\bexample: [FWDatabase query:[Person class] where:@\"age <= 30\" order:@\"age desc\/asc\" limit:@\"8 offset 8\"];\n对person数据表查询age小于30岁并且根据age自动降序或者升序排序并且限制查询的数量为8偏移为8",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 224,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:where:order:limit:",
              "key.parsed_declaration" : "+ (nonnull NSArray *)query:(nonnull Class)model_class\n                     where:(nullable NSString *)where\n                     order:(nullable NSString *)order\n                     limit:(nullable NSString *)limit;",
              "key.parsed_scope.end" : 224,
              "key.parsed_scope.start" : 224,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, where: String?, order: String?, limit: String?) -> [Any]",
              "key.swift_name" : "query(_:where:order:limit:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:where:order:limit:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.comment" : "\bexample: [FWDatabase query:[Person class] key:1]; \/\/\/ 获取Person表主键为1的记录",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 234,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:key:",
              "key.parsed_declaration" : "+ (nullable id)query:(nonnull Class)model_class key:(NSInteger)key;",
              "key.parsed_scope.end" : 234,
              "key.parsed_scope.start" : 234,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, key: Int) -> Any?",
              "key.swift_name" : "query(_:key:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:key:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 14,
              "key.doc.comment" : "说明: 自定义sql查询\n\n- parameter: model_class 接收model类\n- parameter: sql sql语句\n- returns: 查询模型对象数组\n\n\/\/\/ \bexample: [FWDatabase query:Model.self sql:@\"select cc.* from ( select tt.*, (select count(*)+1 from Chapter where chapter_id = tt.chapter_id and updateTime < tt.updateTime ) as group_id from Chapter tt) cc where cc.group_id <= 7 order by updateTime desc\"];",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 245,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "接收model类\n"
                    }
                  ],
                  "name" : "model_class"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "sql语句\n"
                    }
                  ],
                  "name" : "sql"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "查询模型对象数组"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:sql:",
              "key.parsed_declaration" : "+ (nonnull NSArray *)query:(nonnull Class)model_class\n                       sql:(nonnull NSString *)sql;",
              "key.parsed_scope.end" : 245,
              "key.parsed_scope.start" : 245,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, sql: String) -> [Any]",
              "key.swift_name" : "query(_:sql:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:sql:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.comment" : "说明: 利用sqlite 函数进行查询\n \n- parameter: model_class 要查询模型类\n- parameter: func sqlite函数例如：（MAX(age),MIN(age),COUNT(*)....）\n- returns: 返回查询结果(如果结果条数 > 1返回Array , = 1返回单个值 , = 0返回nil)\n\/\/\/ \bexample: [FWDatabase query:[Person class] sqliteFunc:@\"max(age)\"];  \/\/\/ 获取Person表的最大age值\n\/\/\/ \bexample: [FWDatabase query:[Person class] sqliteFunc:@\"count(*)\"];  \/\/\/ 获取Person表的总记录条数",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 256,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "要查询模型类\n"
                    }
                  ],
                  "name" : "model_class"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "sqlite函数例如：（MAX(age),MIN(age),COUNT(*)....）\n"
                    }
                  ],
                  "name" : "func"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : " 返回查询结果(如果结果条数 > 1返回Array , = 1返回单个值 , = 0返回nil)\n \/\/\/ \bexample: [FWDatabase query:[Person class] sqliteFunc:\n\"\nmax(age)\"];  \/\/\/ 获取Person表的最大age值\n \/\/\/ \bexample: [FWDatabase query:[Person class] sqliteFunc:\n\"\ncount(*)\"];  \/\/\/ 获取Person表的总记录条数"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:func:",
              "key.parsed_declaration" : "+ (nullable id)query:(nonnull Class)model_class func:(nonnull NSString *)func;",
              "key.parsed_scope.end" : 256,
              "key.parsed_scope.start" : 256,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, func: String) -> Any?",
              "key.swift_name" : "query(_:func:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:func:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.comment" : "说明: 利用sqlite 函数进行查询\n \n- parameter: model_class 要查询模型类\n- parameter: func sqlite函数例如：（MAX(age),MIN(age),COUNT(*)....）\n- parameter: condition 其他查询条件例如：(where age > 20 order by age desc ....)\n- returns: 返回查询结果(如果结果条数 > 1返回Array , = 1返回单个值 , = 0返回nil)\n\/\/\/ \bexample: [FWDatabase query:[Person class] sqliteFunc:@\"max(age)\" condition:@\"where name = '北京'\"];  \/\/\/ 获取Person表name=北京集合中的的最大age值\n\/\/\/ \bexample: [FWDatabase query:[Person class] sqliteFunc:@\"count(*)\" condition:@\"where name = '北京'\"];  \/\/\/ 获取Person表name=北京集合中的总记录条数",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 268,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "要查询模型类\n"
                    }
                  ],
                  "name" : "model_class"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "sqlite函数例如：（MAX(age),MIN(age),COUNT(*)....）\n"
                    }
                  ],
                  "name" : "func"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "其他查询条件例如：(where age > 20 order by age desc ....)\n"
                    }
                  ],
                  "name" : "condition"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : " 返回查询结果(如果结果条数 > 1返回Array , = 1返回单个值 , = 0返回nil)\n \/\/\/ \bexample: [FWDatabase query:[Person class] sqliteFunc:\n\"\nmax(age)\" condition:@\"where name = '北京'\"];  \/\/\/ 获取Person表name=北京集合中的的最大age值\n \/\/\/ \bexample: [FWDatabase query:[Person class] sqliteFunc:\n\"\ncount(*)\" condition:@\"where name = '北京'\"];  \/\/\/ 获取Person表name=北京集合中的总记录条数"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+query:func:condition:",
              "key.parsed_declaration" : "+ (nullable id)query:(nonnull Class)model_class\n                func:(nonnull NSString *)func\n           condition:(nullable NSString *)condition;",
              "key.parsed_scope.end" : 268,
              "key.parsed_scope.start" : 268,
              "key.swift_declaration" : "class func query(_ model_class: AnyClass, func: String, condition: String?) -> Any?",
              "key.swift_name" : "query(_:func:condition:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)query:func:condition:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 更新本地模型对象\n- parameter: model_object 模型对象\n- parameter: where 查询条件(查询语法和SQL where 查询语法一样，where为空则更新所有)",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 275,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型对象\n"
                    }
                  ],
                  "name" : "model_object"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "查询条件(查询语法和SQL where 查询语法一样，where为空则更新所有)"
                    }
                  ],
                  "name" : "where"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+update:where:",
              "key.parsed_declaration" : "+ (BOOL)update:(nonnull id)model_object where:(nullable NSString *)where;",
              "key.parsed_scope.end" : 275,
              "key.parsed_scope.start" : 275,
              "key.swift_declaration" : "class func update(_ model_object: Any, where: String?) -> Bool",
              "key.swift_name" : "update(_:where:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)update:where:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 更新数据表字段\n\n- parameter: model_class 模型类\n- parameter: value 更新的值\n- parameter: where 更新条件\n- returns: 是否成功\n\/\/\/ 更新Person表在age字段大于25岁是的name值为whc，age为100岁\n\/\/\/ \bexample: [FWDatabase update:Person.self value:@\"name = 'whc', age = 100\" where:@\"age > 25\"];",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 287,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类\n"
                    }
                  ],
                  "name" : "model_class"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "更新的值\n"
                    }
                  ],
                  "name" : "value"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "更新条件\n"
                    }
                  ],
                  "name" : "where"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : " 是否成功\n \/\/\/ 更新Person表在age字段大于25岁是的name值为whc，age为100岁\n \/\/\/ \bexample: [FWDatabase update:Person.self value:\n\"\nname = 'whc', age = 100\" where:@\"age > 25\"];"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+update:value:where:",
              "key.parsed_declaration" : "+ (BOOL)update:(nonnull Class)model_class\n         value:(nonnull NSString *)value\n         where:(nullable NSString *)where;",
              "key.parsed_scope.end" : 287,
              "key.parsed_scope.start" : 287,
              "key.swift_declaration" : "class func update(_ model_class: AnyClass, value: String, where: String?) -> Bool",
              "key.swift_name" : "update(_:value:where:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)update:value:where:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 清空本地模型对象\n- parameter: model_class 模型类",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 293,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类"
                    }
                  ],
                  "name" : "model_class"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+clear:",
              "key.parsed_declaration" : "+ (BOOL)clear:(nonnull Class)model_class;",
              "key.parsed_scope.end" : 293,
              "key.parsed_scope.start" : 293,
              "key.swift_declaration" : "class func clear(_ model_class: AnyClass) -> Bool",
              "key.swift_name" : "clear(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)clear:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 根据主键删除本地模型对象，主键必须存在\n- parameter: model_object 模型对象\n- returns: 是否删除成功",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 300,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型对象\n"
                    }
                  ],
                  "name" : "model_object"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "是否删除成功"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+delete:",
              "key.parsed_declaration" : "+ (BOOL)delete:(nonnull id)model_object;",
              "key.parsed_scope.end" : 300,
              "key.parsed_scope.start" : 300,
              "key.swift_declaration" : "class func delete(_ model_object: Any) -> Bool",
              "key.swift_name" : "delete(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)delete:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 删除本地模型对象\n- parameter: model_class 模型类\n- parameter: where 查询条件(查询语法和SQL where 查询语法一样，where为空则删除所有)",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 307,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类\n"
                    }
                  ],
                  "name" : "model_class"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "查询条件(查询语法和SQL where 查询语法一样，where为空则删除所有)"
                    }
                  ],
                  "name" : "where"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+delete:where:",
              "key.parsed_declaration" : "+ (BOOL)delete:(nonnull Class)model_class where:(nullable NSString *)where;",
              "key.parsed_scope.end" : 307,
              "key.parsed_scope.start" : 307,
              "key.swift_declaration" : "class func delete(_ model_class: AnyClass, where: String?) -> Bool",
              "key.swift_name" : "delete(_:where:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)delete:where:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 清空所有本地模型数据库",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 312,
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+removeAllModel",
              "key.parsed_declaration" : "+ (void)removeAllModel;",
              "key.parsed_scope.end" : 312,
              "key.parsed_scope.start" : 312,
              "key.swift_declaration" : "class func removeAllModel()",
              "key.swift_name" : "removeAllModel()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)removeAllModel"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "说明: 清空指定本地模型数据库\n- parameter: model_class 模型类",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 318,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类"
                    }
                  ],
                  "name" : "model_class"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+removeModel:",
              "key.parsed_declaration" : "+ (void)removeModel:(nonnull Class)model_class;",
              "key.parsed_scope.end" : 318,
              "key.parsed_scope.start" : 318,
              "key.swift_declaration" : "class func removeModel(_ model_class: AnyClass)",
              "key.swift_name" : "removeModel(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)removeModel:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 24,
              "key.doc.comment" : "说明: 返回本地模型数据库路径\n- parameter: model_class 模型类\n- returns: 路径",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 325,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类\n"
                    }
                  ],
                  "name" : "model_class"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "路径"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+localPathWithModel:",
              "key.parsed_declaration" : "+ (nullable NSString *)localPathWithModel:(nonnull Class)model_class;",
              "key.parsed_scope.end" : 325,
              "key.parsed_scope.start" : 325,
              "key.swift_declaration" : "class func localPath(withModel model_class: AnyClass) -> String?",
              "key.swift_name" : "localPath(withModel:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)localPathWithModel:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 24,
              "key.doc.comment" : "说明: 返回本地模型数据库版本号\n- parameter: model_class 模型类\n- returns: 版本号",
              "key.doc.file" : "docs\/FWFramework\/Database.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 332,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "模型类\n"
                    }
                  ],
                  "name" : "model_class"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "版本号"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/Database.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+versionWithModel:",
              "key.parsed_declaration" : "+ (nullable NSString *)versionWithModel:(nonnull Class)model_class;",
              "key.parsed_scope.end" : 332,
              "key.parsed_scope.start" : 332,
              "key.swift_declaration" : "class func version(withModel model_class: AnyClass) -> String?",
              "key.swift_name" : "version(withModel:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWDatabaseManager(cm)versionWithModel:"
            }
          ],
          "key.swift_declaration" : "class DatabaseManager : NSObject",
          "key.swift_name" : "DatabaseManager",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWDatabaseManager"
        }
      ]
    }
  },
  {
    "docs\/FWFramework\/HTTPSessionManager.h" : {
      "key.diagnostic_stage" : "",
      "key.substructure" : [
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "__FWHTTPSessionManager\n\n- see: https:\/\/github.com\/AFNetworking\/AFNetworking",
          "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 71,
          "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWHTTPSessionManager",
          "key.parsed_declaration" : "\n@interface __FWHTTPSessionManager\n    : __FWURLSessionManager <NSSecureCoding, NSCopying>",
          "key.parsed_scope.end" : 286,
          "key.parsed_scope.start" : 71,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 58,
              "key.doc.comment" : "The URL used to construct requests from relative paths in methods like `requestWithMethod:URLString:parameters:`, and the `GET` \/ `POST` \/ et al. convenience methods.",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 76,
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "baseURL",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly, nullable) NSURL *baseURL;",
              "key.parsed_scope.end" : 76,
              "key.parsed_scope.start" : 76,
              "key.swift_declaration" : "var baseURL: URL? { get }",
              "key.swift_name" : "baseURL",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(py)baseURL"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 89,
              "key.doc.comment" : "Requests created with `requestWithMethod:URLString:parameters:` & `multipartFormRequestWithMethod:URLString:parameters:constructingBodyWithBlock:` are constructed with a set of default headers using a parameter serialization specified by this property. By default, this is set to an instance of `__FWHTTPRequestSerializer`, which serializes query string parameters for `GET`, `HEAD`, and `DELETE` requests, or otherwise URL-form-encodes HTTP message bodies.\n\n- warning: `requestSerializer` must not be `nil`.",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 83,
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "requestSerializer",
              "key.parsed_declaration" : "@property (nonatomic, strong, readwrite)\n    __FWHTTPRequestSerializer<__FWURLRequestSerialization>\n        *_Nonnull requestSerializer;",
              "key.parsed_scope.end" : 83,
              "key.parsed_scope.start" : 83,
              "key.swift_declaration" : "var requestSerializer: HTTPRequestSerializer & URLRequestSerialization { get set }",
              "key.swift_name" : "requestSerializer",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(py)requestSerializer"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 91,
              "key.doc.comment" : "Responses sent from the server in data tasks created with `dataTaskWithRequest:success:failure:` and run using the `GET` \/ `POST` \/ et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to an instance of `__FWJSONResponseSerializer`.\n\n- warning: `responseSerializer` must not be `nil`.",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 90,
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "responseSerializer",
              "key.parsed_declaration" : "@property (nonatomic, strong, readwrite)\n    __FWHTTPResponseSerializer<__FWURLResponseSerialization>\n        *_Nonnull responseSerializer;",
              "key.parsed_scope.end" : 90,
              "key.parsed_scope.start" : 90,
              "key.swift_declaration" : "var responseSerializer: HTTPResponseSerializer & URLResponseSerialization { get set }",
              "key.swift_name" : "responseSerializer",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(py)responseSerializer"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.line" : 93,
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Managing Security Policy",
              "key.parsed_scope.end" : 93,
              "key.parsed_scope.start" : 93
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 51,
              "key.doc.comment" : "The security policy used by created session to evaluate server trust for secure connections. `__FWURLSessionManager` uses the `defaultPolicy` unless otherwise specified. A security policy configured with `__FWSSLPinningModePublicKey` or `__FWSSLPinningModeCertificate` can only be applied on a session manager initialized with a secure base URL (i.e. https). Applying a security policy with pinning enabled on an insecure session manager throws an `Invalid Security Policy` exception.",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 99,
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "securityPolicy",
              "key.parsed_declaration" : "@property (nonatomic, strong, readwrite)\n    __FWSecurityPolicy *_Nonnull securityPolicy;",
              "key.parsed_scope.end" : 99,
              "key.parsed_scope.start" : 99,
              "key.swift_declaration" : "var securityPolicy: SecurityPolicy { get set }",
              "key.swift_name" : "securityPolicy",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(py)securityPolicy"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.line" : 102,
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Initialization",
              "key.parsed_scope.end" : 102,
              "key.parsed_scope.start" : 102
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns an `__FWHTTPSessionManager` object.",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 108,
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+manager",
              "key.parsed_declaration" : "+ (nonnull instancetype)manager;",
              "key.parsed_scope.end" : 108,
              "key.parsed_scope.start" : 108,
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(cm)manager"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Initializes an `__FWHTTPSessionManager` object with the specified base URL.\n\n- parameter: url The base URL for the HTTP client.\n\n- returns: The newly-initialized HTTP client",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 117,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The base URL for the HTTP client."
                    }
                  ],
                  "name" : "url"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "The newly-initialized HTTP client"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithBaseURL:",
              "key.parsed_declaration" : "- (nonnull instancetype)initWithBaseURL:(nullable NSURL *)url;",
              "key.parsed_scope.end" : 117,
              "key.parsed_scope.start" : 117,
              "key.swift_declaration" : "convenience init(baseURL url: URL?)",
              "key.swift_name" : "init(baseURL:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)initWithBaseURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Initializes an `__FWHTTPSessionManager` object with the specified base URL.\n\nThis is the designated initializer.\n\n- parameter: url The base URL for the HTTP client.\n- parameter: configuration The configuration used to create the managed session.\n\n- returns: The newly-initialized HTTP client",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 129,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The base URL for the HTTP client.\n"
                    }
                  ],
                  "name" : "url"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The configuration used to create the managed session."
                    }
                  ],
                  "name" : "configuration"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "The newly-initialized HTTP client"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithBaseURL:sessionConfiguration:",
              "key.parsed_declaration" : "- (nonnull instancetype)initWithBaseURL:(nullable NSURL *)url\n                   sessionConfiguration:\n                       (nullable NSURLSessionConfiguration *)configuration;",
              "key.parsed_scope.end" : 130,
              "key.parsed_scope.start" : 129,
              "key.swift_declaration" : "init(baseURL url: URL?, sessionConfiguration configuration: URLSessionConfiguration?)",
              "key.swift_name" : "init(baseURL:sessionConfiguration:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)initWithBaseURL:sessionConfiguration:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.line" : 133,
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Making HTTP Requests",
              "key.parsed_scope.end" : 133,
              "key.parsed_scope.start" : 133
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Creates and runs an `NSURLSessionDataTask` with a `GET` request.\n\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be encoded according to the client request serializer.\n- parameter: headers The headers appended to the default headers for this request.\n- parameter: downloadProgress A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: success A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n- parameter: failure A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred.\n\n- see: -dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 148,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded according to the client request serializer.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The headers appended to the default headers for this request.\n"
                    }
                  ],
                  "name" : "headers"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "downloadProgress"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n"
                    }
                  ],
                  "name" : "success"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred."
                    }
                  ],
                  "name" : "failure"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-GET:parameters:headers:progress:success:failure:",
              "key.parsed_declaration" : "- (nullable NSURLSessionDataTask *)\n           GET:(nonnull NSString *)URLString\n    parameters:(nullable id)parameters\n       headers:(nullable NSDictionary<NSString *, NSString *> *)headers\n      progress:\n          (nullable void (^)(NSProgress *_Nonnull __strong))downloadProgress\n       success:(nullable void (^)(NSURLSessionDataTask *_Nonnull __strong,\n                                  id _Nullable __strong))success\n       failure:(nullable void (^)(NSURLSessionDataTask *_Nullable __strong,\n                                  NSError *_Nonnull __strong))failure;",
              "key.parsed_scope.end" : 153,
              "key.parsed_scope.start" : 148,
              "key.swift_declaration" : "func get(_ URLString: String, parameters: Any?, headers: [String : String]?, progress downloadProgress: ((Progress) -> Void)?, success: ((URLSessionDataTask, Any?) -> Void)?, failure: ((URLSessionDataTask?, Error) -> Void)? = nil) -> URLSessionDataTask?",
              "key.swift_name" : "get(_:parameters:headers:progress:success:failure:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)GET:parameters:headers:progress:success:failure:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Creates and runs an `NSURLSessionDataTask` with a `HEAD` request.\n\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be encoded according to the client request serializer.\n- parameter: headers The headers appended to the default headers for this request.\n- parameter: success A block object to be executed when the task finishes successfully. This block has no return value and takes a single arguments: the data task.\n- parameter: failure A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred.\n\n- see: -dataTaskWithRequest:completionHandler:",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 166,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded according to the client request serializer.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The headers appended to the default headers for this request.\n"
                    }
                  ],
                  "name" : "headers"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes successfully. This block has no return value and takes a single arguments: the data task.\n"
                    }
                  ],
                  "name" : "success"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred."
                    }
                  ],
                  "name" : "failure"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-HEAD:parameters:headers:success:failure:",
              "key.parsed_declaration" : "- (nullable NSURLSessionDataTask *)\n          HEAD:(nonnull NSString *)URLString\n    parameters:(nullable id)parameters\n       headers:(nullable NSDictionary<NSString *, NSString *> *)headers\n       success:\n           (nullable void (^)(NSURLSessionDataTask *_Nonnull __strong))success\n       failure:(nullable void (^)(NSURLSessionDataTask *_Nullable __strong,\n                                  NSError *_Nonnull __strong))failure;",
              "key.parsed_scope.end" : 170,
              "key.parsed_scope.start" : 166,
              "key.swift_declaration" : "func head(_ URLString: String, parameters: Any?, headers: [String : String]?, success: ((URLSessionDataTask) -> Void)?, failure: ((URLSessionDataTask?, Error) -> Void)? = nil) -> URLSessionDataTask?",
              "key.swift_name" : "head(_:parameters:headers:success:failure:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)HEAD:parameters:headers:success:failure:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Creates and runs an `NSURLSessionDataTask` with a `POST` request.\n\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be encoded according to the client request serializer.\n- parameter: headers The headers appended to the default headers for this request.\n- parameter: uploadProgress A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: success A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n- parameter: failure A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred.\n\n- see: -dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 184,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded according to the client request serializer.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The headers appended to the default headers for this request.\n"
                    }
                  ],
                  "name" : "headers"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "uploadProgress"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n"
                    }
                  ],
                  "name" : "success"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred."
                    }
                  ],
                  "name" : "failure"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-POST:parameters:headers:progress:success:failure:",
              "key.parsed_declaration" : "- (nullable NSURLSessionDataTask *)\n          POST:(nonnull NSString *)URLString\n    parameters:(nullable id)parameters\n       headers:(nullable NSDictionary<NSString *, NSString *> *)headers\n      progress:(nullable void (^)(NSProgress *_Nonnull __strong))uploadProgress\n       success:(nullable void (^)(NSURLSessionDataTask *_Nonnull __strong,\n                                  id _Nullable __strong))success\n       failure:(nullable void (^)(NSURLSessionDataTask *_Nullable __strong,\n                                  NSError *_Nonnull __strong))failure;",
              "key.parsed_scope.end" : 189,
              "key.parsed_scope.start" : 184,
              "key.swift_declaration" : "func post(_ URLString: String, parameters: Any?, headers: [String : String]?, progress uploadProgress: ((Progress) -> Void)?, success: ((URLSessionDataTask, Any?) -> Void)?, failure: ((URLSessionDataTask?, Error) -> Void)? = nil) -> URLSessionDataTask?",
              "key.swift_name" : "post(_:parameters:headers:progress:success:failure:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)POST:parameters:headers:progress:success:failure:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Creates and runs an `NSURLSessionDataTask` with a multipart `POST` request.\n\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be encoded according to the client request serializer.\n- parameter: headers The headers appended to the default headers for this request.\n- parameter: block A block that takes a single argument and appends data to the HTTP body. The block argument is an object adopting the `__FWMultipartFormData` protocol.\n- parameter: uploadProgress A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: success A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n- parameter: failure A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred.\n\n- see: -dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 204,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded according to the client request serializer.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The headers appended to the default headers for this request.\n"
                    }
                  ],
                  "name" : "headers"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block that takes a single argument and appends data to the HTTP body. The block argument is an object adopting the `__FWMultipartFormData` protocol.\n"
                    }
                  ],
                  "name" : "block"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "uploadProgress"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n"
                    }
                  ],
                  "name" : "success"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred."
                    }
                  ],
                  "name" : "failure"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-POST:parameters:headers:constructingBodyWithBlock:progress:success:failure:",
              "key.parsed_declaration" : "- (nullable NSURLSessionDataTask *)\n                         POST:(nonnull NSString *)URLString\n                   parameters:(nullable id)parameters\n                      headers:(nullable NSDictionary<NSString *, NSString *> *)\n                                  headers\n    constructingBodyWithBlock:\n        (nullable void (^)(id<__FWMultipartFormData> _Nonnull __strong))block\n                     progress:(nullable void (^)(NSProgress *_Nonnull __strong))\n                                  uploadProgress\n                      success:(nullable void (^)(\n                                  NSURLSessionDataTask *_Nonnull __strong,\n                                  id _Nullable __strong))success\n                      failure:(nullable void (^)(\n                                  NSURLSessionDataTask *_Nullable __strong,\n                                  NSError *_Nonnull __strong))failure;",
              "key.parsed_scope.end" : 210,
              "key.parsed_scope.start" : 204,
              "key.swift_declaration" : "func post(_ URLString: String, parameters: Any?, headers: [String : String]?, constructingBodyWith block: ((MultipartFormData) -> Void)?, progress uploadProgress: ((Progress) -> Void)?, success: ((URLSessionDataTask, Any?) -> Void)?, failure: ((URLSessionDataTask?, Error) -> Void)? = nil) -> URLSessionDataTask?",
              "key.swift_name" : "post(_:parameters:headers:constructingBodyWith:progress:success:failure:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)POST:parameters:headers:constructingBodyWithBlock:progress:success:failure:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Creates and runs an `NSURLSessionDataTask` with a `PUT` request.\n\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be encoded according to the client request serializer.\n- parameter: headers The headers appended to the default headers for this request.\n- parameter: success A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n- parameter: failure A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred.\n\n- see: -dataTaskWithRequest:completionHandler:",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 223,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded according to the client request serializer.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The headers appended to the default headers for this request.\n"
                    }
                  ],
                  "name" : "headers"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n"
                    }
                  ],
                  "name" : "success"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred."
                    }
                  ],
                  "name" : "failure"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-PUT:parameters:headers:success:failure:",
              "key.parsed_declaration" : "- (nullable NSURLSessionDataTask *)\n           PUT:(nonnull NSString *)URLString\n    parameters:(nullable id)parameters\n       headers:(nullable NSDictionary<NSString *, NSString *> *)headers\n       success:(nullable void (^)(NSURLSessionDataTask *_Nonnull __strong,\n                                  id _Nullable __strong))success\n       failure:(nullable void (^)(NSURLSessionDataTask *_Nullable __strong,\n                                  NSError *_Nonnull __strong))failure;",
              "key.parsed_scope.end" : 227,
              "key.parsed_scope.start" : 223,
              "key.swift_declaration" : "func put(_ URLString: String, parameters: Any?, headers: [String : String]?, success: ((URLSessionDataTask, Any?) -> Void)?, failure: ((URLSessionDataTask?, Error) -> Void)? = nil) -> URLSessionDataTask?",
              "key.swift_name" : "put(_:parameters:headers:success:failure:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)PUT:parameters:headers:success:failure:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Creates and runs an `NSURLSessionDataTask` with a `PATCH` request.\n\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be encoded according to the client request serializer.\n- parameter: headers The headers appended to the default headers for this request.\n- parameter: success A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n- parameter: failure A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred.\n\n- see: -dataTaskWithRequest:completionHandler:",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 240,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded according to the client request serializer.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The headers appended to the default headers for this request.\n"
                    }
                  ],
                  "name" : "headers"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n"
                    }
                  ],
                  "name" : "success"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred."
                    }
                  ],
                  "name" : "failure"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-PATCH:parameters:headers:success:failure:",
              "key.parsed_declaration" : "- (nullable NSURLSessionDataTask *)\n         PATCH:(nonnull NSString *)URLString\n    parameters:(nullable id)parameters\n       headers:(nullable NSDictionary<NSString *, NSString *> *)headers\n       success:(nullable void (^)(NSURLSessionDataTask *_Nonnull __strong,\n                                  id _Nullable __strong))success\n       failure:(nullable void (^)(NSURLSessionDataTask *_Nullable __strong,\n                                  NSError *_Nonnull __strong))failure;",
              "key.parsed_scope.end" : 244,
              "key.parsed_scope.start" : 240,
              "key.swift_declaration" : "func patch(_ URLString: String, parameters: Any?, headers: [String : String]?, success: ((URLSessionDataTask, Any?) -> Void)?, failure: ((URLSessionDataTask?, Error) -> Void)? = nil) -> URLSessionDataTask?",
              "key.swift_name" : "patch(_:parameters:headers:success:failure:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)PATCH:parameters:headers:success:failure:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Creates and runs an `NSURLSessionDataTask` with a `DELETE` request.\n\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be encoded according to the client request serializer.\n- parameter: headers The headers appended to the default headers for this request.\n- parameter: success A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n- parameter: failure A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred.\n\n- see: -dataTaskWithRequest:completionHandler:",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 257,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded according to the client request serializer.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The headers appended to the default headers for this request.\n"
                    }
                  ],
                  "name" : "headers"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n"
                    }
                  ],
                  "name" : "success"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred."
                    }
                  ],
                  "name" : "failure"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-DELETE:parameters:headers:success:failure:",
              "key.parsed_declaration" : "- (nullable NSURLSessionDataTask *)\n        DELETE:(nonnull NSString *)URLString\n    parameters:(nullable id)parameters\n       headers:(nullable NSDictionary<NSString *, NSString *> *)headers\n       success:(nullable void (^)(NSURLSessionDataTask *_Nonnull __strong,\n                                  id _Nullable __strong))success\n       failure:(nullable void (^)(NSURLSessionDataTask *_Nullable __strong,\n                                  NSError *_Nonnull __strong))failure;",
              "key.parsed_scope.end" : 261,
              "key.parsed_scope.start" : 257,
              "key.swift_declaration" : "func delete(_ URLString: String, parameters: Any?, headers: [String : String]?, success: ((URLSessionDataTask, Any?) -> Void)?, failure: ((URLSessionDataTask?, Error) -> Void)? = nil) -> URLSessionDataTask?",
              "key.swift_name" : "delete(_:parameters:headers:success:failure:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)DELETE:parameters:headers:success:failure:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Creates an `NSURLSessionDataTask` with a custom `HTTPMethod` request.\n\n- parameter: method The HTTPMethod string used to create the request.\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be encoded according to the client request serializer.\n- parameter: headers The headers appended to the default headers for this request.\n- parameter: uploadProgress A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: downloadProgress A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: success A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n- parameter: failure A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred.\n\n- see: -dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:",
              "key.doc.file" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 277,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTPMethod string used to create the request.\n"
                    }
                  ],
                  "name" : "method"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded according to the client request serializer.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The headers appended to the default headers for this request.\n"
                    }
                  ],
                  "name" : "headers"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "uploadProgress"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "downloadProgress"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes successfully. This block has no return value and takes two arguments: the data task, and the response object created by the client response serializer.\n"
                    }
                  ],
                  "name" : "success"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a two arguments: the data task and the error describing the network or parsing error that occurred."
                    }
                  ],
                  "name" : "failure"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/HTTPSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-dataTaskWithHTTPMethod:URLString:parameters:headers:uploadProgress:downloadProgress:success:failure:",
              "key.parsed_declaration" : "- (nullable NSURLSessionDataTask *)\n    dataTaskWithHTTPMethod:(nonnull NSString *)method\n                 URLString:(nonnull NSString *)URLString\n                parameters:(nullable id)parameters\n                   headers:\n                       (nullable NSDictionary<NSString *, NSString *> *)headers\n            uploadProgress:\n                (nullable void (^)(NSProgress *_Nonnull __strong))uploadProgress\n          downloadProgress:\n              (nullable void (^)(NSProgress *_Nonnull __strong))downloadProgress\n                   success:(nullable void (^)(\n                               NSURLSessionDataTask *_Nonnull __strong,\n                               id _Nullable __strong))success\n                   failure:(nullable void (^)(\n                               NSURLSessionDataTask *_Nullable __strong,\n                               NSError *_Nonnull __strong))failure;",
              "key.parsed_scope.end" : 284,
              "key.parsed_scope.start" : 277,
              "key.swift_declaration" : "func dataTask(withHTTPMethod method: String, urlString URLString: String, parameters: Any?, headers: [String : String]?, uploadProgress: ((Progress) -> Void)?, downloadProgress: ((Progress) -> Void)?, success: ((URLSessionDataTask, Any?) -> Void)?, failure: ((URLSessionDataTask?, Error) -> Void)? = nil) -> URLSessionDataTask?",
              "key.swift_name" : "dataTask(withHTTPMethod:urlString:parameters:headers:uploadProgress:downloadProgress:success:failure:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPSessionManager(im)dataTaskWithHTTPMethod:URLString:parameters:headers:uploadProgress:downloadProgress:success:failure:"
            }
          ],
          "key.swift_declaration" : "class HTTPSessionManager : URLSessionManager, NSSecureCoding, NSCopying",
          "key.swift_name" : "HTTPSessionManager",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWHTTPSessionManager"
        }
      ]
    }
  },
  {
    "docs\/FWFramework\/ObjC.h" : {
      "key.diagnostic_stage" : "",
      "key.substructure" : [
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/ObjC.h",
          "key.doc.line" : 16,
          "key.filepath" : "docs\/FWFramework\/ObjC.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "WeakProxyBridge",
          "key.parsed_scope.end" : 16,
          "key.parsed_scope.start" : 16
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "弱引用代理类，用于解决NSTimer等循环引用target问题(默认NSTimer会强引用target,直到invalidate)",
          "key.doc.file" : "docs\/FWFramework\/ObjC.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 20,
          "key.filepath" : "docs\/FWFramework\/ObjC.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "FWWeakProxyBridge",
          "key.parsed_declaration" : "\n@interface FWWeakProxyBridge : NSProxy",
          "key.parsed_scope.end" : 26,
          "key.parsed_scope.start" : 20,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 52,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 22,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "target",
              "key.parsed_declaration" : "@property (nonatomic, weak, readonly, nullable) id target",
              "key.parsed_scope.end" : 22,
              "key.parsed_scope.start" : 22,
              "key.swift_declaration" : "weak var target: AnyObject? { get }",
              "key.swift_name" : "target",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWWeakProxyBridge(py)target"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 24,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithTarget:",
              "key.parsed_declaration" : "- (instancetype)initWithTarget:(nullable id)target;",
              "key.parsed_scope.end" : 24,
              "key.parsed_scope.start" : 24,
              "key.swift_declaration" : "init(target: Any?)",
              "key.swift_name" : "init(target:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWWeakProxyBridge(im)initWithTarget:"
            }
          ],
          "key.swift_declaration" : "class WeakProxyBridge : NSProxy",
          "key.swift_name" : "WeakProxyBridge",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)FWWeakProxyBridge"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/ObjC.h",
          "key.doc.line" : 28,
          "key.filepath" : "docs\/FWFramework\/ObjC.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "DelegateProxyBridge",
          "key.parsed_scope.end" : 28,
          "key.parsed_scope.start" : 28
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "事件协议代理基类，可继承重写事件代理方法",
          "key.doc.file" : "docs\/FWFramework\/ObjC.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 32,
          "key.filepath" : "docs\/FWFramework\/ObjC.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "FWDelegateProxyBridge",
          "key.parsed_declaration" : "\n@interface FWDelegateProxyBridge : NSObject",
          "key.parsed_scope.end" : 36,
          "key.parsed_scope.start" : 32,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 42,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 34,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "target",
              "key.parsed_declaration" : "@property (nonatomic, weak, nullable) id target",
              "key.parsed_scope.end" : 34,
              "key.parsed_scope.start" : 34,
              "key.swift_declaration" : "weak var target: AnyObject? { get set }",
              "key.swift_name" : "target",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWDelegateProxyBridge(py)target"
            }
          ],
          "key.swift_declaration" : "class DelegateProxyBridge : NSObject",
          "key.swift_name" : "DelegateProxyBridge",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)FWDelegateProxyBridge"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/ObjC.h",
          "key.doc.line" : 38,
          "key.filepath" : "docs\/FWFramework\/ObjC.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "UnsafeObjectBridge",
          "key.parsed_scope.end" : 38,
          "key.parsed_scope.start" : 38
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "非安全对象类，不同于weak和deinit，自动释放时仍可访问object，可用于自动解绑、释放监听等场景",
          "key.doc.file" : "docs\/FWFramework\/ObjC.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 42,
          "key.filepath" : "docs\/FWFramework\/ObjC.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "FWUnsafeObjectBridge",
          "key.parsed_declaration" : "\n@interface FWUnsafeObjectBridge : NSObject",
          "key.parsed_scope.end" : 48,
          "key.parsed_scope.start" : 42,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 55,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 44,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "object",
              "key.parsed_declaration" : "@property (nonatomic, unsafe_unretained, nullable) id object",
              "key.parsed_scope.end" : 44,
              "key.parsed_scope.start" : 44,
              "key.swift_declaration" : "unowned(unsafe) var object: AnyObject? { get set }",
              "key.swift_name" : "object",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWUnsafeObjectBridge(py)object"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 46,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-deallocObject",
              "key.parsed_declaration" : "- (void)deallocObject;",
              "key.parsed_scope.end" : 46,
              "key.parsed_scope.start" : 46,
              "key.swift_declaration" : "func deallocObject()",
              "key.swift_name" : "deallocObject()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWUnsafeObjectBridge(im)deallocObject"
            }
          ],
          "key.swift_declaration" : "class UnsafeObjectBridge : NSObject",
          "key.swift_name" : "UnsafeObjectBridge",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)FWUnsafeObjectBridge"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/ObjC.h",
          "key.doc.line" : 50,
          "key.filepath" : "docs\/FWFramework\/ObjC.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "ObjCBridge",
          "key.parsed_scope.end" : 50,
          "key.parsed_scope.start" : 50
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 11,
          "key.doc.comment" : "ObjC桥接协议，Swift扩展实现桥接协议即可",
          "key.doc.file" : "docs\/FWFramework\/ObjC.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 54,
          "key.filepath" : "docs\/FWFramework\/ObjC.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.protocol",
          "key.name" : "FWObjCBridgeProtocol",
          "key.parsed_declaration" : "@protocol FWObjCBridgeProtocol <NSObject>",
          "key.parsed_scope.end" : 61,
          "key.parsed_scope.start" : 54,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 57,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+autoload",
              "key.parsed_declaration" : "+ (void)autoload;",
              "key.parsed_scope.end" : 57,
              "key.parsed_scope.start" : 57,
              "key.swift_declaration" : "optional static func autoload()",
              "key.swift_name" : "autoload()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)FWObjCBridgeProtocol(cm)autoload"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 58,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+log:",
              "key.parsed_declaration" : "+ (void)log:(NSString *)message;",
              "key.parsed_scope.end" : 58,
              "key.parsed_scope.start" : 58,
              "key.swift_declaration" : "optional static func log(_ message: String)",
              "key.swift_name" : "log(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)FWObjCBridgeProtocol(cm)log:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 23,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 59,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+image:scale:options:",
              "key.parsed_declaration" : "+ (nullable UIImage *)image:(NSData *)data scale:(CGFloat)scale options:(nullable NSDictionary *)options;",
              "key.parsed_scope.end" : 59,
              "key.parsed_scope.start" : 59,
              "key.swift_declaration" : "optional static func image(_ data: Data, scale: CGFloat, options: [AnyHashable : Any]? = nil) -> UIImage?",
              "key.swift_name" : "image(_:scale:options:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)FWObjCBridgeProtocol(cm)image:scale:options:"
            }
          ],
          "key.swift_declaration" : "protocol ObjCBridgeProtocol : NSObjectProtocol",
          "key.swift_name" : "ObjCBridgeProtocol",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(pl)FWObjCBridgeProtocol"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "ObjC桥接类，用于桥接Swift不支持的ObjC特性",
          "key.doc.file" : "docs\/FWFramework\/ObjC.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 65,
          "key.filepath" : "docs\/FWFramework\/ObjC.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "FWObjCBridge",
          "key.parsed_declaration" : "\n@interface FWObjCBridge : NSObject",
          "key.parsed_scope.end" : 113,
          "key.parsed_scope.start" : 65,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 67,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+swizzleInstanceMethod:selector:withBlock:",
              "key.parsed_declaration" : "+ (BOOL)swizzleInstanceMethod:(Class)originalClass selector:(SEL)originalSelector withBlock:(id (^)(__unsafe_unretained Class targetClass, SEL originalCMD, IMP (^originalIMP)(void)))block;",
              "key.parsed_scope.end" : 67,
              "key.parsed_scope.start" : 67,
              "key.swift_declaration" : "class func swizzleInstanceMethod(_ originalClass: AnyClass, selector originalSelector: Selector, with block: @escaping (AnyClass, Selector, @escaping () -> IMP) -> Any) -> Bool",
              "key.swift_name" : "swizzleInstanceMethod(_:selector:with:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)swizzleInstanceMethod:selector:withBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 69,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+swizzleInstanceMethod:selector:identifier:withBlock:",
              "key.parsed_declaration" : "+ (BOOL)swizzleInstanceMethod:(Class)originalClass selector:(SEL)originalSelector identifier:(nullable NSString *)identifier withBlock:(id (^)(__unsafe_unretained Class targetClass, SEL originalCMD, IMP (^originalIMP)(void)))block;",
              "key.parsed_scope.end" : 69,
              "key.parsed_scope.start" : 69,
              "key.swift_declaration" : "class func swizzleInstanceMethod(_ originalClass: AnyClass, selector originalSelector: Selector, identifier: String?, with block: @escaping (AnyClass, Selector, @escaping () -> IMP) -> Any) -> Bool",
              "key.swift_name" : "swizzleInstanceMethod(_:selector:identifier:with:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)swizzleInstanceMethod:selector:identifier:withBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 71,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+swizzleDeallocMethod:identifier:withBlock:",
              "key.parsed_declaration" : "+ (BOOL)swizzleDeallocMethod:(Class)originalClass identifier:(nullable NSString *)identifier withBlock:(void (^)(__kindof NSObject *__unsafe_unretained object))block;",
              "key.parsed_scope.end" : 71,
              "key.parsed_scope.start" : 71,
              "key.swift_declaration" : "class func swizzleDeallocMethod(_ originalClass: AnyClass, identifier: String?, with block: @escaping (NSObject) -> Void) -> Bool",
              "key.swift_name" : "swizzleDeallocMethod(_:identifier:with:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)swizzleDeallocMethod:identifier:withBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 73,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+exchangeInstanceMethod:originalSelector:swizzleSelector:",
              "key.parsed_declaration" : "+ (BOOL)exchangeInstanceMethod:(Class)originalClass originalSelector:(SEL)originalSelector swizzleSelector:(SEL)swizzleSelector;",
              "key.parsed_scope.end" : 73,
              "key.parsed_scope.start" : 73,
              "key.swift_declaration" : "class func exchangeInstanceMethod(_ originalClass: AnyClass, originalSelector: Selector, swizzleSelector: Selector) -> Bool",
              "key.swift_name" : "exchangeInstanceMethod(_:originalSelector:swizzleSelector:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)exchangeInstanceMethod:originalSelector:swizzleSelector:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 75,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+exchangeInstanceMethod:originalSelector:swizzleSelector:withBlock:",
              "key.parsed_declaration" : "+ (BOOL)exchangeInstanceMethod:(Class)originalClass originalSelector:(SEL)originalSelector swizzleSelector:(SEL)swizzleSelector withBlock:(id)swizzleBlock;",
              "key.parsed_scope.end" : 75,
              "key.parsed_scope.start" : 75,
              "key.swift_declaration" : "class func exchangeInstanceMethod(_ originalClass: AnyClass, originalSelector: Selector, swizzleSelector: Selector, withBlock swizzleBlock: Any) -> Bool",
              "key.swift_name" : "exchangeInstanceMethod(_:originalSelector:swizzleSelector:withBlock:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)exchangeInstanceMethod:originalSelector:swizzleSelector:withBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 77,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+invokeMethod:selector:",
              "key.parsed_declaration" : "+ (nullable id)invokeMethod:(id)target selector:(SEL)aSelector;",
              "key.parsed_scope.end" : 77,
              "key.parsed_scope.start" : 77,
              "key.swift_declaration" : "class func invokeMethod(_ target: Any, selector aSelector: Selector) -> Any?",
              "key.swift_name" : "invokeMethod(_:selector:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)invokeMethod:selector:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 79,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+invokeMethod:selector:object:",
              "key.parsed_declaration" : "+ (nullable id)invokeMethod:(id)target selector:(SEL)aSelector object:(nullable id)object;",
              "key.parsed_scope.end" : 79,
              "key.parsed_scope.start" : 79,
              "key.swift_declaration" : "class func invokeMethod(_ target: Any, selector aSelector: Selector, object: Any?) -> Any?",
              "key.swift_name" : "invokeMethod(_:selector:object:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)invokeMethod:selector:object:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 81,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+invokeMethod:selector:object:object:",
              "key.parsed_declaration" : "+ (nullable id)invokeMethod:(id)target selector:(SEL)aSelector object:(nullable id)object1 object:(nullable id)object2;",
              "key.parsed_scope.end" : 81,
              "key.parsed_scope.start" : 81,
              "key.swift_declaration" : "class func invokeMethod(_ target: Any, selector aSelector: Selector, object object1: Any?, object object2: Any?) -> Any?",
              "key.swift_name" : "invokeMethod(_:selector:object:object:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)invokeMethod:selector:object:object:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 83,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+invokeMethod:selector:objects:",
              "key.parsed_declaration" : "+ (nullable id)invokeMethod:(id)target selector:(SEL)aSelector objects:(NSArray *)objects;",
              "key.parsed_scope.end" : 83,
              "key.parsed_scope.start" : 83,
              "key.swift_declaration" : "class func invokeMethod(_ target: Any, selector aSelector: Selector, objects: [Any]) -> Any?",
              "key.swift_name" : "invokeMethod(_:selector:objects:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)invokeMethod:selector:objects:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 85,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+invokeMethod:selector:arguments:returnValue:",
              "key.parsed_declaration" : "+ (BOOL)invokeMethod:(id)target selector:(SEL)selector arguments:(nullable NSArray *)arguments returnValue:(void *)result;",
              "key.parsed_scope.end" : 85,
              "key.parsed_scope.start" : 85,
              "key.swift_declaration" : "class func invokeMethod(_ target: Any, selector: Selector, arguments: [Any]?, returnValue result: UnsafeMutableRawPointer) -> Bool",
              "key.swift_name" : "invokeMethod(_:selector:arguments:returnValue:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)invokeMethod:selector:arguments:returnValue:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 87,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+invokeGetter:name:",
              "key.parsed_declaration" : "+ (nullable id)invokeGetter:(id)target name:(NSString *)name;",
              "key.parsed_scope.end" : 87,
              "key.parsed_scope.start" : 87,
              "key.swift_declaration" : "class func invokeGetter(_ target: Any, name: String) -> Any?",
              "key.swift_name" : "invokeGetter(_:name:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)invokeGetter:name:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 89,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+invokeSetter:name:object:",
              "key.parsed_declaration" : "+ (nullable id)invokeSetter:(id)target name:(NSString *)name object:(nullable id)object;",
              "key.parsed_scope.end" : 89,
              "key.parsed_scope.start" : 89,
              "key.swift_declaration" : "class func invokeSetter(_ target: Any, name: String, object: Any?) -> Any?",
              "key.swift_name" : "invokeSetter(_:name:object:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)invokeSetter:name:object:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 7,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 91,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+appearanceForClass:",
              "key.parsed_declaration" : "+ (id)appearanceForClass:(Class)aClass;",
              "key.parsed_scope.end" : 91,
              "key.parsed_scope.start" : 91,
              "key.swift_declaration" : "class func appearance(for aClass: AnyClass) -> Any",
              "key.swift_name" : "appearance(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)appearanceForClass:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 10,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 93,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+classForAppearance:",
              "key.parsed_declaration" : "+ (Class)classForAppearance:(id)appearance;",
              "key.parsed_scope.end" : 93,
              "key.parsed_scope.start" : 93,
              "key.swift_declaration" : "class func `class`(forAppearance appearance: Any) -> AnyClass",
              "key.swift_name" : "class(forAppearance:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)classForAppearance:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 95,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+applyAppearance:",
              "key.parsed_declaration" : "+ (void)applyAppearance:(NSObject *)object;",
              "key.parsed_scope.end" : 95,
              "key.parsed_scope.start" : 95,
              "key.swift_declaration" : "class func applyAppearance(_ object: NSObject)",
              "key.swift_name" : "applyAppearance(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)applyAppearance:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 21,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 97,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+getClasses:",
              "key.parsed_declaration" : "+ (NSArray<Class> *)getClasses:(Class)superClass;",
              "key.parsed_scope.end" : 97,
              "key.parsed_scope.start" : 97,
              "key.swift_declaration" : "class func getClasses(_ superClass: AnyClass) -> [AnyClass]",
              "key.swift_name" : "getClasses(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)getClasses:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 99,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+logMessage:",
              "key.parsed_declaration" : "+ (void)logMessage:(NSString *)message;",
              "key.parsed_scope.end" : 99,
              "key.parsed_scope.start" : 99,
              "key.swift_declaration" : "class func logMessage(_ message: String)",
              "key.swift_name" : "logMessage(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)logMessage:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 101,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+logDebug:",
              "key.parsed_declaration" : "+ (void)logDebug:(NSString *)message;",
              "key.parsed_scope.end" : 101,
              "key.parsed_scope.start" : 101,
              "key.swift_declaration" : "class func logDebug(_ message: String)",
              "key.swift_name" : "logDebug(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)logDebug:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 23,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 103,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+decodeImage:scale:options:",
              "key.parsed_declaration" : "+ (nullable UIImage *)decodeImage:(NSData *)data scale:(CGFloat)scale options:(nullable NSDictionary *)options;",
              "key.parsed_scope.end" : 103,
              "key.parsed_scope.start" : 103,
              "key.swift_declaration" : "class func decodeImage(_ data: Data, scale: CGFloat, options: [AnyHashable : Any]? = nil) -> UIImage?",
              "key.swift_name" : "decodeImage(_:scale:options:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)decodeImage:scale:options:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 105,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+tryCatch:exceptionHandler:",
              "key.parsed_declaration" : "+ (BOOL)tryCatch:(void (NS_NOESCAPE ^)(void))block exceptionHandler:(nullable void (^)(NSException *exception))exceptionHandler;",
              "key.parsed_scope.end" : 105,
              "key.parsed_scope.start" : 105,
              "key.swift_declaration" : "class func tryCatch(_ block: () -> Void, exceptionHandler: ((NSException) -> Void)? = nil) -> Bool",
              "key.swift_name" : "tryCatch(_:exceptionHandler:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)tryCatch:exceptionHandler:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 107,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+captureExceptions:exceptionHandler:",
              "key.parsed_declaration" : "+ (void)captureExceptions:(NSArray<Class> *)captureClasses exceptionHandler:(nullable void (^)(NSException *exception, Class clazz, SEL selector, NSString *file, NSInteger line))exceptionHandler;",
              "key.parsed_scope.end" : 107,
              "key.parsed_scope.start" : 107,
              "key.swift_declaration" : "class func captureExceptions(_ captureClasses: [AnyClass], exceptionHandler: ((NSException, AnyClass, Selector, String, Int) -> Void)? = nil)",
              "key.swift_name" : "captureExceptions(_:exceptionHandler:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)captureExceptions:exceptionHandler:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 23,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 109,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+svgDecode:thumbnailSize:",
              "key.parsed_declaration" : "+ (nullable UIImage *)svgDecode:(NSData *)data thumbnailSize:(CGSize)thumbnailSize;",
              "key.parsed_scope.end" : 109,
              "key.parsed_scope.start" : 109,
              "key.swift_declaration" : "class func svgDecode(_ data: Data, thumbnailSize: CGSize) -> UIImage?",
              "key.swift_name" : "svgDecode(_:thumbnailSize:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)svgDecode:thumbnailSize:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 22,
              "key.doc.file" : "docs\/FWFramework\/ObjC.h",
              "key.doc.line" : 111,
              "key.filepath" : "docs\/FWFramework\/ObjC.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+svgEncode:",
              "key.parsed_declaration" : "+ (nullable NSData *)svgEncode:(UIImage *)image;",
              "key.parsed_scope.end" : 111,
              "key.parsed_scope.start" : 111,
              "key.swift_declaration" : "class func svgEncode(_ image: UIImage) -> Data?",
              "key.swift_name" : "svgEncode(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)FWObjCBridge(cm)svgEncode:"
            }
          ],
          "key.swift_declaration" : "class ObjCBridge : NSObject",
          "key.swift_name" : "ObjCBridge",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)FWObjCBridge"
        }
      ]
    }
  },
  {
    "docs\/FWFramework\/PlayerCache.h" : {
      "key.diagnostic_stage" : "",
      "key.substructure" : [
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 13,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheLoaderManager",
          "key.parsed_scope.end" : 13,
          "key.parsed_scope.start" : 13
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 19,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheLoaderManager",
          "key.parsed_declaration" : "@interface __FWPlayerCacheLoaderManager : NSObject <AVAssetResourceLoaderDelegate>\n\n@property (nonatomic, weak, nullable) id<__FWPlayerCacheLoaderManagerDelegate> delegate;\n\n\/**\n Normally you no need to call this method to clean cache. Cache cleaned after AVPlayer delloc.\n If you have a singleton AVPlayer then you need call this method to clean cache at suitable time.\n *\/\n- (void)cleanCache;\n\n\/**\n Cancel all downloading loaders.\n *\/\n- (void)cancelLoaders;\n\n+ (NSURL *)assetURLWithURL:(NSURL *)url;\n\n- (AVURLAsset *)URLAssetWithURL:(NSURL *)url;\n- (AVPlayerItem *)playerItemWithURL:(NSURL *)url;\n\n@end",
          "key.parsed_scope.end" : 39,
          "key.parsed_scope.start" : 19,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 80,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 21,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "delegate",
              "key.parsed_declaration" : "@property (nonatomic, weak, nullable) id<__FWPlayerCacheLoaderManagerDelegate> delegate",
              "key.parsed_scope.end" : 21,
              "key.parsed_scope.start" : 21,
              "key.swift_declaration" : "weak var delegate: PlayerCacheLoaderManagerDelegate? { get set }",
              "key.swift_name" : "delegate",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoaderManager(py)delegate"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Normally you no need to call this method to clean cache. Cache cleaned after AVPlayer delloc.\nIf you have a singleton AVPlayer then you need call this method to clean cache at suitable time.",
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 27,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-cleanCache",
              "key.parsed_declaration" : "- (void)cleanCache;",
              "key.parsed_scope.end" : 27,
              "key.parsed_scope.start" : 27,
              "key.swift_declaration" : "func cleanCache()",
              "key.swift_name" : "cleanCache()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoaderManager(im)cleanCache"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Cancel all downloading loaders.",
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 32,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-cancelLoaders",
              "key.parsed_declaration" : "- (void)cancelLoaders;",
              "key.parsed_scope.end" : 32,
              "key.parsed_scope.start" : 32,
              "key.swift_declaration" : "func cancelLoaders()",
              "key.swift_name" : "cancelLoaders()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoaderManager(im)cancelLoaders"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 12,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 34,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+assetURLWithURL:",
              "key.parsed_declaration" : "+ (NSURL *)assetURLWithURL:(NSURL *)url;",
              "key.parsed_scope.end" : 34,
              "key.parsed_scope.start" : 34,
              "key.swift_declaration" : "class func assetURL(with url: URL) -> URL",
              "key.swift_name" : "assetURL(with:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoaderManager(cm)assetURLWithURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 36,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-URLAssetWithURL:",
              "key.parsed_declaration" : "- (AVURLAsset *)URLAssetWithURL:(NSURL *)url;",
              "key.parsed_scope.end" : 36,
              "key.parsed_scope.start" : 36,
              "key.swift_declaration" : "func urlAsset(with url: URL) -> AVURLAsset",
              "key.swift_name" : "urlAsset(with:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoaderManager(im)URLAssetWithURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 19,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 37,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-playerItemWithURL:",
              "key.parsed_declaration" : "- (AVPlayerItem *)playerItemWithURL:(NSURL *)url;",
              "key.parsed_scope.end" : 37,
              "key.parsed_scope.start" : 37,
              "key.swift_declaration" : "func playerItem(with url: URL) -> AVPlayerItem",
              "key.swift_name" : "playerItem(with:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoaderManager(im)playerItemWithURL:"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheLoaderManager : NSObject, AVAssetResourceLoaderDelegate",
          "key.swift_name" : "PlayerCacheLoaderManager",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheLoaderManager"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 11,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 42,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.protocol",
          "key.name" : "__FWPlayerCacheLoaderManagerDelegate",
          "key.parsed_declaration" : "@protocol __FWPlayerCacheLoaderManagerDelegate <NSObject>\n\n- (void)resourceLoaderManagerLoadURL:(NSURL *)url didFailWithError:(NSError *)error;\n\n@end",
          "key.parsed_scope.end" : 46,
          "key.parsed_scope.start" : 42,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 44,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-resourceLoaderManagerLoadURL:didFailWithError:",
              "key.parsed_declaration" : "- (void)resourceLoaderManagerLoadURL:(NSURL *)url didFailWithError:(NSError *)error;",
              "key.parsed_scope.end" : 44,
              "key.parsed_scope.start" : 44,
              "key.swift_declaration" : "func resourceLoaderManagerLoad(_ url: URL, didFailWithError error: Error)",
              "key.swift_name" : "resourceLoaderManagerLoad(_:didFailWithError:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWPlayerCacheLoaderManagerDelegate(im)resourceLoaderManagerLoadURL:didFailWithError:"
            }
          ],
          "key.swift_declaration" : "protocol PlayerCacheLoaderManagerDelegate : NSObjectProtocol",
          "key.swift_name" : "PlayerCacheLoaderManagerDelegate",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(pl)__FWPlayerCacheLoaderManagerDelegate"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 48,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheLoader",
          "key.parsed_scope.end" : 48,
          "key.parsed_scope.start" : 48
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 53,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheLoader",
          "key.parsed_declaration" : "@interface __FWPlayerCacheLoader : NSObject\n\n@property (nonatomic, strong, readonly) NSURL *url;\n@property (nonatomic, weak) id<__FWPlayerCacheLoaderDelegate> delegate;\n\n- (instancetype)initWithURL:(NSURL *)url;\n\n- (void)addRequest:(AVAssetResourceLoadingRequest *)request;\n- (void)removeRequest:(AVAssetResourceLoadingRequest *)request;\n\n- (void)cancel;\n\n@end",
          "key.parsed_scope.end" : 65,
          "key.parsed_scope.start" : 53,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 48,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 55,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "url",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly) NSURL *url",
              "key.parsed_scope.end" : 55,
              "key.parsed_scope.start" : 55,
              "key.swift_declaration" : "var url: URL { get }",
              "key.swift_name" : "url",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoader(py)url"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 63,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 56,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "delegate",
              "key.parsed_declaration" : "@property (nonatomic, weak) id<__FWPlayerCacheLoaderDelegate> delegate",
              "key.parsed_scope.end" : 56,
              "key.parsed_scope.start" : 56,
              "key.swift_declaration" : "weak var delegate: PlayerCacheLoaderDelegate? { get set }",
              "key.swift_name" : "delegate",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoader(py)delegate"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 58,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithURL:",
              "key.parsed_declaration" : "- (instancetype)initWithURL:(NSURL *)url;",
              "key.parsed_scope.end" : 58,
              "key.parsed_scope.start" : 58,
              "key.swift_declaration" : "init(url: URL)",
              "key.swift_name" : "init(url:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoader(im)initWithURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 60,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-addRequest:",
              "key.parsed_declaration" : "- (void)addRequest:(AVAssetResourceLoadingRequest *)request;",
              "key.parsed_scope.end" : 60,
              "key.parsed_scope.start" : 60,
              "key.swift_declaration" : "func add(_ request: AVAssetResourceLoadingRequest)",
              "key.swift_name" : "add(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoader(im)addRequest:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 61,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-removeRequest:",
              "key.parsed_declaration" : "- (void)removeRequest:(AVAssetResourceLoadingRequest *)request;",
              "key.parsed_scope.end" : 61,
              "key.parsed_scope.start" : 61,
              "key.swift_declaration" : "func remove(_ request: AVAssetResourceLoadingRequest)",
              "key.swift_name" : "remove(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoader(im)removeRequest:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 63,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-cancel",
              "key.parsed_declaration" : "- (void)cancel;",
              "key.parsed_scope.end" : 63,
              "key.parsed_scope.start" : 63,
              "key.swift_declaration" : "func cancel()",
              "key.swift_name" : "cancel()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheLoader(im)cancel"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheLoader : NSObject",
          "key.swift_name" : "PlayerCacheLoader",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheLoader"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 11,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 68,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.protocol",
          "key.name" : "__FWPlayerCacheLoaderDelegate",
          "key.parsed_declaration" : "@protocol __FWPlayerCacheLoaderDelegate <NSObject>\n\n- (void)resourceLoader:(__FWPlayerCacheLoader *)resourceLoader didFailWithError:(NSError *)error;\n\n@end",
          "key.parsed_scope.end" : 72,
          "key.parsed_scope.start" : 68,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 70,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-resourceLoader:didFailWithError:",
              "key.parsed_declaration" : "- (void)resourceLoader:(__FWPlayerCacheLoader *)resourceLoader didFailWithError:(NSError *)error;",
              "key.parsed_scope.end" : 70,
              "key.parsed_scope.start" : 70,
              "key.swift_declaration" : "func resourceLoader(_ resourceLoader: PlayerCacheLoader, didFailWithError error: Error)",
              "key.swift_name" : "resourceLoader(_:didFailWithError:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWPlayerCacheLoaderDelegate(im)resourceLoader:didFailWithError:"
            }
          ],
          "key.swift_declaration" : "protocol PlayerCacheLoaderDelegate : NSObjectProtocol",
          "key.swift_name" : "PlayerCacheLoaderDelegate",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(pl)__FWPlayerCacheLoaderDelegate"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 74,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheDownloader",
          "key.parsed_scope.end" : 74,
          "key.parsed_scope.start" : 74
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 81,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheDownloaderStatus",
          "key.parsed_declaration" : "@interface __FWPlayerCacheDownloaderStatus : NSObject\n\n+ (instancetype)shared;\n\n- (void)addURL:(NSURL *)url;\n- (void)removeURL:(NSURL *)url;\n\n\/**\n return YES if downloading the url source\n *\/\n- (BOOL)containsURL:(NSURL *)url;\n- (NSSet *)urls;\n\n@end",
          "key.parsed_scope.end" : 94,
          "key.parsed_scope.start" : 81,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 83,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+shared",
              "key.parsed_declaration" : "+ (instancetype)shared;",
              "key.parsed_scope.end" : 83,
              "key.parsed_scope.start" : 83,
              "key.swift_declaration" : "class func shared() -> Self",
              "key.swift_name" : "shared()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloaderStatus(cm)shared"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 85,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-addURL:",
              "key.parsed_declaration" : "- (void)addURL:(NSURL *)url;",
              "key.parsed_scope.end" : 85,
              "key.parsed_scope.start" : 85,
              "key.swift_declaration" : "func add(_ url: URL)",
              "key.swift_name" : "add(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloaderStatus(im)addURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 86,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-removeURL:",
              "key.parsed_declaration" : "- (void)removeURL:(NSURL *)url;",
              "key.parsed_scope.end" : 86,
              "key.parsed_scope.start" : 86,
              "key.swift_declaration" : "func remove(_ url: URL)",
              "key.swift_name" : "remove(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloaderStatus(im)removeURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "return YES if downloading the url source",
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 91,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-containsURL:",
              "key.parsed_declaration" : "- (BOOL)containsURL:(nonnull NSURL *)url;",
              "key.parsed_scope.end" : 91,
              "key.parsed_scope.start" : 91,
              "key.swift_declaration" : "func contains(_ url: URL) -> Bool",
              "key.swift_name" : "contains(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloaderStatus(im)containsURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 12,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 92,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-urls",
              "key.parsed_declaration" : "- (NSSet *)urls;",
              "key.parsed_scope.end" : 92,
              "key.parsed_scope.start" : 92,
              "key.swift_declaration" : "func urls() -> Set<AnyHashable>",
              "key.swift_name" : "urls()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloaderStatus(im)urls"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheDownloaderStatus : NSObject",
          "key.swift_name" : "PlayerCacheDownloaderStatus",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheDownloaderStatus"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 97,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheDownloader",
          "key.parsed_declaration" : "@interface __FWPlayerCacheDownloader : NSObject\n\n- (instancetype)initWithURL:(NSURL *)url cacheWorker:(__FWPlayerCacheWorker *)cacheWorker;\n@property (nonatomic, strong, readonly) NSURL *url;\n@property (nonatomic, weak) id<__FWPlayerCacheDownloaderDelegate> delegate;\n@property (nonatomic, strong) __FWPlayerCacheContentInfo *info;\n@property (nonatomic, assign) BOOL saveToCache;\n\n- (void)downloadTaskFromOffset:(unsigned long long)fromOffset\n                        length:(NSUInteger)length\n                         toEnd:(BOOL)toEnd;\n- (void)downloadFromStartToEnd;\n\n- (void)cancel;\n\n@end",
          "key.parsed_scope.end" : 112,
          "key.parsed_scope.start" : 97,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 99,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithURL:cacheWorker:",
              "key.parsed_declaration" : "- (instancetype)initWithURL:(NSURL *)url cacheWorker:(__FWPlayerCacheWorker *)cacheWorker;",
              "key.parsed_scope.end" : 99,
              "key.parsed_scope.start" : 99,
              "key.swift_declaration" : "init(url: URL, cacheWorker: PlayerCacheWorker)",
              "key.swift_name" : "init(url:cacheWorker:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloader(im)initWithURL:cacheWorker:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 48,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 100,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "url",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly) NSURL *url",
              "key.parsed_scope.end" : 100,
              "key.parsed_scope.start" : 100,
              "key.swift_declaration" : "var url: URL { get }",
              "key.swift_name" : "url",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloader(py)url"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 67,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 101,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "delegate",
              "key.parsed_declaration" : "@property (nonatomic, weak) id<__FWPlayerCacheDownloaderDelegate> delegate",
              "key.parsed_scope.end" : 101,
              "key.parsed_scope.start" : 101,
              "key.swift_declaration" : "weak var delegate: PlayerCacheDownloaderDelegate? { get set }",
              "key.swift_name" : "delegate",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloader(py)delegate"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 59,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 102,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "info",
              "key.parsed_declaration" : "@property (nonatomic, strong) __FWPlayerCacheContentInfo *info",
              "key.parsed_scope.end" : 102,
              "key.parsed_scope.start" : 102,
              "key.swift_declaration" : "var info: PlayerCacheContentInfo { get set }",
              "key.swift_name" : "info",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloader(py)info"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 103,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "saveToCache",
              "key.parsed_declaration" : "@property (nonatomic, assign) BOOL saveToCache",
              "key.parsed_scope.end" : 103,
              "key.parsed_scope.start" : 103,
              "key.swift_declaration" : "var saveToCache: Bool { get set }",
              "key.swift_name" : "saveToCache",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloader(py)saveToCache"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 105,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-downloadTaskFromOffset:length:toEnd:",
              "key.parsed_declaration" : "- (void)downloadTaskFromOffset:(unsigned long long)fromOffset\n                        length:(NSUInteger)length\n                         toEnd:(BOOL)toEnd;",
              "key.parsed_scope.end" : 107,
              "key.parsed_scope.start" : 105,
              "key.swift_declaration" : "func downloadTask(fromOffset: UInt64, length: UInt, toEnd: Bool)",
              "key.swift_name" : "downloadTask(fromOffset:length:toEnd:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloader(im)downloadTaskFromOffset:length:toEnd:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 108,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-downloadFromStartToEnd",
              "key.parsed_declaration" : "- (void)downloadFromStartToEnd;",
              "key.parsed_scope.end" : 108,
              "key.parsed_scope.start" : 108,
              "key.swift_declaration" : "func downloadFromStartToEnd()",
              "key.swift_name" : "downloadFromStartToEnd()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloader(im)downloadFromStartToEnd"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 110,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-cancel",
              "key.parsed_declaration" : "- (void)cancel;",
              "key.parsed_scope.end" : 110,
              "key.parsed_scope.start" : 110,
              "key.swift_declaration" : "func cancel()",
              "key.swift_name" : "cancel()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheDownloader(im)cancel"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheDownloader : NSObject",
          "key.swift_name" : "PlayerCacheDownloader",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheDownloader"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 11,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 115,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.protocol",
          "key.name" : "__FWPlayerCacheDownloaderDelegate",
          "key.parsed_declaration" : "@protocol __FWPlayerCacheDownloaderDelegate <NSObject>\n\n@optional\n- (void)mediaDownloader:(__FWPlayerCacheDownloader *)downloader didReceiveResponse:(NSURLResponse *)response;\n- (void)mediaDownloader:(__FWPlayerCacheDownloader *)downloader didReceiveData:(NSData *)data;\n- (void)mediaDownloader:(__FWPlayerCacheDownloader *)downloader didFinishedWithError:(NSError *)error;\n\n@end",
          "key.parsed_scope.end" : 122,
          "key.parsed_scope.start" : 115,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 118,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-mediaDownloader:didReceiveResponse:",
              "key.parsed_declaration" : "- (void)mediaDownloader:(__FWPlayerCacheDownloader *)downloader didReceiveResponse:(NSURLResponse *)response;",
              "key.parsed_scope.end" : 118,
              "key.parsed_scope.start" : 118,
              "key.swift_declaration" : "optional func mediaDownloader(_ downloader: PlayerCacheDownloader, didReceive response: URLResponse)",
              "key.swift_name" : "mediaDownloader(_:didReceive:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWPlayerCacheDownloaderDelegate(im)mediaDownloader:didReceiveResponse:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 119,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-mediaDownloader:didReceiveData:",
              "key.parsed_declaration" : "- (void)mediaDownloader:(__FWPlayerCacheDownloader *)downloader didReceiveData:(NSData *)data;",
              "key.parsed_scope.end" : 119,
              "key.parsed_scope.start" : 119,
              "key.swift_declaration" : "optional func mediaDownloader(_ downloader: PlayerCacheDownloader, didReceive data: Data)",
              "key.swift_name" : "mediaDownloader(_:didReceive:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWPlayerCacheDownloaderDelegate(im)mediaDownloader:didReceiveData:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 120,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-mediaDownloader:didFinishedWithError:",
              "key.parsed_declaration" : "- (void)mediaDownloader:(__FWPlayerCacheDownloader *)downloader didFinishedWithError:(NSError *)error;",
              "key.parsed_scope.end" : 120,
              "key.parsed_scope.start" : 120,
              "key.swift_declaration" : "optional func mediaDownloader(_ downloader: PlayerCacheDownloader, didFinishedWithError error: Error)",
              "key.swift_name" : "mediaDownloader(_:didFinishedWithError:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWPlayerCacheDownloaderDelegate(im)mediaDownloader:didFinishedWithError:"
            }
          ],
          "key.swift_declaration" : "protocol PlayerCacheDownloaderDelegate : NSObjectProtocol",
          "key.swift_name" : "PlayerCacheDownloaderDelegate",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(pl)__FWPlayerCacheDownloaderDelegate"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 124,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheRequestWorker",
          "key.parsed_scope.end" : 124,
          "key.parsed_scope.start" : 124
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 130,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheRequestWorker",
          "key.parsed_declaration" : "@interface __FWPlayerCacheRequestWorker : NSObject\n\n- (instancetype)initWithMediaDownloader:(__FWPlayerCacheDownloader *)mediaDownloader resourceLoadingRequest:(AVAssetResourceLoadingRequest *)request;\n\n@property (nonatomic, weak) id<__FWPlayerCacheRequestWorkerDelegate> delegate;\n\n@property (nonatomic, strong, readonly) AVAssetResourceLoadingRequest *request;\n\n- (void)startWork;\n- (void)cancel;\n- (void)finish;\n\n@end",
          "key.parsed_scope.end" : 142,
          "key.parsed_scope.start" : 130,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 132,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithMediaDownloader:resourceLoadingRequest:",
              "key.parsed_declaration" : "- (instancetype)initWithMediaDownloader:(__FWPlayerCacheDownloader *)mediaDownloader resourceLoadingRequest:(AVAssetResourceLoadingRequest *)request;",
              "key.parsed_scope.end" : 132,
              "key.parsed_scope.start" : 132,
              "key.swift_declaration" : "init(mediaDownloader: PlayerCacheDownloader, resourceLoadingRequest request: AVAssetResourceLoadingRequest)",
              "key.swift_name" : "init(mediaDownloader:resourceLoadingRequest:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheRequestWorker(im)initWithMediaDownloader:resourceLoadingRequest:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 70,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 134,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "delegate",
              "key.parsed_declaration" : "@property (nonatomic, weak) id<__FWPlayerCacheRequestWorkerDelegate> delegate",
              "key.parsed_scope.end" : 134,
              "key.parsed_scope.start" : 134,
              "key.swift_declaration" : "weak var delegate: PlayerCacheRequestWorkerDelegate? { get set }",
              "key.swift_name" : "delegate",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheRequestWorker(py)delegate"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 72,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 136,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "request",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly) AVAssetResourceLoadingRequest *request",
              "key.parsed_scope.end" : 136,
              "key.parsed_scope.start" : 136,
              "key.swift_declaration" : "var request: AVAssetResourceLoadingRequest { get }",
              "key.swift_name" : "request",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheRequestWorker(py)request"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 138,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-startWork",
              "key.parsed_declaration" : "- (void)startWork;",
              "key.parsed_scope.end" : 138,
              "key.parsed_scope.start" : 138,
              "key.swift_declaration" : "func startWork()",
              "key.swift_name" : "startWork()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheRequestWorker(im)startWork"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 139,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-cancel",
              "key.parsed_declaration" : "- (void)cancel;",
              "key.parsed_scope.end" : 139,
              "key.parsed_scope.start" : 139,
              "key.swift_declaration" : "func cancel()",
              "key.swift_name" : "cancel()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheRequestWorker(im)cancel"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 140,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-finish",
              "key.parsed_declaration" : "- (void)finish;",
              "key.parsed_scope.end" : 140,
              "key.parsed_scope.start" : 140,
              "key.swift_declaration" : "func finish()",
              "key.swift_name" : "finish()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheRequestWorker(im)finish"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheRequestWorker : NSObject",
          "key.swift_name" : "PlayerCacheRequestWorker",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheRequestWorker"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 11,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 145,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.protocol",
          "key.name" : "__FWPlayerCacheRequestWorkerDelegate",
          "key.parsed_declaration" : "@protocol __FWPlayerCacheRequestWorkerDelegate <NSObject>\n\n- (void)resourceLoadingRequestWorker:(__FWPlayerCacheRequestWorker *)requestWorker didCompleteWithError:(NSError *)error;\n\n@end",
          "key.parsed_scope.end" : 149,
          "key.parsed_scope.start" : 145,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 147,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-resourceLoadingRequestWorker:didCompleteWithError:",
              "key.parsed_declaration" : "- (void)resourceLoadingRequestWorker:(__FWPlayerCacheRequestWorker *)requestWorker didCompleteWithError:(NSError *)error;",
              "key.parsed_scope.end" : 147,
              "key.parsed_scope.start" : 147,
              "key.swift_declaration" : "func resourceLoading(_ requestWorker: PlayerCacheRequestWorker, didCompleteWithError error: Error)",
              "key.swift_name" : "resourceLoading(_:didCompleteWithError:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWPlayerCacheRequestWorkerDelegate(im)resourceLoadingRequestWorker:didCompleteWithError:"
            }
          ],
          "key.swift_declaration" : "protocol PlayerCacheRequestWorkerDelegate : NSObjectProtocol",
          "key.swift_name" : "PlayerCacheRequestWorkerDelegate",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(pl)__FWPlayerCacheRequestWorkerDelegate"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 151,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheContentInfo",
          "key.parsed_scope.end" : 151,
          "key.parsed_scope.start" : 151
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 154,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheContentInfo",
          "key.parsed_declaration" : "@interface __FWPlayerCacheContentInfo : NSObject <NSCoding>\n\n@property (nonatomic, copy) NSString *contentType;\n@property (nonatomic, assign) BOOL byteRangeAccessSupported;\n@property (nonatomic, assign) unsigned long long contentLength;\n@property (nonatomic) unsigned long long downloadedContentLength;\n\n@end",
          "key.parsed_scope.end" : 161,
          "key.parsed_scope.start" : 154,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 39,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 156,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "contentType",
              "key.parsed_declaration" : "@property (nonatomic, copy) NSString *contentType",
              "key.parsed_scope.end" : 156,
              "key.parsed_scope.start" : 156,
              "key.swift_declaration" : "var contentType: String { get set }",
              "key.swift_name" : "contentType",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheContentInfo(py)contentType"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 157,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "byteRangeAccessSupported",
              "key.parsed_declaration" : "@property (nonatomic, assign) BOOL byteRangeAccessSupported",
              "key.parsed_scope.end" : 157,
              "key.parsed_scope.start" : 157,
              "key.swift_declaration" : "var byteRangeAccessSupported: Bool { get set }",
              "key.swift_name" : "byteRangeAccessSupported",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheContentInfo(py)byteRangeAccessSupported"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 50,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 158,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "contentLength",
              "key.parsed_declaration" : "@property (nonatomic, assign) unsigned long long contentLength",
              "key.parsed_scope.end" : 158,
              "key.parsed_scope.start" : 158,
              "key.swift_declaration" : "var contentLength: UInt64 { get set }",
              "key.swift_name" : "contentLength",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheContentInfo(py)contentLength"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 42,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 159,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "downloadedContentLength",
              "key.parsed_declaration" : "@property (nonatomic) unsigned long long downloadedContentLength",
              "key.parsed_scope.end" : 159,
              "key.parsed_scope.start" : 159,
              "key.swift_declaration" : "var downloadedContentLength: UInt64 { get set }",
              "key.swift_name" : "downloadedContentLength",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheContentInfo(py)downloadedContentLength"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheContentInfo : NSObject, NSCoding",
          "key.swift_name" : "PlayerCacheContentInfo",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheContentInfo"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 163,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheAction",
          "key.parsed_scope.end" : 163,
          "key.parsed_scope.start" : 163
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 29,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 165,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.typedef",
          "key.name" : "__FWPlayerCacheAtionType",
          "key.parsed_declaration" : "typedef NS_ENUM(NSUInteger, __FWPlayerCacheAtionType",
          "key.parsed_scope.end" : 165,
          "key.parsed_scope.start" : 165,
          "key.unavailable_message" : "",
          "key.usr" : "c:PlayerCache.h@T@__FWPlayerCacheAtionType"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 29,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 165,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.enum",
          "key.name" : "__FWPlayerCacheAtionType",
          "key.parsed_declaration" : "NS_ENUM(NSUInteger, __FWPlayerCacheAtionType) {\n    __FWPlayerCacheAtionTypeLocal = 0,\n    __FWPlayerCacheAtionTypeRemote\n}",
          "key.parsed_scope.end" : 168,
          "key.parsed_scope.start" : 165,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 5,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 166,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.name" : "__FWPlayerCacheAtionTypeLocal",
              "key.parsed_declaration" : "__FWPlayerCacheAtionTypeLocal = 0",
              "key.parsed_scope.end" : 166,
              "key.parsed_scope.start" : 166,
              "key.swift_declaration" : "case local = 0",
              "key.swift_name" : "local",
              "key.unavailable_message" : "",
              "key.usr" : "c:@E@__FWPlayerCacheAtionType@__FWPlayerCacheAtionTypeLocal"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 5,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 167,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.name" : "__FWPlayerCacheAtionTypeRemote",
              "key.parsed_declaration" : "__FWPlayerCacheAtionTypeRemote",
              "key.parsed_scope.end" : 167,
              "key.parsed_scope.start" : 167,
              "key.swift_declaration" : "case remote = 1",
              "key.swift_name" : "remote",
              "key.unavailable_message" : "",
              "key.usr" : "c:@E@__FWPlayerCacheAtionType@__FWPlayerCacheAtionTypeRemote"
            }
          ],
          "key.swift_declaration" : "enum PlayerCacheAtionType : UInt, @unchecked Sendable",
          "key.swift_name" : "PlayerCacheAtionType",
          "key.unavailable_message" : "",
          "key.usr" : "c:@E@__FWPlayerCacheAtionType"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 171,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheAction",
          "key.parsed_declaration" : "@interface __FWPlayerCacheAction : NSObject\n\n- (instancetype)initWithActionType:(__FWPlayerCacheAtionType)actionType range:(NSRange)range;\n\n@property (nonatomic) __FWPlayerCacheAtionType actionType;\n@property (nonatomic) NSRange range;\n\n@end",
          "key.parsed_scope.end" : 178,
          "key.parsed_scope.start" : 171,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 173,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithActionType:range:",
              "key.parsed_declaration" : "- (instancetype)initWithActionType:(__FWPlayerCacheAtionType)actionType range:(NSRange)range;",
              "key.parsed_scope.end" : 173,
              "key.parsed_scope.start" : 173,
              "key.swift_declaration" : "init(actionType: PlayerCacheAtionType, range: NSRange)",
              "key.swift_name" : "init(actionType:range:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheAction(im)initWithActionType:range:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 48,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 175,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "actionType",
              "key.parsed_declaration" : "@property (nonatomic) __FWPlayerCacheAtionType actionType",
              "key.parsed_scope.end" : 175,
              "key.parsed_scope.start" : 175,
              "key.swift_declaration" : "var actionType: PlayerCacheAtionType { get set }",
              "key.swift_name" : "actionType",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheAction(py)actionType"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 31,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 176,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "range",
              "key.parsed_declaration" : "@property (nonatomic) NSRange range",
              "key.parsed_scope.end" : 176,
              "key.parsed_scope.start" : 176,
              "key.swift_declaration" : "var range: NSRange { get set }",
              "key.swift_name" : "range",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheAction(py)range"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheAction : NSObject",
          "key.swift_name" : "PlayerCacheAction",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheAction"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 180,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheConfiguration",
          "key.parsed_scope.end" : 180,
          "key.parsed_scope.start" : 180
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 183,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheConfiguration",
          "key.parsed_declaration" : "@interface __FWPlayerCacheConfiguration : NSObject <NSCopying>\n\n+ (NSString *)configurationFilePathForFilePath:(NSString *)filePath;\n\n+ (instancetype)configurationWithFilePath:(NSString *)filePath;\n\n@property (nonatomic, copy, readonly) NSString *filePath;\n@property (nonatomic, strong) __FWPlayerCacheContentInfo *contentInfo;\n@property (nonatomic, strong) NSURL *url;\n\n- (NSArray<NSValue *> *)cacheFragments;\n\n\/**\n *  cached progress\n *\/\n@property (nonatomic, readonly) float progress;\n@property (nonatomic, readonly) long long downloadedBytes;\n@property (nonatomic, readonly) float downloadSpeed; \/\/ kb\/s\n\n#pragma mark - update API\n\n- (void)save;\n- (void)addCacheFragment:(NSRange)fragment;\n\n\/**\n *  Record the download speed\n *\/\n- (void)addDownloadedBytes:(long long)bytes spent:(NSTimeInterval)time;\n\n+ (BOOL)createAndSaveDownloadedConfigurationForURL:(NSURL *)url error:(NSError **)error;\n\n@end",
          "key.parsed_scope.end" : 214,
          "key.parsed_scope.start" : 183,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 15,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 185,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+configurationFilePathForFilePath:",
              "key.parsed_declaration" : "+ (NSString *)configurationFilePathForFilePath:(NSString *)filePath;",
              "key.parsed_scope.end" : 185,
              "key.parsed_scope.start" : 185,
              "key.swift_declaration" : "class func configurationFilePath(forFilePath filePath: String) -> String",
              "key.swift_name" : "configurationFilePath(forFilePath:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(cm)configurationFilePathForFilePath:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 187,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+configurationWithFilePath:",
              "key.parsed_declaration" : "+ (instancetype)configurationWithFilePath:(NSString *)filePath;",
              "key.parsed_scope.end" : 187,
              "key.parsed_scope.start" : 187,
              "key.swift_declaration" : "convenience init(filePath: String)",
              "key.swift_name" : "init(filePath:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(cm)configurationWithFilePath:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 49,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 189,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "filePath",
              "key.parsed_declaration" : "@property (nonatomic, copy, readonly) NSString *filePath",
              "key.parsed_scope.end" : 189,
              "key.parsed_scope.start" : 189,
              "key.swift_declaration" : "var filePath: String { get }",
              "key.swift_name" : "filePath",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(py)filePath"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 59,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 190,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "contentInfo",
              "key.parsed_declaration" : "@property (nonatomic, strong) __FWPlayerCacheContentInfo *contentInfo",
              "key.parsed_scope.end" : 190,
              "key.parsed_scope.start" : 190,
              "key.swift_declaration" : "var contentInfo: PlayerCacheContentInfo { get set }",
              "key.swift_name" : "contentInfo",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(py)contentInfo"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 38,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 191,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "url",
              "key.parsed_declaration" : "@property (nonatomic, strong) NSURL *url",
              "key.parsed_scope.end" : 191,
              "key.parsed_scope.start" : 191,
              "key.swift_declaration" : "var url: URL { get set }",
              "key.swift_name" : "url",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(py)url"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 25,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 193,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-cacheFragments",
              "key.parsed_declaration" : "- (NSArray<NSValue *> *)cacheFragments;",
              "key.parsed_scope.end" : 193,
              "key.parsed_scope.start" : 193,
              "key.swift_declaration" : "func cacheFragments() -> [NSValue]",
              "key.swift_name" : "cacheFragments()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(im)cacheFragments"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 39,
              "key.doc.comment" : "cached progress",
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 198,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "progress",
              "key.parsed_declaration" : "@property (nonatomic, readonly) float progress;",
              "key.parsed_scope.end" : 198,
              "key.parsed_scope.start" : 198,
              "key.swift_declaration" : "var progress: Float { get }",
              "key.swift_name" : "progress",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(py)progress"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 43,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 199,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "downloadedBytes",
              "key.parsed_declaration" : "@property (nonatomic, readonly) long long downloadedBytes",
              "key.parsed_scope.end" : 199,
              "key.parsed_scope.start" : 199,
              "key.swift_declaration" : "var downloadedBytes: Int64 { get }",
              "key.swift_name" : "downloadedBytes",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(py)downloadedBytes"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 39,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 200,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "downloadSpeed",
              "key.parsed_declaration" : "@property (nonatomic, readonly) float downloadSpeed",
              "key.parsed_scope.end" : 200,
              "key.parsed_scope.start" : 200,
              "key.swift_declaration" : "var downloadSpeed: Float { get }",
              "key.swift_name" : "downloadSpeed",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(py)downloadSpeed"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 202,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "update API",
              "key.parsed_scope.end" : 202,
              "key.parsed_scope.start" : 202
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 204,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-save",
              "key.parsed_declaration" : "- (void)save;",
              "key.parsed_scope.end" : 204,
              "key.parsed_scope.start" : 204,
              "key.swift_declaration" : "func save()",
              "key.swift_name" : "save()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(im)save"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 205,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-addCacheFragment:",
              "key.parsed_declaration" : "- (void)addCacheFragment:(NSRange)fragment;",
              "key.parsed_scope.end" : 205,
              "key.parsed_scope.start" : 205,
              "key.swift_declaration" : "func addCacheFragment(_ fragment: NSRange)",
              "key.swift_name" : "addCacheFragment(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(im)addCacheFragment:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Record the download speed",
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 210,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-addDownloadedBytes:spent:",
              "key.parsed_declaration" : "- (void)addDownloadedBytes:(long long)bytes spent:(NSTimeInterval)time;",
              "key.parsed_scope.end" : 210,
              "key.parsed_scope.start" : 210,
              "key.swift_declaration" : "func addDownloadedBytes(_ bytes: Int64, spent time: TimeInterval)",
              "key.swift_name" : "addDownloadedBytes(_:spent:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(im)addDownloadedBytes:spent:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 212,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+createAndSaveDownloadedConfigurationForURL:error:",
              "key.parsed_declaration" : "+ (BOOL)createAndSaveDownloadedConfigurationForURL:(NSURL *)url error:(NSError **)error;",
              "key.parsed_scope.end" : 212,
              "key.parsed_scope.start" : 212,
              "key.swift_declaration" : "class func createAndSaveDownloadedConfiguration(for url: URL) throws",
              "key.swift_name" : "createAndSaveDownloadedConfiguration(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration(cm)createAndSaveDownloadedConfigurationForURL:error:"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheConfiguration : NSObject, NSCopying",
          "key.swift_name" : "PlayerCacheConfiguration",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheConfiguration"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 216,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheManager",
          "key.parsed_scope.end" : 216,
          "key.parsed_scope.start" : 216
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 27,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 218,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWPlayerCacheManagerDidUpdateCacheNotification",
          "key.parsed_declaration" : "extern NSNotificationName __FWPlayerCacheManagerDidUpdateCacheNotification",
          "key.parsed_scope.end" : 218,
          "key.parsed_scope.start" : 218,
          "key.swift_declaration" : "static let PlayerCacheManagerDidUpdate: NSNotification.Name",
          "key.swift_name" : "PlayerCacheManagerDidUpdate",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWPlayerCacheManagerDidUpdateCacheNotification"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 27,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 219,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWPlayerCacheManagerDidFinishCacheNotification",
          "key.parsed_declaration" : "extern NSNotificationName __FWPlayerCacheManagerDidFinishCacheNotification",
          "key.parsed_scope.end" : 219,
          "key.parsed_scope.start" : 219,
          "key.swift_declaration" : "static let PlayerCacheManagerDidFinish: NSNotification.Name",
          "key.swift_name" : "PlayerCacheManagerDidFinish",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWPlayerCacheManagerDidFinishCacheNotification"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 18,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 221,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWPlayerCacheConfigurationKey",
          "key.parsed_declaration" : "extern NSString *__FWPlayerCacheConfigurationKey",
          "key.parsed_scope.end" : 221,
          "key.parsed_scope.start" : 221,
          "key.swift_declaration" : "let PlayerCacheConfigurationKey: String",
          "key.swift_name" : "PlayerCacheConfigurationKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWPlayerCacheConfigurationKey"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 18,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 222,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWPlayerCacheFinishedErrorKey",
          "key.parsed_declaration" : "extern NSString *__FWPlayerCacheFinishedErrorKey",
          "key.parsed_scope.end" : 222,
          "key.parsed_scope.start" : 222,
          "key.swift_declaration" : "let PlayerCacheFinishedErrorKey: String",
          "key.swift_name" : "PlayerCacheFinishedErrorKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWPlayerCacheFinishedErrorKey"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 225,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheManager",
          "key.parsed_declaration" : "@interface __FWPlayerCacheManager : NSObject\n\n+ (void)setCacheDirectory:(NSString *)cacheDirectory;\n+ (NSString *)cacheDirectory;\n\n\n\/**\n How often trigger `__FWPlayerCacheManagerDidUpdateCacheNotification` notification\n\n @param interval Minimum interval\n *\/\n+ (void)setCacheUpdateNotifyInterval:(NSTimeInterval)interval;\n+ (NSTimeInterval)cacheUpdateNotifyInterval;\n\n+ (NSString *)cachedFilePathForURL:(NSURL *)url;\n+ (__FWPlayerCacheConfiguration *)cacheConfigurationForURL:(NSURL *)url;\n\n+ (void)setFileNameRules:(NSString *(^)(NSURL *url))rules;\n\n\n\/**\n Calculate cached files size\n\n @param error If error not empty, calculate failed\n @return files size, respresent by `byte`, if error occurs, return -1\n *\/\n+ (unsigned long long)calculateCachedSizeWithError:(NSError **)error;\n+ (void)cleanAllCacheWithError:(NSError **)error;\n+ (void)cleanCacheForURL:(NSURL *)url error:(NSError **)error;\n\n\n\/**\n Useful when you upload a local file to the server\n\n @param filePath local file path\n @param url remote resource url\n @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information.\n *\/\n+ (BOOL)addCacheFile:(NSString *)filePath forURL:(NSURL *)url error:(NSError **)error;\n\n@end",
          "key.parsed_scope.end" : 265,
          "key.parsed_scope.start" : 225,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 227,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+setCacheDirectory:",
              "key.parsed_declaration" : "+ (void)setCacheDirectory:(NSString *)cacheDirectory;",
              "key.parsed_scope.end" : 227,
              "key.parsed_scope.start" : 227,
              "key.swift_declaration" : "class func setCacheDirectory(_ cacheDirectory: String)",
              "key.swift_name" : "setCacheDirectory(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)setCacheDirectory:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 15,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 228,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+cacheDirectory",
              "key.parsed_declaration" : "+ (NSString *)cacheDirectory;",
              "key.parsed_scope.end" : 228,
              "key.parsed_scope.start" : 228,
              "key.swift_declaration" : "class func cacheDirectory() -> String",
              "key.swift_name" : "cacheDirectory()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)cacheDirectory"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "How often trigger `__FWPlayerCacheManagerDidUpdateCacheNotification` notification\n\n- parameter: interval Minimum interval",
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 236,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "Minimum interval"
                    }
                  ],
                  "name" : "interval"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+setCacheUpdateNotifyInterval:",
              "key.parsed_declaration" : "+ (void)setCacheUpdateNotifyInterval:(NSTimeInterval)interval;",
              "key.parsed_scope.end" : 236,
              "key.parsed_scope.start" : 236,
              "key.swift_declaration" : "class func setCacheUpdateNotifyInterval(_ interval: TimeInterval)",
              "key.swift_name" : "setCacheUpdateNotifyInterval(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)setCacheUpdateNotifyInterval:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 19,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 237,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+cacheUpdateNotifyInterval",
              "key.parsed_declaration" : "+ (NSTimeInterval)cacheUpdateNotifyInterval;",
              "key.parsed_scope.end" : 237,
              "key.parsed_scope.start" : 237,
              "key.swift_declaration" : "class func cacheUpdateNotifyInterval() -> TimeInterval",
              "key.swift_name" : "cacheUpdateNotifyInterval()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)cacheUpdateNotifyInterval"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 15,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 239,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+cachedFilePathForURL:",
              "key.parsed_declaration" : "+ (NSString *)cachedFilePathForURL:(NSURL *)url;",
              "key.parsed_scope.end" : 239,
              "key.parsed_scope.start" : 239,
              "key.swift_declaration" : "class func cachedFilePath(for url: URL) -> String",
              "key.swift_name" : "cachedFilePath(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)cachedFilePathForURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 35,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 240,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+cacheConfigurationForURL:",
              "key.parsed_declaration" : "+ (__FWPlayerCacheConfiguration *)cacheConfigurationForURL:(NSURL *)url;",
              "key.parsed_scope.end" : 240,
              "key.parsed_scope.start" : 240,
              "key.swift_declaration" : "class func cacheConfiguration(for url: URL) -> PlayerCacheConfiguration",
              "key.swift_name" : "cacheConfiguration(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)cacheConfigurationForURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 242,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+setFileNameRules:",
              "key.parsed_declaration" : "+ (void)setFileNameRules:(NSString *(^)(NSURL *url))rules;",
              "key.parsed_scope.end" : 242,
              "key.parsed_scope.start" : 242,
              "key.swift_declaration" : "class func setFileNameRules(_ rules: @escaping (URL) -> String)",
              "key.swift_name" : "setFileNameRules(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)setFileNameRules:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 23,
              "key.doc.comment" : "Calculate cached files size\n\n- parameter: error If error not empty, calculate failed\n- returns: files size, respresent by `byte`, if error occurs, return -1",
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 251,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "If error not empty, calculate failed\n"
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "files size, respresent by `byte`, if error occurs, return -1"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+calculateCachedSizeWithError:",
              "key.parsed_declaration" : "+ (unsigned long long)calculateCachedSizeWithError:\n    (NSError *__autoreleasing _Nullable *_Nullable)error;",
              "key.parsed_scope.end" : 251,
              "key.parsed_scope.start" : 251,
              "key.swift_declaration" : "class func calculateCachedSizeWithError(_ error: NSErrorPointer) -> UInt64",
              "key.swift_name" : "calculateCachedSizeWithError(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)calculateCachedSizeWithError:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 252,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+cleanAllCacheWithError:",
              "key.parsed_declaration" : "+ (void)cleanAllCacheWithError:(NSError **)error;",
              "key.parsed_scope.end" : 252,
              "key.parsed_scope.start" : 252,
              "key.swift_declaration" : "class func cleanAllCacheWithError(_ error: NSErrorPointer)",
              "key.swift_name" : "cleanAllCacheWithError(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)cleanAllCacheWithError:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 253,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+cleanCacheForURL:error:",
              "key.parsed_declaration" : "+ (void)cleanCacheForURL:(NSURL *)url error:(NSError **)error;",
              "key.parsed_scope.end" : 253,
              "key.parsed_scope.start" : 253,
              "key.swift_declaration" : "class func cleanCache(for url: URL, error: NSErrorPointer)",
              "key.swift_name" : "cleanCache(for:error:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)cleanCacheForURL:error:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Useful when you upload a local file to the server\n\n- parameter: filePath local file path\n- parameter: url remote resource url\n- parameter: error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information.",
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 263,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "local file path\n"
                    }
                  ],
                  "name" : "filePath"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "remote resource url\n"
                    }
                  ],
                  "name" : "url"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information."
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+addCacheFile:forURL:error:",
              "key.parsed_declaration" : "+ (BOOL)addCacheFile:(nonnull NSString *)filePath\n              forURL:(nonnull NSURL *)url\n               error:(NSError *__autoreleasing _Nullable *_Nullable)error;",
              "key.parsed_scope.end" : 263,
              "key.parsed_scope.start" : 263,
              "key.swift_declaration" : "class func addCacheFile(_ filePath: String, for url: URL) throws",
              "key.swift_name" : "addCacheFile(_:for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheManager(cm)addCacheFile:forURL:error:"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheManager : NSObject",
          "key.swift_name" : "PlayerCacheManager",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheManager"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 267,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheSessionManager",
          "key.parsed_scope.end" : 267,
          "key.parsed_scope.start" : 267
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 270,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheSessionManager",
          "key.parsed_declaration" : "@interface __FWPlayerCacheSessionManager : NSObject\n\n@property (nonatomic, strong, readonly) NSOperationQueue *downloadQueue;\n\n+ (instancetype)shared;\n\n@end",
          "key.parsed_scope.end" : 276,
          "key.parsed_scope.start" : 270,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 59,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 272,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "downloadQueue",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly) NSOperationQueue *downloadQueue",
              "key.parsed_scope.end" : 272,
              "key.parsed_scope.start" : 272,
              "key.swift_declaration" : "var downloadQueue: OperationQueue { get }",
              "key.swift_name" : "downloadQueue",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheSessionManager(py)downloadQueue"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 274,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+shared",
              "key.parsed_declaration" : "+ (instancetype)shared;",
              "key.parsed_scope.end" : 274,
              "key.parsed_scope.start" : 274,
              "key.swift_declaration" : "class func shared() -> Self",
              "key.swift_name" : "shared()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheSessionManager(cm)shared"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheSessionManager : NSObject",
          "key.swift_name" : "PlayerCacheSessionManager",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheSessionManager"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 278,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "__FWPlayerCacheWorker",
          "key.parsed_scope.end" : 278,
          "key.parsed_scope.start" : 278
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
          "key.doc.line" : 281,
          "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPlayerCacheWorker",
          "key.parsed_declaration" : "@interface __FWPlayerCacheWorker : NSObject\n\n- (instancetype)initWithURL:(NSURL *)url;\n\n@property (nonatomic, strong, readonly) __FWPlayerCacheConfiguration *cacheConfiguration;\n@property (nonatomic, strong, readonly) NSError *setupError; \/\/ Create fileHandler error, can't save\/use cache\n\n- (void)cacheData:(NSData *)data forRange:(NSRange)range error:(NSError **)error;\n- (NSArray<__FWPlayerCacheAction *> *)cachedDataActionsForRange:(NSRange)range;\n- (NSData *)cachedDataForRange:(NSRange)range error:(NSError **)error;\n\n- (void)setContentInfo:(__FWPlayerCacheContentInfo *)contentInfo error:(NSError **)error;\n\n- (void)save;\n\n- (void)startWritting;\n- (void)finishWritting;\n\n@end",
          "key.parsed_scope.end" : 299,
          "key.parsed_scope.start" : 281,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 283,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithURL:",
              "key.parsed_declaration" : "- (instancetype)initWithURL:(NSURL *)url;",
              "key.parsed_scope.end" : 283,
              "key.parsed_scope.start" : 283,
              "key.swift_declaration" : "init(url: URL)",
              "key.swift_name" : "init(url:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(im)initWithURL:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 71,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 285,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "cacheConfiguration",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly) __FWPlayerCacheConfiguration *cacheConfiguration",
              "key.parsed_scope.end" : 285,
              "key.parsed_scope.start" : 285,
              "key.swift_declaration" : "var cacheConfiguration: PlayerCacheConfiguration { get }",
              "key.swift_name" : "cacheConfiguration",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(py)cacheConfiguration"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 50,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 286,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "setupError",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly) NSError *setupError",
              "key.parsed_scope.end" : 286,
              "key.parsed_scope.start" : 286,
              "key.swift_declaration" : "var setupError: Error { get }",
              "key.swift_name" : "setupError",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(py)setupError"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 288,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-cacheData:forRange:error:",
              "key.parsed_declaration" : "- (void)cacheData:(NSData *)data forRange:(NSRange)range error:(NSError **)error;",
              "key.parsed_scope.end" : 288,
              "key.parsed_scope.start" : 288,
              "key.swift_declaration" : "func cacheData(_ data: Data, for range: NSRange, error: NSErrorPointer)",
              "key.swift_name" : "cacheData(_:for:error:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(im)cacheData:forRange:error:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 39,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 289,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-cachedDataActionsForRange:",
              "key.parsed_declaration" : "- (NSArray<__FWPlayerCacheAction *> *)cachedDataActionsForRange:(NSRange)range;",
              "key.parsed_scope.end" : 289,
              "key.parsed_scope.start" : 289,
              "key.swift_declaration" : "func cachedDataActions(for range: NSRange) -> [PlayerCacheAction]",
              "key.swift_name" : "cachedDataActions(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(im)cachedDataActionsForRange:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 13,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 290,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-cachedDataForRange:error:",
              "key.parsed_declaration" : "- (NSData *)cachedDataForRange:(NSRange)range error:(NSError **)error;",
              "key.parsed_scope.end" : 290,
              "key.parsed_scope.start" : 290,
              "key.swift_declaration" : "func cachedData(for range: NSRange, error: NSErrorPointer) -> Data",
              "key.swift_name" : "cachedData(for:error:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(im)cachedDataForRange:error:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 292,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setContentInfo:error:",
              "key.parsed_declaration" : "- (void)setContentInfo:(__FWPlayerCacheContentInfo *)contentInfo error:(NSError **)error;",
              "key.parsed_scope.end" : 292,
              "key.parsed_scope.start" : 292,
              "key.swift_declaration" : "func setContentInfo(_ contentInfo: PlayerCacheContentInfo, error: NSErrorPointer)",
              "key.swift_name" : "setContentInfo(_:error:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(im)setContentInfo:error:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 294,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-save",
              "key.parsed_declaration" : "- (void)save;",
              "key.parsed_scope.end" : 294,
              "key.parsed_scope.start" : 294,
              "key.swift_declaration" : "func save()",
              "key.swift_name" : "save()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(im)save"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 296,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-startWritting",
              "key.parsed_declaration" : "- (void)startWritting;",
              "key.parsed_scope.end" : 296,
              "key.parsed_scope.start" : 296,
              "key.swift_declaration" : "func startWritting()",
              "key.swift_name" : "startWritting()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(im)startWritting"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.file" : "docs\/FWFramework\/PlayerCache.h",
              "key.doc.line" : 297,
              "key.filepath" : "docs\/FWFramework\/PlayerCache.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-finishWritting",
              "key.parsed_declaration" : "- (void)finishWritting;",
              "key.parsed_scope.end" : 297,
              "key.parsed_scope.start" : 297,
              "key.swift_declaration" : "func finishWritting()",
              "key.swift_name" : "finishWritting()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPlayerCacheWorker(im)finishWritting"
            }
          ],
          "key.swift_declaration" : "class PlayerCacheWorker : NSObject",
          "key.swift_name" : "PlayerCacheWorker",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPlayerCacheWorker"
        }
      ]
    }
  },
  {
    "docs\/FWFramework\/SecurityPolicy.h" : {
      "key.diagnostic_stage" : "",
      "key.substructure" : [
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 29,
          "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
          "key.doc.line" : 25,
          "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.typedef",
          "key.name" : "__FWSSLPinningMode",
          "key.parsed_declaration" : "typedef NS_ENUM(NSUInteger, __FWSSLPinningMode",
          "key.parsed_scope.end" : 25,
          "key.parsed_scope.start" : 25,
          "key.unavailable_message" : "",
          "key.usr" : "c:SecurityPolicy.h@T@__FWSSLPinningMode"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 29,
          "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
          "key.doc.line" : 25,
          "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.enum",
          "key.name" : "__FWSSLPinningMode",
          "key.parsed_declaration" : "NS_ENUM(NSUInteger, __FWSSLPinningMode) {\n    __FWSSLPinningModeNone,\n    __FWSSLPinningModePublicKey,\n    __FWSSLPinningModeCertificate,\n}",
          "key.parsed_scope.end" : 29,
          "key.parsed_scope.start" : 25,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 5,
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.line" : 26,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.name" : "__FWSSLPinningModeNone",
              "key.parsed_declaration" : "__FWSSLPinningModeNone",
              "key.parsed_scope.end" : 26,
              "key.parsed_scope.start" : 26,
              "key.swift_declaration" : "case none = 0",
              "key.swift_name" : "none",
              "key.unavailable_message" : "",
              "key.usr" : "c:@E@__FWSSLPinningMode@__FWSSLPinningModeNone"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 5,
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.line" : 27,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.name" : "__FWSSLPinningModePublicKey",
              "key.parsed_declaration" : "__FWSSLPinningModePublicKey",
              "key.parsed_scope.end" : 27,
              "key.parsed_scope.start" : 27,
              "key.swift_declaration" : "case publicKey = 1",
              "key.swift_name" : "publicKey",
              "key.unavailable_message" : "",
              "key.usr" : "c:@E@__FWSSLPinningMode@__FWSSLPinningModePublicKey"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 5,
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.line" : 28,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.name" : "__FWSSLPinningModeCertificate",
              "key.parsed_declaration" : "__FWSSLPinningModeCertificate",
              "key.parsed_scope.end" : 28,
              "key.parsed_scope.start" : 28,
              "key.swift_declaration" : "case certificate = 2",
              "key.swift_name" : "certificate",
              "key.unavailable_message" : "",
              "key.usr" : "c:@E@__FWSSLPinningMode@__FWSSLPinningModeCertificate"
            }
          ],
          "key.swift_declaration" : "enum SSLPinningMode : UInt, @unchecked Sendable",
          "key.swift_name" : "SSLPinningMode",
          "key.unavailable_message" : "",
          "key.usr" : "c:@E@__FWSSLPinningMode"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`__FWSecurityPolicy` evaluates server trust against pinned X.509 certificates and public keys over secure connections.\n\nAdding pinned SSL certificates to your app helps prevent man-in-the-middle attacks and other vulnerabilities. Applications dealing with sensitive customer data or financial information are strongly encouraged to route all communication over an HTTPS connection with SSL pinning configured and enabled.",
          "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 40,
          "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWSecurityPolicy",
          "key.parsed_declaration" : "\n@interface __FWSecurityPolicy : NSObject <NSSecureCoding, NSCopying>",
          "key.parsed_scope.end" : 135,
          "key.parsed_scope.start" : 40,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 60,
              "key.doc.comment" : "The criteria by which server trust should be evaluated against the pinned SSL certificates. Defaults to `__FWSSLPinningModeNone`.",
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 45,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "SSLPinningMode",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readonly)\n    __FWSSLPinningMode SSLPinningMode;",
              "key.parsed_scope.end" : 45,
              "key.parsed_scope.start" : 45,
              "key.swift_declaration" : "var sslPinningMode: SSLPinningMode { get }",
              "key.swift_name" : "sslPinningMode",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWSecurityPolicy(py)SSLPinningMode"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 59,
              "key.doc.comment" : "The certificates used to evaluate server trust according to the SSL pinning mode. \n\nNote that if pinning is enabled, `evaluateServerTrust:forDomain:` will return true if any pinned certificate matches.\n\n- see: policyWithPinningMode:withPinnedCertificates:",
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 54,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "pinnedCertificates",
              "key.parsed_declaration" : "@property (nonatomic, strong, readwrite, nullable)\n    NSSet<NSData *> *pinnedCertificates;",
              "key.parsed_scope.end" : 54,
              "key.parsed_scope.start" : 54,
              "key.swift_declaration" : "var pinnedCertificates: Set<Data>? { get set }",
              "key.swift_name" : "pinnedCertificates",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWSecurityPolicy(py)pinnedCertificates"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Whether or not to trust servers with an invalid or expired SSL certificates. Defaults to `NO`.",
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 59,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "allowInvalidCertificates",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    BOOL allowInvalidCertificates;",
              "key.parsed_scope.end" : 59,
              "key.parsed_scope.start" : 59,
              "key.swift_declaration" : "var allowInvalidCertificates: Bool { get set }",
              "key.swift_name" : "allowInvalidCertificates",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWSecurityPolicy(py)allowInvalidCertificates"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Whether or not to validate the domain name in the certificate's CN field. Defaults to `YES`.",
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 64,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "validatesDomainName",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    BOOL validatesDomainName;",
              "key.parsed_scope.end" : 64,
              "key.parsed_scope.start" : 64,
              "key.swift_declaration" : "var validatesDomainName: Bool { get set }",
              "key.swift_name" : "validatesDomainName",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWSecurityPolicy(py)validatesDomainName"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.line" : 67,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Getting Certificates from the Bundle",
              "key.parsed_scope.end" : 67,
              "key.parsed_scope.start" : 67
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 23,
              "key.doc.comment" : "Returns any certificates included in the bundle. If you are using AFNetworking as an embedded framework, you must use this method to find the certificates you have included in your app bundle, and use them when creating your security policy by calling `policyWithPinningMode:withPinnedCertificates`.\n\n- returns: The certificates included in the given bundle.",
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 75,
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "The certificates included in the given bundle."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+certificatesInBundle:",
              "key.parsed_declaration" : "+ (nonnull NSSet<NSData *> *)certificatesInBundle:(nonnull NSBundle *)bundle;",
              "key.parsed_scope.end" : 75,
              "key.parsed_scope.start" : 75,
              "key.swift_declaration" : "class func certificates(in bundle: Bundle) -> Set<Data>",
              "key.swift_name" : "certificates(in:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWSecurityPolicy(cm)certificatesInBundle:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.line" : 78,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Getting Specific Security Policies",
              "key.parsed_scope.end" : 78,
              "key.parsed_scope.start" : 78
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Returns the shared default security policy, which does not allow invalid certificates, validates domain name, and does not validate against pinned certificates or public keys.\n\n- returns: The default security policy.",
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 86,
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "The default security policy."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+defaultPolicy",
              "key.parsed_declaration" : "+ (nonnull instancetype)defaultPolicy;",
              "key.parsed_scope.end" : 86,
              "key.parsed_scope.start" : 86,
              "key.swift_declaration" : "class func `default`() -> Self",
              "key.swift_name" : "default()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWSecurityPolicy(cm)defaultPolicy"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.line" : 89,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Initialization",
              "key.parsed_scope.end" : 89,
              "key.parsed_scope.start" : 89
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a security policy with the specified pinning mode.\n\nCertificates with the `.cer` extension found in the main bundle will be pinned. If you want more control over which certificates are pinned, please use `policyWithPinningMode:withPinnedCertificates:` instead.\n\n- parameter: pinningMode The SSL pinning mode.\n\n- returns: A new security policy.\n\n- see: -policyWithPinningMode:withPinnedCertificates:",
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 103,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The SSL pinning mode."
                    }
                  ],
                  "name" : "pinningMode"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "A new security policy."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+policyWithPinningMode:",
              "key.parsed_declaration" : "+ (nonnull instancetype)policyWithPinningMode:(__FWSSLPinningMode)pinningMode;",
              "key.parsed_scope.end" : 103,
              "key.parsed_scope.start" : 103,
              "key.swift_declaration" : "convenience init(pinningMode: SSLPinningMode)",
              "key.swift_name" : "init(pinningMode:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWSecurityPolicy(cm)policyWithPinningMode:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a security policy with the specified pinning mode.\n\n- parameter: pinningMode The SSL pinning mode.\n- parameter: pinnedCertificates The certificates to pin against.\n\n- returns: A new security policy.\n\n- see: +certificatesInBundle:\n- see: -pinnedCertificates",
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 116,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The SSL pinning mode.\n"
                    }
                  ],
                  "name" : "pinningMode"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The certificates to pin against."
                    }
                  ],
                  "name" : "pinnedCertificates"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "A new security policy."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+policyWithPinningMode:withPinnedCertificates:",
              "key.parsed_declaration" : "+ (nonnull instancetype)policyWithPinningMode:(__FWSSLPinningMode)pinningMode\n                       withPinnedCertificates:\n                           (nonnull NSSet<NSData *> *)pinnedCertificates;",
              "key.parsed_scope.end" : 116,
              "key.parsed_scope.start" : 116,
              "key.swift_declaration" : "convenience init(pinningMode: SSLPinningMode, withPinnedCertificates pinnedCertificates: Set<Data>)",
              "key.swift_name" : "init(pinningMode:withPinnedCertificates:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWSecurityPolicy(cm)policyWithPinningMode:withPinnedCertificates:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.line" : 119,
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Evaluating Server Trust",
              "key.parsed_scope.end" : 119,
              "key.parsed_scope.start" : 119
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Whether or not the specified server trust should be accepted, based on the security policy.\n\nThis method should be used when responding to an authentication challenge from a server.\n\n- parameter: serverTrust The X.509 certificate trust of the server.\n- parameter: domain The domain of serverTrust. If `nil`, the domain will not be validated.\n\n- returns: Whether or not to trust the server.",
              "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 132,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The X.509 certificate trust of the server.\n"
                    }
                  ],
                  "name" : "serverTrust"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The domain of serverTrust. If `nil`, the domain will not be validated."
                    }
                  ],
                  "name" : "domain"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "Whether or not to trust the server."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-evaluateServerTrust:forDomain:",
              "key.parsed_declaration" : "- (BOOL)evaluateServerTrust:(nonnull SecTrustRef)serverTrust\n                  forDomain:(nullable NSString *)domain;",
              "key.parsed_scope.end" : 133,
              "key.parsed_scope.start" : 132,
              "key.swift_declaration" : "func evaluateServerTrust(_ serverTrust: SecTrust, forDomain domain: String?) -> Bool",
              "key.swift_name" : "evaluateServerTrust(_:forDomain:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWSecurityPolicy(im)evaluateServerTrust:forDomain:"
            }
          ],
          "key.swift_declaration" : "class SecurityPolicy : NSObject, NSSecureCoding, NSCopying",
          "key.swift_name" : "SecurityPolicy",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWSecurityPolicy"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/SecurityPolicy.h",
          "key.doc.line" : 140,
          "key.filepath" : "docs\/FWFramework\/SecurityPolicy.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "Constants",
          "key.parsed_scope.end" : 140,
          "key.parsed_scope.start" : 140
        }
      ]
    }
  },
  {
    "docs\/FWFramework\/URLRequestSerialization.h" : {
      "key.diagnostic_stage" : "",
      "key.substructure" : [
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 30,
          "key.doc.comment" : "Returns a percent-escaped string following RFC 3986 for a query string key or value.\nRFC 3986 states that the following characters are \"reserved\" characters.\n- General Delimiters: \":\", \"#\", \"[\", \"]\", \"@\", \"?\", \"\/\"\n- Sub-Delimiters: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n\nIn RFC 3986 - Section 3.4, it states that the \"?\" and \"\/\" characters should not be escaped to allow\nquery strings to include a URL. Therefore, all \"reserved\" characters with the exception of \"?\" and \"\/\"\nshould be percent-escaped in the query string.\n\n- parameter: string The string to be percent-escaped.\n\n- returns: The percent-escaped string.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 42,
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "kind" : "",
                  "Para" : "The string to be percent-escaped."
                }
              ],
              "name" : "string"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "kind" : "",
              "Para" : "The percent-escaped string."
            }
          ],
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.function",
          "key.name" : "__FWPercentEscapedStringFromString",
          "key.parsed_declaration" : "extern NSString *_Nonnull __FWPercentEscapedStringFromString(\n    NSString *_Nonnull string)",
          "key.parsed_scope.end" : 42,
          "key.parsed_scope.start" : 42,
          "key.swift_declaration" : "func PercentEscapedStringFromString(_ string: String) -> String",
          "key.swift_name" : "PercentEscapedStringFromString(_:)",
          "key.unavailable_message" : "",
          "key.usr" : "c:@F@__FWPercentEscapedStringFromString"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 30,
          "key.doc.comment" : "A helper method to generate encoded url query parameters for appending to the end of a URL.\n\n- parameter: parameters A dictionary of key\/values to be encoded.\n\n- returns: A url encoded query string",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 51,
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "kind" : "",
                  "Para" : "A dictionary of key\/values to be encoded."
                }
              ],
              "name" : "parameters"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "kind" : "",
              "Para" : "A url encoded query string"
            }
          ],
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.function",
          "key.name" : "__FWQueryStringFromParameters",
          "key.parsed_declaration" : "extern NSString *_Nonnull __FWQueryStringFromParameters(\n    NSDictionary *_Nonnull parameters)",
          "key.parsed_scope.end" : 51,
          "key.parsed_scope.start" : 51,
          "key.swift_declaration" : "func QueryStringFromParameters(_ parameters: [AnyHashable : Any]) -> String",
          "key.swift_name" : "QueryStringFromParameters(_:)",
          "key.unavailable_message" : "",
          "key.usr" : "c:@F@__FWQueryStringFromParameters"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 11,
          "key.doc.comment" : "The `__FWURLRequestSerialization` protocol is adopted by an object that encodes parameters for a specified HTTP requests. Request serializers may encode parameters as query strings, HTTP bodies, setting the appropriate HTTP header fields as necessary.\n\nFor example, a JSON request serializer may set the HTTP body of the request to a JSON representation, and set the `Content-Type` HTTP header field value to `application\/json`.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 59,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.protocol",
          "key.name" : "__FWURLRequestSerialization",
          "key.parsed_declaration" : "@protocol __FWURLRequestSerialization <NSObject, NSSecureCoding, NSCopying>",
          "key.parsed_scope.end" : 74,
          "key.parsed_scope.start" : 59,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 28,
              "key.doc.comment" : "Returns a request with the specified parameters encoded into a copy of the original request.\n\n- parameter: request The original request.\n- parameter: parameters The parameters to be encoded.\n- parameter: error The error that occurred while attempting to encode the request parameters.\n\n- returns: A serialized request.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 70,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The original request.\n"
                    }
                  ],
                  "name" : "request"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The error that occurred while attempting to encode the request parameters."
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "A serialized request."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-requestBySerializingRequest:withParameters:error:",
              "key.parsed_declaration" : "- (nullable NSURLRequest *)\n    requestBySerializingRequest:(nonnull NSURLRequest *)request\n                 withParameters:(nullable id)parameters\n                          error:(NSError *_Nullable __autoreleasing *_Nullable)\n                                    error;",
              "key.parsed_scope.end" : 72,
              "key.parsed_scope.start" : 70,
              "key.swift_declaration" : "func request(bySerializingRequest request: URLRequest, withParameters parameters: Any?, error: NSErrorPointer) -> URLRequest?",
              "key.swift_name" : "request(bySerializingRequest:withParameters:error:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWURLRequestSerialization(im)requestBySerializingRequest:withParameters:error:"
            }
          ],
          "key.swift_declaration" : "protocol URLRequestSerialization : NSCopying, NSSecureCoding, NSObjectProtocol",
          "key.swift_name" : "URLRequestSerialization",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(pl)__FWURLRequestSerialization"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.line" : 76,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 76,
          "key.parsed_scope.start" : 76
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 29,
          "key.doc.comment" : "",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 81,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.typedef",
          "key.name" : "__FWHTTPRequestQueryStringSerializationStyle",
          "key.parsed_declaration" : "typedef enum __FWHTTPRequestQueryStringSerializationStyle\n    __FWHTTPRequestQueryStringSerializationStyle",
          "key.parsed_scope.end" : 81,
          "key.parsed_scope.start" : 81,
          "key.unavailable_message" : "",
          "key.usr" : "c:URLRequestSerialization.h@T@__FWHTTPRequestQueryStringSerializationStyle"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 29,
          "key.doc.comment" : "",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 81,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.enum",
          "key.name" : "__FWHTTPRequestQueryStringSerializationStyle",
          "key.parsed_declaration" : "enum __FWHTTPRequestQueryStringSerializationStyle : NSUInteger {}",
          "key.parsed_scope.end" : 83,
          "key.parsed_scope.start" : 81,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 5,
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.line" : 82,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.name" : "__FWHTTPRequestQueryStringDefaultStyle",
              "key.parsed_declaration" : "__FWHTTPRequestQueryStringDefaultStyle = 0",
              "key.parsed_scope.end" : 82,
              "key.parsed_scope.start" : 82,
              "key.swift_declaration" : "case defaultStyle = 0",
              "key.swift_name" : "defaultStyle",
              "key.unavailable_message" : "",
              "key.usr" : "c:@E@__FWHTTPRequestQueryStringSerializationStyle@__FWHTTPRequestQueryStringDefaultStyle"
            }
          ],
          "key.swift_declaration" : "enum HTTPRequestQueryStringSerializationStyle : UInt, @unchecked Sendable",
          "key.swift_name" : "HTTPRequestQueryStringSerializationStyle",
          "key.unavailable_message" : "",
          "key.usr" : "c:@E@__FWHTTPRequestQueryStringSerializationStyle"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`__FWHTTPRequestSerializer` conforms to the `__FWURLRequestSerialization` & `__FWURLResponseSerialization` protocols, offering a concrete base implementation of query string \/ URL form-encoded parameter serialization and default request headers, as well as response status code and content type validation.\n\nAny request or response serializer dealing with HTTP is encouraged to subclass `__FWHTTPRequestSerializer` in order to ensure consistent default behavior.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 93,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWHTTPRequestSerializer",
          "key.parsed_declaration" : "\n@interface __FWHTTPRequestSerializer : NSObject <__FWURLRequestSerialization>",
          "key.parsed_scope.end" : 273,
          "key.parsed_scope.start" : 93,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 48,
              "key.doc.comment" : "The string encoding used to serialize parameters. `NSUTF8StringEncoding` by default.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 98,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "stringEncoding",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSStringEncoding stringEncoding;",
              "key.parsed_scope.end" : 98,
              "key.parsed_scope.start" : 98,
              "key.swift_declaration" : "var stringEncoding: UInt { get set }",
              "key.swift_name" : "stringEncoding",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(py)stringEncoding"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Whether created requests can use the device’s cellular radio (if present). `YES` by default.\n\n- see: NSMutableURLRequest -setAllowsCellularAccess:",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 105,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "allowsCellularAccess",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    BOOL allowsCellularAccess;",
              "key.parsed_scope.end" : 105,
              "key.parsed_scope.start" : 105,
              "key.swift_declaration" : "var allowsCellularAccess: Bool { get set }",
              "key.swift_name" : "allowsCellularAccess",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(py)allowsCellularAccess"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 55,
              "key.doc.comment" : "The cache policy of created requests. `NSURLRequestUseProtocolCachePolicy` by default.\n\n- see: NSMutableURLRequest -setCachePolicy:",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 112,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "cachePolicy",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSURLRequestCachePolicy cachePolicy;",
              "key.parsed_scope.end" : 112,
              "key.parsed_scope.start" : 112,
              "key.swift_declaration" : "var cachePolicy: NSURLRequest.CachePolicy { get set }",
              "key.swift_name" : "cachePolicy",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(py)cachePolicy"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Whether created requests should use the default cookie handling. `YES` by default.\n\n- see: NSMutableURLRequest -setHTTPShouldHandleCookies:",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 119,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "HTTPShouldHandleCookies",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    BOOL HTTPShouldHandleCookies;",
              "key.parsed_scope.end" : 119,
              "key.parsed_scope.start" : 119,
              "key.swift_declaration" : "var httpShouldHandleCookies: Bool { get set }",
              "key.swift_name" : "httpShouldHandleCookies",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(py)HTTPShouldHandleCookies"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Whether created requests can continue transmitting data before receiving a response from an earlier transmission. `NO` by default\n\n- see: NSMutableURLRequest -setHTTPShouldUsePipelining:",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 126,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "HTTPShouldUsePipelining",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    BOOL HTTPShouldUsePipelining;",
              "key.parsed_scope.end" : 126,
              "key.parsed_scope.start" : 126,
              "key.swift_declaration" : "var httpShouldUsePipelining: Bool { get set }",
              "key.swift_name" : "httpShouldUsePipelining",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(py)HTTPShouldUsePipelining"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 62,
              "key.doc.comment" : "The network service type for created requests. `NSURLNetworkServiceTypeDefault` by default.\n\n- see: NSMutableURLRequest -setNetworkServiceType:",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 133,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "networkServiceType",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSURLRequestNetworkServiceType networkServiceType;",
              "key.parsed_scope.end" : 133,
              "key.parsed_scope.start" : 133,
              "key.swift_declaration" : "var networkServiceType: NSURLRequest.NetworkServiceType { get set }",
              "key.swift_name" : "networkServiceType",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(py)networkServiceType"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 46,
              "key.doc.comment" : "The timeout interval, in seconds, for created requests. The default timeout interval is 60 seconds.\n\n- see: NSMutableURLRequest -setTimeoutInterval:",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 140,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "timeoutInterval",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSTimeInterval timeoutInterval;",
              "key.parsed_scope.end" : 140,
              "key.parsed_scope.start" : 140,
              "key.swift_declaration" : "var timeoutInterval: TimeInterval { get set }",
              "key.swift_name" : "timeoutInterval",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(py)timeoutInterval"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.line" : 143,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Configuring HTTP Request Headers",
              "key.parsed_scope.end" : 143,
              "key.parsed_scope.start" : 143
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 80,
              "key.doc.comment" : "Default HTTP header field values to be applied to serialized requests. By default, these include the following:\n\n- `Accept-Language` with the contents of `NSLocale +preferredLanguages`\n- `User-Agent` with the contents of various bundle identifiers and OS designations\n\n- note: To add or remove default request headers, use `setValue:forHTTPHeaderField:`.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 154,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "HTTPRequestHeaders",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly)\n    NSDictionary<NSString *, NSString *> *_Nonnull HTTPRequestHeaders;",
              "key.parsed_scope.end" : 154,
              "key.parsed_scope.start" : 154,
              "key.swift_declaration" : "var httpRequestHeaders: [String : String] { get }",
              "key.swift_name" : "httpRequestHeaders",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(py)HTTPRequestHeaders"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a serializer with default configuration.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 159,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+serializer",
              "key.parsed_declaration" : "+ (nonnull instancetype)serializer;",
              "key.parsed_scope.end" : 159,
              "key.parsed_scope.start" : 159,
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(cm)serializer"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets the value for the HTTP headers set in request objects made by the HTTP client. If `nil`, removes the existing value for that header.\n\n- parameter: field The HTTP header to set a default value for\n- parameter: value The value set as default for the specified header, or `nil`",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 167,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP header to set a default value for\n"
                    }
                  ],
                  "name" : "field"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The value set as default for the specified header, or `nil`"
                    }
                  ],
                  "name" : "value"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setValue:forHTTPHeaderField:",
              "key.parsed_declaration" : "- (void)setValue:(nullable NSString *)value\n    forHTTPHeaderField:(nonnull NSString *)field;",
              "key.parsed_scope.end" : 168,
              "key.parsed_scope.start" : 167,
              "key.swift_declaration" : "func setValue(_ value: String?, forHTTPHeaderField field: String)",
              "key.swift_name" : "setValue(_:forHTTPHeaderField:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(im)setValue:forHTTPHeaderField:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 24,
              "key.doc.comment" : "Returns the value for the HTTP headers set in the request serializer.\n\n- parameter: field The HTTP header to retrieve the default value for\n\n- returns: The value set as default for the specified header, or `nil`",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 177,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP header to retrieve the default value for"
                    }
                  ],
                  "name" : "field"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "The value set as default for the specified header, or `nil`"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-valueForHTTPHeaderField:",
              "key.parsed_declaration" : "- (nullable NSString *)valueForHTTPHeaderField:(nonnull NSString *)field;",
              "key.parsed_scope.end" : 177,
              "key.parsed_scope.start" : 177,
              "key.swift_declaration" : "func value(forHTTPHeaderField field: String) -> String?",
              "key.swift_name" : "value(forHTTPHeaderField:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(im)valueForHTTPHeaderField:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets the \"Authorization\" HTTP header set in request objects made by the HTTP client to a basic authentication value with Base64-encoded username and password. This overwrites any existing value for this header.\n\n- parameter: username The HTTP basic auth username\n- parameter: password The HTTP basic auth password",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 185,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP basic auth username\n"
                    }
                  ],
                  "name" : "username"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP basic auth password"
                    }
                  ],
                  "name" : "password"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setAuthorizationHeaderFieldWithUsername:password:",
              "key.parsed_declaration" : "- (void)setAuthorizationHeaderFieldWithUsername:(nonnull NSString *)username\n                                       password:(nonnull NSString *)password;",
              "key.parsed_scope.end" : 186,
              "key.parsed_scope.start" : 185,
              "key.swift_declaration" : "func setAuthorizationHeaderFieldWithUsername(_ username: String, password: String)",
              "key.swift_name" : "setAuthorizationHeaderFieldWithUsername(_:password:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(im)setAuthorizationHeaderFieldWithUsername:password:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Clears any existing value for the \"Authorization\" HTTP header.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 191,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-clearAuthorizationHeader",
              "key.parsed_declaration" : "- (void)clearAuthorizationHeader;",
              "key.parsed_scope.end" : 191,
              "key.parsed_scope.start" : 191,
              "key.swift_declaration" : "func clearAuthorizationHeader()",
              "key.swift_name" : "clearAuthorizationHeader()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(im)clearAuthorizationHeader"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.line" : 194,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Configuring Query String Parameter Serialization",
              "key.parsed_scope.end" : 194,
              "key.parsed_scope.start" : 194
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 51,
              "key.doc.comment" : "HTTP methods for which serialized requests will encode parameters as a query string. `GET`, `HEAD`, and `DELETE` by default.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 200,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "HTTPMethodsEncodingParametersInURI",
              "key.parsed_declaration" : "@property (nonatomic, strong, readwrite)\n    NSSet<NSString *> *_Nonnull HTTPMethodsEncodingParametersInURI;",
              "key.parsed_scope.end" : 200,
              "key.parsed_scope.start" : 200,
              "key.swift_declaration" : "var httpMethodsEncodingParametersInURI: Set<String> { get set }",
              "key.swift_name" : "httpMethodsEncodingParametersInURI",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(py)HTTPMethodsEncodingParametersInURI"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Set the method of query string serialization according to one of the pre-defined styles.\n\n- parameter: style The serialization style.\n\n- see: __FWHTTPRequestQueryStringSerializationStyle",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 209,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The serialization style."
                    }
                  ],
                  "name" : "style"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setQueryStringSerializationWithStyle:",
              "key.parsed_declaration" : "- (void)setQueryStringSerializationWithStyle:\n    (__FWHTTPRequestQueryStringSerializationStyle)style;",
              "key.parsed_scope.end" : 209,
              "key.parsed_scope.start" : 209,
              "key.swift_declaration" : "func setQueryStringSerializationWith(_ style: HTTPRequestQueryStringSerializationStyle)",
              "key.swift_name" : "setQueryStringSerializationWith(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(im)setQueryStringSerializationWithStyle:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Set the a custom method of query string serialization according to the specified block.\n\n- parameter: block A block that defines a process of encoding parameters into a query string. This block returns the query string and takes three arguments: the request, the parameters to encode, and the error that occurred when attempting to encode parameters for the given request.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 216,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block that defines a process of encoding parameters into a query string. This block returns the query string and takes three arguments: the request, the parameters to encode, and the error that occurred when attempting to encode parameters for the given request."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setQueryStringSerializationWithBlock:",
              "key.parsed_declaration" : "- (void)setQueryStringSerializationWithBlock:\n    (nullable NSString *_Nullable (^)(\n        NSURLRequest *_Nonnull __strong, id _Nonnull __strong,\n        NSError *__autoreleasing _Nullable *_Nullable))block;",
              "key.parsed_scope.end" : 216,
              "key.parsed_scope.start" : 216,
              "key.swift_declaration" : "func setQueryStringSerializationWith(_ block: ((URLRequest, Any, NSErrorPointer) -> String?)?)",
              "key.swift_name" : "setQueryStringSerializationWith(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(im)setQueryStringSerializationWithBlock:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.line" : 219,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Creating Request Objects",
              "key.parsed_scope.end" : 219,
              "key.parsed_scope.start" : 219
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 35,
              "key.doc.comment" : "Creates an `NSMutableURLRequest` object with the specified HTTP method and URL string.\n\nIf the HTTP method is `GET`, `HEAD`, or `DELETE`, the parameters will be used to construct a url-encoded query string that is appended to the request's URL. Otherwise, the parameters will be encoded according to the value of the `parameterEncoding` property, and set as the request body.\n\n- parameter: method The HTTP method for the request, such as `GET`, `POST`, `PUT`, or `DELETE`. This parameter must not be `nil`.\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be either set as a query string for `GET` requests, or the request HTTP body.\n- parameter: error The error that occurred while constructing the request.\n\n- returns: An `NSMutableURLRequest` object.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 234,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP method for the request, such as `GET`, `POST`, `PUT`, or `DELETE`. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "method"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be either set as a query string for `GET` requests, or the request HTTP body.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The error that occurred while constructing the request."
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "An `NSMutableURLRequest` object."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-requestWithMethod:URLString:parameters:error:",
              "key.parsed_declaration" : "- (nullable NSMutableURLRequest *)\n    requestWithMethod:(nonnull NSString *)method\n            URLString:(nonnull NSString *)URLString\n           parameters:(nullable id)parameters\n                error:(NSError *_Nullable __autoreleasing *_Nullable)error;",
              "key.parsed_scope.end" : 237,
              "key.parsed_scope.start" : 234,
              "key.swift_declaration" : "func request(withMethod method: String, urlString URLString: String, parameters: Any?) throws -> NSMutableURLRequest",
              "key.swift_name" : "request(withMethod:urlString:parameters:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(im)requestWithMethod:URLString:parameters:error:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 26,
              "key.doc.comment" : "Creates an `NSMutableURLRequest` object with the specified HTTP method and URLString, and constructs a `multipart\/form-data` HTTP body, using the specified parameters and multipart form data block. See http:\/\/www.w3.org\/TR\/html4\/interact\/forms.html#h-17.13.4.2\n\nMultipart form requests are automatically streamed, reading files directly from disk along with in-memory data in a single HTTP body. The resulting `NSMutableURLRequest` object has an `HTTPBodyStream` property, so refrain from setting `HTTPBodyStream` or `HTTPBody` on this request object, as it will clear out the multipart form body stream.\n\n- parameter: method The HTTP method for the request. This parameter must not be `GET` or `HEAD`, or `nil`.\n- parameter: URLString The URL string used to create the request URL.\n- parameter: parameters The parameters to be encoded and set in the request HTTP body.\n- parameter: block A block that takes a single argument and appends data to the HTTP body. The block argument is an object adopting the `__FWMultipartFormData` protocol.\n- parameter: error The error that occurred while constructing the request.\n\n- returns: An `NSMutableURLRequest` object",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 252,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP method for the request. This parameter must not be `GET` or `HEAD`, or `nil`.\n"
                    }
                  ],
                  "name" : "method"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL string used to create the request URL.\n"
                    }
                  ],
                  "name" : "URLString"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The parameters to be encoded and set in the request HTTP body.\n"
                    }
                  ],
                  "name" : "parameters"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block that takes a single argument and appends data to the HTTP body. The block argument is an object adopting the `__FWMultipartFormData` protocol.\n"
                    }
                  ],
                  "name" : "block"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The error that occurred while constructing the request."
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "An `NSMutableURLRequest` object"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-multipartFormRequestWithMethod:URLString:parameters:constructingBodyWithBlock:error:",
              "key.parsed_declaration" : "- (nonnull NSMutableURLRequest *)\n    multipartFormRequestWithMethod:(nonnull NSString *)method\n                         URLString:(nonnull NSString *)URLString\n                        parameters:\n                            (nullable NSDictionary<NSString *, id> *)parameters\n         constructingBodyWithBlock:\n             (nullable void (^)(id<__FWMultipartFormData> _Nonnull __strong))\n                 block\n                             error:\n                                 (NSError *_Nullable __autoreleasing *_Nullable)\n                                     error;",
              "key.parsed_scope.end" : 256,
              "key.parsed_scope.start" : 252,
              "key.swift_declaration" : "func multipartFormRequest(withMethod method: String, urlString URLString: String, parameters: [String : Any]?, constructingBodyWith block: ((MultipartFormData) -> Void)?, error: NSErrorPointer) -> NSMutableURLRequest",
              "key.swift_name" : "multipartFormRequest(withMethod:urlString:parameters:constructingBodyWith:error:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(im)multipartFormRequestWithMethod:URLString:parameters:constructingBodyWithBlock:error:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 26,
              "key.doc.comment" : "Creates an `NSMutableURLRequest` by removing the `HTTPBodyStream` from a request, and asynchronously writing its contents into the specified file, invoking the completion handler when finished.\n\n- parameter: request The multipart form request. The `HTTPBodyStream` property of `request` must not be `nil`.\n- parameter: fileURL The file URL to write multipart form contents to.\n- parameter: handler A handler block to execute.\n\n- note: There is a bug in `NSURLSessionTask` that causes requests to not send a `Content-Length` header when streaming contents from an HTTP body, which is notably problematic when interacting with the Amazon S3 webservice. As a workaround, this method takes a request constructed with `multipartFormRequestWithMethod:URLString:parameters:constructingBodyWithBlock:error:`, or any other request with an `HTTPBodyStream`, writes the contents to the specified file and returns a copy of the original request with the `HTTPBodyStream` property set to `nil`. From here, the file can either be passed to `__FWURLSessionManager -uploadTaskWithRequest:fromFile:progress:completionHandler:`, or have its contents read into an `NSData` that's assigned to the `HTTPBody` property of the request.\n\n- see: https:\/\/github.com\/AFNetworking\/AFNetworking\/issues\/1398",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 269,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The multipart form request. The `HTTPBodyStream` property of `request` must not be `nil`.\n"
                    }
                  ],
                  "name" : "request"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The file URL to write multipart form contents to.\n"
                    }
                  ],
                  "name" : "fileURL"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A handler block to execute."
                    }
                  ],
                  "name" : "handler"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-requestWithMultipartFormRequest:writingStreamContentsToFile:completionHandler:",
              "key.parsed_declaration" : "- (nonnull NSMutableURLRequest *)\n    requestWithMultipartFormRequest:(nonnull NSURLRequest *)request\n        writingStreamContentsToFile:(nonnull NSURL *)fileURL\n                  completionHandler:\n                      (nullable void (^)(NSError *_Nullable __strong))handler;",
              "key.parsed_scope.end" : 271,
              "key.parsed_scope.start" : 269,
              "key.swift_declaration" : "func request(withMultipartForm request: URLRequest, writingStreamContentsToFile fileURL: URL, completionHandler handler: ((Error?) -> Void)? = nil) -> NSMutableURLRequest",
              "key.swift_name" : "request(withMultipartForm:writingStreamContentsToFile:completionHandler:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer(im)requestWithMultipartFormRequest:writingStreamContentsToFile:completionHandler:"
            }
          ],
          "key.swift_declaration" : "class HTTPRequestSerializer : NSObject, URLRequestSerialization",
          "key.swift_name" : "HTTPRequestSerializer",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWHTTPRequestSerializer"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.line" : 275,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 275,
          "key.parsed_scope.start" : 275
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 11,
          "key.doc.comment" : "The `__FWMultipartFormData` protocol defines the methods supported by the parameter in the block argument of `__FWHTTPRequestSerializer -multipartFormRequestWithMethod:URLString:parameters:constructingBodyWithBlock:`.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 281,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.protocol",
          "key.name" : "__FWMultipartFormData",
          "key.parsed_declaration" : "@protocol __FWMultipartFormData",
          "key.parsed_scope.end" : 385,
          "key.parsed_scope.start" : 281,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Appends the HTTP header `Content-Disposition: file; filename=#{generated filename}; name=#{name}\"` and `Content-Type: #{generated mimeType}`, followed by the encoded file data and the multipart form boundary.\n\nThe filename and MIME type for this data in the form will be automatically generated, using the last path component of the `fileURL` and system associated MIME type for the `fileURL` extension, respectively.\n\n- parameter: fileURL The URL corresponding to the file whose content will be appended to the form. This parameter must not be `nil`.\n- parameter: name The name to be associated with the specified data. This parameter must not be `nil`.\n- parameter: error If an error occurs, upon return contains an `NSError` object that describes the problem.\n\n- returns: `YES` if the file data was successfully appended, otherwise `NO`.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 294,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL corresponding to the file whose content will be appended to the form. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "fileURL"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The name to be associated with the specified data. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "name"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "If an error occurs, upon return contains an `NSError` object that describes the problem."
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "`YES` if the file data was successfully appended, otherwise `NO`."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-appendPartWithFileURL:name:error:",
              "key.parsed_declaration" : "- (BOOL)appendPartWithFileURL:(nonnull NSURL *)fileURL\n                         name:(nonnull NSString *)name\n                        error:(NSError *_Nullable __autoreleasing *_Nullable)\n                                  error;",
              "key.parsed_scope.end" : 296,
              "key.parsed_scope.start" : 294,
              "key.swift_declaration" : "func appendPart(withFileURL fileURL: URL, name: String) throws",
              "key.swift_name" : "appendPart(withFileURL:name:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWMultipartFormData(im)appendPartWithFileURL:name:error:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Appends the HTTP header `Content-Disposition: file; filename=#{filename}; name=#{name}\"` and `Content-Type: #{mimeType}`, followed by the encoded file data and the multipart form boundary.\n\n- parameter: fileURL The URL corresponding to the file whose content will be appended to the form. This parameter must not be `nil`.\n- parameter: name The name to be associated with the specified data. This parameter must not be `nil`.\n- parameter: fileName The file name to be used in the `Content-Disposition` header. This parameter must not be `nil`.\n- parameter: mimeType The declared MIME type of the file data. This parameter must not be `nil`.\n- parameter: error If an error occurs, upon return contains an `NSError` object that describes the problem.\n\n- returns: `YES` if the file data was successfully appended otherwise `NO`.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 309,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The URL corresponding to the file whose content will be appended to the form. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "fileURL"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The name to be associated with the specified data. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "name"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The file name to be used in the `Content-Disposition` header. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "fileName"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The declared MIME type of the file data. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "mimeType"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "If an error occurs, upon return contains an `NSError` object that describes the problem."
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "`YES` if the file data was successfully appended otherwise `NO`."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-appendPartWithFileURL:name:fileName:mimeType:error:",
              "key.parsed_declaration" : "- (BOOL)appendPartWithFileURL:(nonnull NSURL *)fileURL\n                         name:(nonnull NSString *)name\n                     fileName:(nonnull NSString *)fileName\n                     mimeType:(nonnull NSString *)mimeType\n                        error:(NSError *_Nullable __autoreleasing *_Nullable)\n                                  error;",
              "key.parsed_scope.end" : 313,
              "key.parsed_scope.start" : 309,
              "key.swift_declaration" : "func appendPart(withFileURL fileURL: URL, name: String, fileName: String, mimeType: String) throws",
              "key.swift_name" : "appendPart(withFileURL:name:fileName:mimeType:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWMultipartFormData(im)appendPartWithFileURL:name:fileName:mimeType:error:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Appends the HTTP header `Content-Disposition: file; filename=#{filename}; name=#{name}\"` and `Content-Type: #{mimeType}`, followed by the data from the input stream and the multipart form boundary.\n\n- parameter: inputStream The input stream to be appended to the form data\n- parameter: name The name to be associated with the specified input stream. This parameter must not be `nil`.\n- parameter: fileName The filename to be associated with the specified input stream. This parameter must not be `nil`.\n- parameter: length The length of the specified input stream in bytes.\n- parameter: mimeType The MIME type of the specified data. (For example, the MIME type for a JPEG image is image\/jpeg.) For a list of valid MIME types, see http:\/\/www.iana.org\/assignments\/media-types\/. This parameter must not be `nil`.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 324,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The input stream to be appended to the form data\n"
                    }
                  ],
                  "name" : "inputStream"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The name to be associated with the specified input stream. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "name"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The filename to be associated with the specified input stream. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "fileName"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The length of the specified input stream in bytes.\n"
                    }
                  ],
                  "name" : "length"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The MIME type of the specified data. (For example, the MIME type for a JPEG image is image\/jpeg.) For a list of valid MIME types, see http:\/\/www.iana.org\/assignments\/media-types\/. This parameter must not be `nil`."
                    }
                  ],
                  "name" : "mimeType"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-appendPartWithInputStream:name:fileName:length:mimeType:",
              "key.parsed_declaration" : "- (void)appendPartWithInputStream:(nullable NSInputStream *)inputStream\n                             name:(nonnull NSString *)name\n                         fileName:(nonnull NSString *)fileName\n                           length:(int64_t)length\n                         mimeType:(nonnull NSString *)mimeType;",
              "key.parsed_scope.end" : 328,
              "key.parsed_scope.start" : 324,
              "key.swift_declaration" : "func appendPart(with inputStream: InputStream?, name: String, fileName: String, length: Int64, mimeType: String)",
              "key.swift_name" : "appendPart(with:name:fileName:length:mimeType:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWMultipartFormData(im)appendPartWithInputStream:name:fileName:length:mimeType:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Appends the HTTP header `Content-Disposition: file; filename=#{filename}; name=#{name}\"` and `Content-Type: #{mimeType}`, followed by the encoded file data and the multipart form boundary.\n\n- parameter: data The data to be encoded and appended to the form data.\n- parameter: name The name to be associated with the specified data. This parameter must not be `nil`.\n- parameter: fileName The filename to be associated with the specified data. This parameter must not be `nil`.\n- parameter: mimeType The MIME type of the specified data. (For example, the MIME type for a JPEG image is image\/jpeg.) For a list of valid MIME types, see http:\/\/www.iana.org\/assignments\/media-types\/. This parameter must not be `nil`.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 338,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The data to be encoded and appended to the form data.\n"
                    }
                  ],
                  "name" : "data"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The name to be associated with the specified data. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "name"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The filename to be associated with the specified data. This parameter must not be `nil`.\n"
                    }
                  ],
                  "name" : "fileName"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The MIME type of the specified data. (For example, the MIME type for a JPEG image is image\/jpeg.) For a list of valid MIME types, see http:\/\/www.iana.org\/assignments\/media-types\/. This parameter must not be `nil`."
                    }
                  ],
                  "name" : "mimeType"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-appendPartWithFileData:name:fileName:mimeType:",
              "key.parsed_declaration" : "- (void)appendPartWithFileData:(nonnull NSData *)data\n                          name:(nonnull NSString *)name\n                      fileName:(nonnull NSString *)fileName\n                      mimeType:(nonnull NSString *)mimeType;",
              "key.parsed_scope.end" : 341,
              "key.parsed_scope.start" : 338,
              "key.swift_declaration" : "func appendPart(withFileData data: Data, name: String, fileName: String, mimeType: String)",
              "key.swift_name" : "appendPart(withFileData:name:fileName:mimeType:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWMultipartFormData(im)appendPartWithFileData:name:fileName:mimeType:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Appends the HTTP headers `Content-Disposition: form-data; name=#{name}\"`, followed by the encoded data and the multipart form boundary.\n\n- parameter: data The data to be encoded and appended to the form data.\n- parameter: name The name to be associated with the specified data. This parameter must not be `nil`.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 350,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The data to be encoded and appended to the form data.\n"
                    }
                  ],
                  "name" : "data"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The name to be associated with the specified data. This parameter must not be `nil`."
                    }
                  ],
                  "name" : "name"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-appendPartWithFormData:name:",
              "key.parsed_declaration" : "- (void)appendPartWithFormData:(nonnull NSData *)data\n                          name:(nonnull NSString *)name;",
              "key.parsed_scope.end" : 351,
              "key.parsed_scope.start" : 350,
              "key.swift_declaration" : "func appendPart(withForm data: Data, name: String)",
              "key.swift_name" : "appendPart(withForm:name:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWMultipartFormData(im)appendPartWithFormData:name:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Appends HTTP headers, followed by the encoded data and the multipart form boundary.\n\n- parameter: headers The HTTP headers to be appended to the form data.\n- parameter: body The data to be encoded and appended to the form data. This parameter must not be `nil`.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 360,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP headers to be appended to the form data.\n"
                    }
                  ],
                  "name" : "headers"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The data to be encoded and appended to the form data. This parameter must not be `nil`."
                    }
                  ],
                  "name" : "body"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-appendPartWithHeaders:body:",
              "key.parsed_declaration" : "- (void)appendPartWithHeaders:\n            (nullable NSDictionary<NSString *, NSString *> *)headers\n                         body:(nonnull NSData *)body;",
              "key.parsed_scope.end" : 361,
              "key.parsed_scope.start" : 360,
              "key.swift_declaration" : "func appendPart(withHeaders headers: [String : String]?, body: Data)",
              "key.swift_name" : "appendPart(withHeaders:body:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWMultipartFormData(im)appendPartWithHeaders:body:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Appends HTTP headers, followed by the data from the input stream and the multipart form boundary.\n\n- parameter: inputStream The input stream to be appended to the form data\n- parameter: length The length of the specified input stream in bytes.\n- parameter: headers The HTTP headers to be appended to the form data.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 370,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The input stream to be appended to the form data\n"
                    }
                  ],
                  "name" : "inputStream"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The length of the specified input stream in bytes.\n"
                    }
                  ],
                  "name" : "length"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP headers to be appended to the form data."
                    }
                  ],
                  "name" : "headers"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-appendPartWithInputStream:length:headers:",
              "key.parsed_declaration" : "- (void)appendPartWithInputStream:(nullable NSInputStream *)inputStream\n                           length:(int64_t)length\n                          headers:\n                              (nullable NSDictionary<NSString *, NSString *> *)\n                                  headers;",
              "key.parsed_scope.end" : 372,
              "key.parsed_scope.start" : 370,
              "key.swift_declaration" : "func appendPart(with inputStream: InputStream?, length: Int64, headers: [String : String]?)",
              "key.swift_name" : "appendPart(with:length:headers:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWMultipartFormData(im)appendPartWithInputStream:length:headers:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Throttles request bandwidth by limiting the packet size and adding a delay for each chunk read from the upload stream.\n\nWhen uploading over a 3G or EDGE connection, requests may fail with \"request body stream exhausted\". Setting a maximum packet size and delay according to the recommended values (`kFWUploadStream3GSuggestedPacketSize` and `kFWUploadStream3GSuggestedDelay`) lowers the risk of the input stream exceeding its allocated bandwidth. Unfortunately, there is no definite way to distinguish between a 3G, EDGE, or LTE connection over `NSURLConnection`. As such, it is not recommended that you throttle bandwidth based solely on network reachability. Instead, you should consider checking for the \"request body stream exhausted\" in a failure block, and then retrying the request with throttled bandwidth.\n\n- parameter: numberOfBytes Maximum packet size, in number of bytes. The default packet size for an input stream is 16kb.\n- parameter: delay Duration of delay each time a packet is read. By default, no delay is set.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 382,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "Maximum packet size, in number of bytes. The default packet size for an input stream is 16kb.\n"
                    }
                  ],
                  "name" : "numberOfBytes"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "Duration of delay each time a packet is read. By default, no delay is set."
                    }
                  ],
                  "name" : "delay"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-throttleBandwidthWithPacketSize:delay:",
              "key.parsed_declaration" : "- (void)throttleBandwidthWithPacketSize:(NSUInteger)numberOfBytes\n                                  delay:(NSTimeInterval)delay;",
              "key.parsed_scope.end" : 383,
              "key.parsed_scope.start" : 382,
              "key.swift_declaration" : "func throttleBandwidth(withPacketSize numberOfBytes: UInt, delay: TimeInterval)",
              "key.swift_name" : "throttleBandwidth(withPacketSize:delay:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWMultipartFormData(im)throttleBandwidthWithPacketSize:delay:"
            }
          ],
          "key.swift_declaration" : "protocol MultipartFormData",
          "key.swift_name" : "MultipartFormData",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(pl)__FWMultipartFormData"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.line" : 387,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 387,
          "key.parsed_scope.start" : 387
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "The default implementation of `__FWMultipartFormData` protocol.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 393,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWStreamingMultipartFormData",
          "key.parsed_declaration" : "\n@interface __FWStreamingMultipartFormData : NSObject <__FWMultipartFormData>",
          "key.parsed_scope.end" : 400,
          "key.parsed_scope.start" : 393,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.line" : 395,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithURLRequest:stringEncoding:",
              "key.parsed_declaration" : "- (instancetype)initWithURLRequest:(NSMutableURLRequest *)urlRequest\n                    stringEncoding:(NSStringEncoding)encoding;",
              "key.parsed_scope.end" : 396,
              "key.parsed_scope.start" : 395,
              "key.swift_declaration" : "init(urlRequest: NSMutableURLRequest, stringEncoding encoding: UInt)",
              "key.swift_name" : "init(urlRequest:stringEncoding:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWStreamingMultipartFormData(im)initWithURLRequest:stringEncoding:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 26,
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.line" : 398,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-requestByFinalizingMultipartFormData",
              "key.parsed_declaration" : "- (NSMutableURLRequest *)requestByFinalizingMultipartFormData;",
              "key.parsed_scope.end" : 398,
              "key.parsed_scope.start" : 398,
              "key.swift_declaration" : "func requestByFinalizingMultipartFormData() -> NSMutableURLRequest",
              "key.swift_name" : "requestByFinalizingMultipartFormData()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWStreamingMultipartFormData(im)requestByFinalizingMultipartFormData"
            }
          ],
          "key.swift_declaration" : "class StreamingMultipartFormData : NSObject, MultipartFormData",
          "key.swift_name" : "StreamingMultipartFormData",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWStreamingMultipartFormData"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.line" : 402,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 402,
          "key.parsed_scope.start" : 402
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`__FWJSONRequestSerializer` is a subclass of `__FWHTTPRequestSerializer` that encodes parameters as JSON using `NSJSONSerialization`, setting the `Content-Type` of the encoded request to `application\/json`.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 408,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWJSONRequestSerializer",
          "key.parsed_declaration" : "\n@interface __FWJSONRequestSerializer : __FWHTTPRequestSerializer",
          "key.parsed_scope.end" : 422,
          "key.parsed_scope.start" : 408,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 52,
              "key.doc.comment" : "Options for writing the request JSON data from Foundation objects. For possible values, see the `NSJSONSerialization` documentation section \"NSJSONWritingOptions\". `0` by default.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 413,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "writingOptions",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSJSONWritingOptions writingOptions;",
              "key.parsed_scope.end" : 413,
              "key.parsed_scope.start" : 413,
              "key.swift_declaration" : "var writingOptions: JSONSerialization.WritingOptions { get set }",
              "key.swift_name" : "writingOptions",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWJSONRequestSerializer(py)writingOptions"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a JSON serializer with specified reading and writing options.\n\n- parameter: writingOptions The specified JSON writing options.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 420,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The specified JSON writing options."
                    }
                  ],
                  "name" : "writingOptions"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+serializerWithWritingOptions:",
              "key.parsed_declaration" : "+ (nonnull instancetype)serializerWithWritingOptions:\n    (NSJSONWritingOptions)writingOptions;",
              "key.parsed_scope.end" : 420,
              "key.parsed_scope.start" : 420,
              "key.swift_declaration" : "convenience init(writingOptions: JSONSerialization.WritingOptions = [])",
              "key.swift_name" : "init(writingOptions:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWJSONRequestSerializer(cm)serializerWithWritingOptions:"
            }
          ],
          "key.swift_declaration" : "class JSONRequestSerializer : HTTPRequestSerializer",
          "key.swift_name" : "JSONRequestSerializer",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWJSONRequestSerializer"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.line" : 424,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 424,
          "key.parsed_scope.start" : 424
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`__FWPropertyListRequestSerializer` is a subclass of `__FWHTTPRequestSerializer` that encodes parameters as JSON using `NSPropertyListSerializer`, setting the `Content-Type` of the encoded request to `application\/x-plist`.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 430,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPropertyListRequestSerializer",
          "key.parsed_declaration" : "\n@interface __FWPropertyListRequestSerializer : __FWHTTPRequestSerializer",
          "key.parsed_scope.end" : 453,
          "key.parsed_scope.start" : 430,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 52,
              "key.doc.comment" : "The property list format. Possible values are described in \"NSPropertyListFormat\".",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 435,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "format",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSPropertyListFormat format;",
              "key.parsed_scope.end" : 435,
              "key.parsed_scope.start" : 435,
              "key.swift_declaration" : "var format: PropertyListSerialization.PropertyListFormat { get set }",
              "key.swift_name" : "format",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPropertyListRequestSerializer(py)format"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 58,
              "key.doc.comment" : "- warning: The `writeOptions` property is currently unused.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 440,
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "writeOptions",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSPropertyListWriteOptions writeOptions;",
              "key.parsed_scope.end" : 440,
              "key.parsed_scope.start" : 440,
              "key.swift_declaration" : "var writeOptions: UInt { get set }",
              "key.swift_name" : "writeOptions",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPropertyListRequestSerializer(py)writeOptions"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a property list serializer with a specified format, read options, and write options.\n\n- parameter: format The property list format.\n- parameter: writeOptions The property list write options.\n\n- warning: The `writeOptions` property is currently unused.",
              "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 450,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The property list format.\n"
                    }
                  ],
                  "name" : "format"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The property list write options."
                    }
                  ],
                  "name" : "writeOptions"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+serializerWithFormat:writeOptions:",
              "key.parsed_declaration" : "+ (nonnull instancetype)serializerWithFormat:(NSPropertyListFormat)format\n                                writeOptions:\n                                    (NSPropertyListWriteOptions)writeOptions;",
              "key.parsed_scope.end" : 451,
              "key.parsed_scope.start" : 450,
              "key.swift_declaration" : "convenience init(format: PropertyListSerialization.PropertyListFormat, writeOptions: UInt)",
              "key.swift_name" : "init(format:writeOptions:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPropertyListRequestSerializer(cm)serializerWithFormat:writeOptions:"
            }
          ],
          "key.swift_declaration" : "class PropertyListRequestSerializer : HTTPRequestSerializer",
          "key.swift_name" : "PropertyListRequestSerializer",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPropertyListRequestSerializer"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.line" : 455,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 455,
          "key.parsed_scope.start" : 455
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.line" : 458,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "Constants",
          "key.parsed_scope.end" : 458,
          "key.parsed_scope.start" : 458
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "## Error Domains\n\nThe following error domain is predefined.\n\n- `NSString * const __FWURLRequestSerializationErrorDomain`\n\n### Constants\n\n`__FWURLRequestSerializationErrorDomain`\nFWURLRequestSerializer errors. Error codes for `__FWURLRequestSerializationErrorDomain` correspond to codes in `NSURLErrorDomain`.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 473,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWURLRequestSerializationErrorDomain",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(URLRequestSerializationErrorDomain) NSString *const\n    __FWURLRequestSerializationErrorDomain",
          "key.parsed_scope.end" : 473,
          "key.parsed_scope.start" : 473,
          "key.swift_declaration" : "let URLRequestSerializationErrorDomain: String",
          "key.swift_name" : "URLRequestSerializationErrorDomain",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWURLRequestSerializationErrorDomain"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "## User info dictionary keys\n\nThese keys may exist in the user info dictionary, in addition to those defined for NSError.\n\n- `NSString * const __FWNetworkingOperationFailingURLRequestErrorKey`\n\n### Constants\n\n`__FWNetworkingOperationFailingURLRequestErrorKey`\nThe corresponding value is an `NSURLRequest` containing the request of the operation associated with an error. This key is only present in the `__FWURLRequestSerializationErrorDomain`.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 487,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingOperationFailingURLRequestErrorKey",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingOperationFailingURLRequestErrorKey)\n    NSString *const __FWNetworkingOperationFailingURLRequestErrorKey",
          "key.parsed_scope.end" : 487,
          "key.parsed_scope.start" : 487,
          "key.swift_declaration" : "let NetworkingOperationFailingURLRequestErrorKey: String",
          "key.swift_name" : "NetworkingOperationFailingURLRequestErrorKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingOperationFailingURLRequestErrorKey"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "## Throttling Bandwidth for HTTP Request Input Streams\n\n- see: -throttleBandwidthWithPacketSize:delay:\n\n### Constants\n\n`kFWUploadStream3GSuggestedPacketSize`\nMaximum packet size, in number of bytes. Equal to 16kb.\n\n`kFWUploadStream3GSuggestedDelay`\nDuration of delay each time a packet is read. Equal to 0.2 seconds.",
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 502,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "kFWUploadStream3GSuggestedPacketSize",
          "key.parsed_declaration" : "extern const NSUInteger kFWUploadStream3GSuggestedPacketSize",
          "key.parsed_scope.end" : 502,
          "key.parsed_scope.start" : 502,
          "key.swift_declaration" : "let kUploadStream3GSuggestedPacketSize: UInt",
          "key.swift_name" : "kUploadStream3GSuggestedPacketSize",
          "key.unavailable_message" : "",
          "key.usr" : "c:@kFWUploadStream3GSuggestedPacketSize"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 40,
          "key.doc.file" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.doc.line" : 503,
          "key.filepath" : "docs\/FWFramework\/URLRequestSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "kFWUploadStream3GSuggestedDelay",
          "key.parsed_declaration" : "FOUNDATION_EXPORT NSTimeInterval const kFWUploadStream3GSuggestedDelay",
          "key.parsed_scope.end" : 503,
          "key.parsed_scope.start" : 503,
          "key.swift_declaration" : "let kUploadStream3GSuggestedDelay: TimeInterval",
          "key.swift_name" : "kUploadStream3GSuggestedDelay",
          "key.unavailable_message" : "",
          "key.usr" : "c:@kFWUploadStream3GSuggestedDelay"
        }
      ]
    }
  },
  {
    "docs\/FWFramework\/URLResponseSerialization.h" : {
      "key.diagnostic_stage" : "",
      "key.substructure" : [
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 22,
          "key.doc.comment" : "Recursively removes `NSNull` values from a JSON object.",
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 31,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.function",
          "key.name" : "__FWJSONObjectByRemovingKeysWithNullValues",
          "key.parsed_declaration" : "extern id _Nonnull __FWJSONObjectByRemovingKeysWithNullValues(\n    id _Nonnull JSONObject, NSJSONReadingOptions readingOptions)",
          "key.parsed_scope.end" : 31,
          "key.parsed_scope.start" : 31,
          "key.swift_declaration" : "func JSONObjectByRemovingKeysWithNullValues(_ JSONObject: Any, readingOptions: JSONSerialization.ReadingOptions) -> Any",
          "key.swift_name" : "JSONObjectByRemovingKeysWithNullValues(_:readingOptions:)",
          "key.unavailable_message" : "",
          "key.usr" : "c:@F@__FWJSONObjectByRemovingKeysWithNullValues"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 11,
          "key.doc.comment" : "The `__FWURLResponseSerialization` protocol is adopted by an object that decodes data into a more useful object representation, according to details in the server response. Response serializers may additionally perform validation on the incoming response and data.\n\nFor example, a JSON response serializer may check for an acceptable status code (`2XX` range) and content type (`application\/json`), decoding a valid JSON response into an object.",
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 39,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.protocol",
          "key.name" : "__FWURLResponseSerialization",
          "key.parsed_declaration" : "@protocol __FWURLResponseSerialization <NSObject, NSSecureCoding, NSCopying>",
          "key.parsed_scope.end" : 54,
          "key.parsed_scope.start" : 39,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 16,
              "key.doc.comment" : "The response object decoded from the data associated with a specified response.\n\n- parameter: response The response to be processed.\n- parameter: data The response data to be decoded.\n- parameter: error The error that occurred while attempting to decode the response data.\n\n- returns: The object decoded from the specified response data.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 50,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The response to be processed.\n"
                    }
                  ],
                  "name" : "response"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The response data to be decoded.\n"
                    }
                  ],
                  "name" : "data"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The error that occurred while attempting to decode the response data."
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "The object decoded from the specified response data."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-responseObjectForResponse:data:error:",
              "key.parsed_declaration" : "- (nullable id)\n    responseObjectForResponse:(nullable NSURLResponse *)response\n                         data:(nullable NSData *)data\n                        error:(NSError *_Nullable __autoreleasing *_Nullable)\n                                  error;",
              "key.parsed_scope.end" : 52,
              "key.parsed_scope.start" : 50,
              "key.swift_declaration" : "func responseObject(for response: URLResponse?, data: Data?, error: NSErrorPointer) -> Any?",
              "key.swift_name" : "responseObject(for:data:error:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(pl)__FWURLResponseSerialization(im)responseObjectForResponse:data:error:"
            }
          ],
          "key.swift_declaration" : "protocol URLResponseSerialization : NSCopying, NSSecureCoding, NSObjectProtocol",
          "key.swift_name" : "URLResponseSerialization",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(pl)__FWURLResponseSerialization"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.line" : 56,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 56,
          "key.parsed_scope.start" : 56
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`__FWHTTPResponseSerializer` conforms to the `__FWURLRequestSerialization` & `__FWURLResponseSerialization` protocols, offering a concrete base implementation of query string \/ URL form-encoded parameter serialization and default request headers, as well as response status code and content type validation.\n\nAny request or response serializer dealing with HTTP is encouraged to subclass `__FWHTTPResponseSerializer` in order to ensure consistent default behavior.",
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 64,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWHTTPResponseSerializer",
          "key.parsed_declaration" : "\n@interface __FWHTTPResponseSerializer : NSObject <__FWURLResponseSerialization>",
          "key.parsed_scope.end" : 114,
          "key.parsed_scope.start" : 64,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.line" : 66,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-init",
              "key.parsed_declaration" : "- (instancetype)init;",
              "key.parsed_scope.end" : 66,
              "key.parsed_scope.start" : 66,
              "key.swift_declaration" : "init()",
              "key.swift_name" : "init()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPResponseSerializer(im)init"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a serializer with default configuration.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 71,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+serializer",
              "key.parsed_declaration" : "+ (nonnull instancetype)serializer;",
              "key.parsed_scope.end" : 71,
              "key.parsed_scope.start" : 71,
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPResponseSerializer(cm)serializer"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.line" : 74,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Configuring Response Serialization",
              "key.parsed_scope.end" : 74,
              "key.parsed_scope.start" : 74
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 51,
              "key.doc.comment" : "The acceptable HTTP status codes for responses. When non-`nil`, responses with status codes not contained by the set will result in an error during validation.\n\nSee http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec10.html",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 82,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "acceptableStatusCodes",
              "key.parsed_declaration" : "@property (nonatomic, copy, readwrite, nullable)\n    NSIndexSet *acceptableStatusCodes;",
              "key.parsed_scope.end" : 82,
              "key.parsed_scope.start" : 82,
              "key.swift_declaration" : "var acceptableStatusCodes: IndexSet? { get set }",
              "key.swift_name" : "acceptableStatusCodes",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPResponseSerializer(py)acceptableStatusCodes"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 59,
              "key.doc.comment" : "The acceptable MIME types for responses. When non-`nil`, responses with a `Content-Type` with MIME types that do not intersect with the set will result in an error during validation.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 87,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "acceptableContentTypes",
              "key.parsed_declaration" : "@property (nonatomic, copy, readwrite, nullable)\n    NSSet<NSString *> *acceptableContentTypes;",
              "key.parsed_scope.end" : 87,
              "key.parsed_scope.start" : 87,
              "key.swift_declaration" : "var acceptableContentTypes: Set<String>? { get set }",
              "key.swift_name" : "acceptableContentTypes",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPResponseSerializer(py)acceptableContentTypes"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a user info to be used for the specified response.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 92,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setUserInfo:forResponse:",
              "key.parsed_declaration" : "- (void)setUserInfo:(nullable NSDictionary *)userInfo\n        forResponse:(nullable NSURLResponse *)response;",
              "key.parsed_scope.end" : 92,
              "key.parsed_scope.start" : 92,
              "key.swift_declaration" : "func setUserInfo(_ userInfo: [AnyHashable : Any]?, for response: URLResponse?)",
              "key.swift_name" : "setUserInfo(_:for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPResponseSerializer(im)setUserInfo:forResponse:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 28,
              "key.doc.comment" : "Returns the user info of the specified response.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 97,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-userInfoForResponse:",
              "key.parsed_declaration" : "- (nullable NSDictionary *)userInfoForResponse:\n    (nullable NSURLResponse *)response;",
              "key.parsed_scope.end" : 97,
              "key.parsed_scope.start" : 97,
              "key.swift_declaration" : "func userInfo(for response: URLResponse?) -> [AnyHashable : Any]?",
              "key.swift_name" : "userInfo(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPResponseSerializer(im)userInfoForResponse:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Validates the specified response and data.\n\nIn its base implementation, this method checks for an acceptable status code and content type. Subclasses may wish to add other domain-specific checks.\n\n- parameter: response The response to be validated.\n- parameter: data The data associated with the response.\n- parameter: error The error that occurred while attempting to validate the response.\n\n- returns: `YES` if the response is valid, otherwise `NO`.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 110,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The response to be validated.\n"
                    }
                  ],
                  "name" : "response"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The data associated with the response.\n"
                    }
                  ],
                  "name" : "data"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The error that occurred while attempting to validate the response."
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "`YES` if the response is valid, otherwise `NO`."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-validateResponse:data:error:",
              "key.parsed_declaration" : "- (BOOL)validateResponse:(nullable NSHTTPURLResponse *)response\n                    data:(nullable NSData *)data\n                   error:(NSError *_Nullable __autoreleasing *_Nullable)error;",
              "key.parsed_scope.end" : 112,
              "key.parsed_scope.start" : 110,
              "key.swift_declaration" : "func validate(_ response: HTTPURLResponse?, data: Data?) throws",
              "key.swift_name" : "validate(_:data:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWHTTPResponseSerializer(im)validateResponse:data:error:"
            }
          ],
          "key.swift_declaration" : "class HTTPResponseSerializer : NSObject, URLResponseSerialization",
          "key.swift_name" : "HTTPResponseSerializer",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWHTTPResponseSerializer"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.line" : 116,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 116,
          "key.parsed_scope.start" : 116
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`__FWJSONResponseSerializer` is a subclass of `__FWHTTPResponseSerializer` that validates and decodes JSON responses.\n\nBy default, `__FWJSONResponseSerializer` accepts the following MIME types, which includes the official standard, `application\/json`, as well as other commonly-used types:\n\n- `application\/json`\n- `text\/json`\n- `text\/javascript`\n\nIn RFC 7159 - Section 8.1, it states that JSON text is required to be encoded in UTF-8, UTF-16, or UTF-32, and the default encoding is UTF-8. NSJSONSerialization provides support for all the encodings listed in the specification, and recommends UTF-8 for efficiency. Using an unsupported encoding will result in serialization error. See the `NSJSONSerialization` documentation for more details.",
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 131,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWJSONResponseSerializer",
          "key.parsed_declaration" : "\n@interface __FWJSONResponseSerializer : __FWHTTPResponseSerializer",
          "key.parsed_scope.end" : 152,
          "key.parsed_scope.start" : 131,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.line" : 133,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-init",
              "key.parsed_declaration" : "- (instancetype)init;",
              "key.parsed_scope.end" : 133,
              "key.parsed_scope.start" : 133,
              "key.swift_declaration" : "init()",
              "key.swift_name" : "init()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWJSONResponseSerializer(im)init"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 52,
              "key.doc.comment" : "Options for reading the response JSON data and creating the Foundation objects. For possible values, see the `NSJSONSerialization` documentation section \"NSJSONReadingOptions\". `0` by default.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 138,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "readingOptions",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSJSONReadingOptions readingOptions;",
              "key.parsed_scope.end" : 138,
              "key.parsed_scope.start" : 138,
              "key.swift_declaration" : "var readingOptions: JSONSerialization.ReadingOptions { get set }",
              "key.swift_name" : "readingOptions",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWJSONResponseSerializer(py)readingOptions"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Whether to remove keys with `NSNull` values from response JSON. Defaults to `NO`.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 143,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "removesKeysWithNullValues",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    BOOL removesKeysWithNullValues;",
              "key.parsed_scope.end" : 143,
              "key.parsed_scope.start" : 143,
              "key.swift_declaration" : "var removesKeysWithNullValues: Bool { get set }",
              "key.swift_name" : "removesKeysWithNullValues",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWJSONResponseSerializer(py)removesKeysWithNullValues"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a JSON serializer with specified reading and writing options.\n\n- parameter: readingOptions The specified JSON reading options.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 150,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The specified JSON reading options."
                    }
                  ],
                  "name" : "readingOptions"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+serializerWithReadingOptions:",
              "key.parsed_declaration" : "+ (nonnull instancetype)serializerWithReadingOptions:\n    (NSJSONReadingOptions)readingOptions;",
              "key.parsed_scope.end" : 150,
              "key.parsed_scope.start" : 150,
              "key.swift_declaration" : "convenience init(readingOptions: JSONSerialization.ReadingOptions = [])",
              "key.swift_name" : "init(readingOptions:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWJSONResponseSerializer(cm)serializerWithReadingOptions:"
            }
          ],
          "key.swift_declaration" : "class JSONResponseSerializer : HTTPResponseSerializer",
          "key.swift_name" : "JSONResponseSerializer",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWJSONResponseSerializer"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.line" : 154,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 154,
          "key.parsed_scope.start" : 154
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`__FWPropertyListResponseSerializer` is a subclass of `__FWHTTPResponseSerializer` that validates and decodes XML responses as an `NSXMLDocument` objects.\n\nBy default, `__FWPropertyListResponseSerializer` accepts the following MIME types:\n\n- `application\/x-plist`",
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 164,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWPropertyListResponseSerializer",
          "key.parsed_declaration" : "\n@interface __FWPropertyListResponseSerializer : __FWHTTPResponseSerializer",
          "key.parsed_scope.end" : 187,
          "key.parsed_scope.start" : 164,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.line" : 166,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-init",
              "key.parsed_declaration" : "- (instancetype)init;",
              "key.parsed_scope.end" : 166,
              "key.parsed_scope.start" : 166,
              "key.swift_declaration" : "init()",
              "key.swift_name" : "init()",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPropertyListResponseSerializer(im)init"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 52,
              "key.doc.comment" : "The property list format. Possible values are described in \"NSPropertyListFormat\".",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 171,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "format",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSPropertyListFormat format;",
              "key.parsed_scope.end" : 171,
              "key.parsed_scope.start" : 171,
              "key.swift_declaration" : "var format: PropertyListSerialization.PropertyListFormat { get set }",
              "key.swift_name" : "format",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPropertyListResponseSerializer(py)format"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 57,
              "key.doc.comment" : "The property list reading options. Possible values are described in \"NSPropertyListMutabilityOptions.\"",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 176,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "readOptions",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    NSPropertyListReadOptions readOptions;",
              "key.parsed_scope.end" : 176,
              "key.parsed_scope.start" : 176,
              "key.swift_declaration" : "var readOptions: PropertyListSerialization.ReadOptions { get set }",
              "key.swift_name" : "readOptions",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPropertyListResponseSerializer(py)readOptions"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a property list serializer with a specified format, read options, and write options.\n\n- parameter: format The property list format.\n- parameter: readOptions The property list reading options.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 184,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The property list format.\n"
                    }
                  ],
                  "name" : "format"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The property list reading options."
                    }
                  ],
                  "name" : "readOptions"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+serializerWithFormat:readOptions:",
              "key.parsed_declaration" : "+ (nonnull instancetype)serializerWithFormat:(NSPropertyListFormat)format\n                                 readOptions:\n                                     (NSPropertyListReadOptions)readOptions;",
              "key.parsed_scope.end" : 185,
              "key.parsed_scope.start" : 184,
              "key.swift_declaration" : "convenience init(format: PropertyListSerialization.PropertyListFormat, read readOptions: PropertyListSerialization.ReadOptions = [])",
              "key.swift_name" : "init(format:read:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWPropertyListResponseSerializer(cm)serializerWithFormat:readOptions:"
            }
          ],
          "key.swift_declaration" : "class PropertyListResponseSerializer : HTTPResponseSerializer",
          "key.swift_name" : "PropertyListResponseSerializer",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWPropertyListResponseSerializer"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.line" : 189,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 189,
          "key.parsed_scope.start" : 189
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`__FWImageResponseSerializer` is a subclass of `__FWHTTPResponseSerializer` that validates and decodes image responses.\n\nBy default, `__FWImageResponseSerializer` accepts the following MIME types, which correspond to the image formats supported by UIImage or NSImage:\n\n- `application\/octet-stream`\n- `application\/pdf`\n- `image\/tiff`\n- `image\/jpeg`\n- `image\/gif`\n- `image\/png`\n- `image\/ico`\n- `image\/x-icon`\n- `image\/bmp`\n- `image\/x-bmp`\n- `image\/x-xbitmap`\n- `image\/x-ms-bmp`\n- `image\/x-win-bitmap`\n- `image\/heic`\n- `image\/heif`\n- `image\/webp`\n- `image\/svg+xml`",
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 215,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWImageResponseSerializer",
          "key.parsed_declaration" : "\n@interface __FWImageResponseSerializer : __FWHTTPResponseSerializer",
          "key.parsed_scope.end" : 242,
          "key.parsed_scope.start" : 215,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 39,
              "key.doc.comment" : "The scale factor used when interpreting the image data to construct `responseImage`. Specifying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the size property. This is set to the value of scale of the main screen by default, which automatically scales images for retina displays, for instance.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 220,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "imageScale",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite) CGFloat imageScale;",
              "key.parsed_scope.end" : 220,
              "key.parsed_scope.start" : 220,
              "key.swift_declaration" : "var imageScale: CGFloat { get set }",
              "key.swift_name" : "imageScale",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWImageResponseSerializer(py)imageScale"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Whether to automatically inflate response image data for compressed formats (such as PNG or JPEG). Enabling this can significantly improve drawing performance on iOS when used with `setCompletionBlockWithSuccess:failure:`, as it allows a bitmap representation to be constructed in the background rather than on the main thread. `YES` by default.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 225,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "automaticallyInflatesResponseImage",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    BOOL automaticallyInflatesResponseImage;",
              "key.parsed_scope.end" : 225,
              "key.parsed_scope.start" : 225,
              "key.swift_declaration" : "var automaticallyInflatesResponseImage: Bool { get set }",
              "key.swift_name" : "automaticallyInflatesResponseImage",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWImageResponseSerializer(py)automaticallyInflatesResponseImage"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 36,
              "key.doc.comment" : "Whether to cache response data for response image. `NO` by default.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 230,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "shouldCacheResponseData",
              "key.parsed_declaration" : "@property (nonatomic, assign, unsafe_unretained, readwrite)\n    BOOL shouldCacheResponseData;",
              "key.parsed_scope.end" : 230,
              "key.parsed_scope.start" : 230,
              "key.swift_declaration" : "var shouldCacheResponseData: Bool { get set }",
              "key.swift_name" : "shouldCacheResponseData",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWImageResponseSerializer(py)shouldCacheResponseData"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 22,
              "key.doc.comment" : "Get the cached response data for response image if exists.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 235,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+cachedResponseDataForImage:",
              "key.parsed_declaration" : "+ (nullable NSData *)cachedResponseDataForImage:(nullable UIImage *)image;",
              "key.parsed_scope.end" : 235,
              "key.parsed_scope.start" : 235,
              "key.swift_declaration" : "class func cachedResponseData(for image: UIImage?) -> Data?",
              "key.swift_name" : "cachedResponseData(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWImageResponseSerializer(cm)cachedResponseDataForImage:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Clear the cached response data for response image if exists.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 240,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+clearCachedResponseDataForImage:",
              "key.parsed_declaration" : "+ (void)clearCachedResponseDataForImage:(nullable UIImage *)image;",
              "key.parsed_scope.end" : 240,
              "key.parsed_scope.start" : 240,
              "key.swift_declaration" : "class func clearCachedResponseData(for image: UIImage?)",
              "key.swift_name" : "clearCachedResponseData(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWImageResponseSerializer(cm)clearCachedResponseDataForImage:"
            }
          ],
          "key.swift_declaration" : "class ImageResponseSerializer : HTTPResponseSerializer",
          "key.swift_name" : "ImageResponseSerializer",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWImageResponseSerializer"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.line" : 244,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "-",
          "key.parsed_scope.end" : 244,
          "key.parsed_scope.start" : 244
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`FWCompoundSerializer` is a subclass of `__FWHTTPResponseSerializer` that delegates the response serialization to the first `__FWHTTPResponseSerializer` object that returns an object for `responseObjectForResponse:data:error:`, falling back on the default behavior of `__FWHTTPResponseSerializer`. This is useful for supporting multiple potential types and structures of server responses with a single serializer.",
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 250,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWCompoundResponseSerializer",
          "key.parsed_declaration" : "\n@interface __FWCompoundResponseSerializer : __FWHTTPResponseSerializer",
          "key.parsed_scope.end" : 264,
          "key.parsed_scope.start" : 250,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 83,
              "key.doc.comment" : "The component response serializers.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 255,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "responseSerializers",
              "key.parsed_declaration" : "@property (nonatomic, copy, readonly)\n    NSArray<id<__FWURLResponseSerialization>> *_Nonnull responseSerializers;",
              "key.parsed_scope.end" : 255,
              "key.parsed_scope.start" : 255,
              "key.swift_declaration" : "var responseSerializers: [URLResponseSerialization] { get }",
              "key.swift_name" : "responseSerializers",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWCompoundResponseSerializer(py)responseSerializers"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a compound serializer comprised of the specified response serializers.\n\n- warning: Each response serializer specified must be a subclass of `__FWHTTPResponseSerializer`, and response to `-validateResponse:data:error:`.",
              "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 262,
              "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.name" : "+compoundSerializerWithResponseSerializers:",
              "key.parsed_declaration" : "+ (nonnull instancetype)compoundSerializerWithResponseSerializers:\n    (nonnull NSArray<id<__FWURLResponseSerialization>> *)responseSerializers;",
              "key.parsed_scope.end" : 262,
              "key.parsed_scope.start" : 262,
              "key.swift_declaration" : "class func compoundSerializer(withResponseSerializers responseSerializers: [URLResponseSerialization]) -> Self",
              "key.swift_name" : "compoundSerializer(withResponseSerializers:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWCompoundResponseSerializer(cm)compoundSerializerWithResponseSerializers:"
            }
          ],
          "key.swift_declaration" : "class CompoundResponseSerializer : HTTPResponseSerializer",
          "key.swift_name" : "CompoundResponseSerializer",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWCompoundResponseSerializer"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.line" : 267,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "Constants",
          "key.parsed_scope.end" : 267,
          "key.parsed_scope.start" : 267
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "## Error Domains\n\nThe following error domain is predefined.\n\n- `NSString * const __FWURLResponseSerializationErrorDomain`\n\n### Constants\n\n`__FWURLResponseSerializationErrorDomain`\nFWURLResponseSerializer errors. Error codes for `__FWURLResponseSerializationErrorDomain` correspond to codes in `NSURLErrorDomain`.",
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 282,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWURLResponseSerializationErrorDomain",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(URLResponseSerializationErrorDomain) NSString *const\n    __FWURLResponseSerializationErrorDomain",
          "key.parsed_scope.end" : 282,
          "key.parsed_scope.start" : 282,
          "key.swift_declaration" : "let URLResponseSerializationErrorDomain: String",
          "key.swift_name" : "URLResponseSerializationErrorDomain",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWURLResponseSerializationErrorDomain"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "## User info dictionary keys\n\nThese keys may exist in the user info dictionary, in addition to those defined for NSError.\n\n- `NSString * const __FWNetworkingOperationFailingURLResponseErrorKey`\n- `NSString * const __FWNetworkingOperationFailingURLResponseDataErrorKey`\n\n### Constants\n\n`__FWNetworkingOperationFailingURLResponseErrorKey`\nThe corresponding value is an `NSURLResponse` containing the response of the operation associated with an error. This key is only present in the `__FWURLResponseSerializationErrorDomain`.\n\n`__FWNetworkingOperationFailingURLResponseDataErrorKey`\nThe corresponding value is an `NSData` containing the original data of the operation associated with an error. This key is only present in the `__FWURLResponseSerializationErrorDomain`.",
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 300,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingOperationFailingURLResponseErrorKey",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingOperationFailingURLResponseErrorKey)\n    NSString *const __FWNetworkingOperationFailingURLResponseErrorKey",
          "key.parsed_scope.end" : 300,
          "key.parsed_scope.start" : 300,
          "key.swift_declaration" : "let NetworkingOperationFailingURLResponseErrorKey: String",
          "key.swift_name" : "NetworkingOperationFailingURLResponseErrorKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingOperationFailingURLResponseErrorKey"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.file" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.doc.line" : 302,
          "key.filepath" : "docs\/FWFramework\/URLResponseSerialization.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingOperationFailingURLResponseDataErrorKey",
          "key.parsed_declaration" : "FOUNDATION_EXPORT NSString * const __FWNetworkingOperationFailingURLResponseDataErrorKey",
          "key.parsed_scope.end" : 302,
          "key.parsed_scope.start" : 302,
          "key.swift_declaration" : "let NetworkingOperationFailingURLResponseDataErrorKey: String",
          "key.swift_name" : "NetworkingOperationFailingURLResponseDataErrorKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingOperationFailingURLResponseDataErrorKey"
        }
      ]
    }
  },
  {
    "docs\/FWFramework\/URLSessionManager.h" : {
      "key.diagnostic_stage" : "",
      "key.substructure" : [
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 12,
          "key.doc.comment" : "`__FWURLSessionManager` creates and manages an `NSURLSession` object based on a specified `NSURLSessionConfiguration` object, which conforms to `<NSURLSessionTaskDelegate>`, `<NSURLSessionDataDelegate>`, `<NSURLSessionDownloadDelegate>`, and `<NSURLSessionDelegate>`.\n\n## Subclassing Notes\n\nThis is the base class for `__FWHTTPSessionManager`, which adds functionality specific to making HTTP requests. If you are looking to extend `__FWURLSessionManager` specifically for HTTP, consider subclassing `__FWHTTPSessionManager` instead.\n\n## NSURLSession & NSURLSessionTask Delegate Methods\n\n`__FWURLSessionManager` implements the following delegate methods:\n\n### `NSURLSessionDelegate`\n\n- `URLSession:didBecomeInvalidWithError:`\n- `URLSession:didReceiveChallenge:completionHandler:`\n- `URLSessionDidFinishEventsForBackgroundURLSession:`\n\n### `NSURLSessionTaskDelegate`\n\n- `URLSession:willPerformHTTPRedirection:newRequest:completionHandler:`\n- `URLSession:task:didReceiveChallenge:completionHandler:`\n- `URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:`\n- `URLSession:task:needNewBodyStream:`\n- `URLSession:task:didCompleteWithError:`\n\n### `NSURLSessionDataDelegate`\n\n- `URLSession:dataTask:didReceiveResponse:completionHandler:`\n- `URLSession:dataTask:didBecomeDownloadTask:`\n- `URLSession:dataTask:didReceiveData:`\n- `URLSession:dataTask:willCacheResponse:completionHandler:`\n\n### `NSURLSessionDownloadDelegate`\n\n- `URLSession:downloadTask:didFinishDownloadingToURL:`\n- `URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:`\n- `URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:`\n\nIf any of these methods are overridden in a subclass, they _must_ call the `super` implementation first.\n\n## NSCoding Caveats\n\n- Encoded managers do not include any block properties. Be sure to set delegate callback blocks when using `-initWithCoder:` or `NSKeyedUnarchiver`.\n\n## NSCopying Caveats\n\n- `-copy` and `-copyWithZone:` return a new manager with a new `NSURLSession` created from the configuration of the original.\n- Operation copies do not include any delegate callback blocks, as they often strongly captures a reference to `self`, which would otherwise have the unintuitive side-effect of pointing to the _original_ session manager when copied.\n\n- warning: Managers for background sessions must be owned for the duration of their use. This can be accomplished by creating an application-wide or shared singleton instance.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 84,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.name" : "__FWURLSessionManager",
          "key.parsed_declaration" : "\n@interface __FWURLSessionManager\n    : NSObject <NSURLSessionDelegate, NSURLSessionTaskDelegate,\n                NSURLSessionDataDelegate, NSURLSessionDownloadDelegate,\n                NSSecureCoding, NSCopying>",
          "key.parsed_scope.end" : 440,
          "key.parsed_scope.start" : 84,
          "key.substructure" : [
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 55,
              "key.doc.comment" : "The managed session.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 89,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "session",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly) NSURLSession *_Nonnull session;",
              "key.parsed_scope.end" : 89,
              "key.parsed_scope.start" : 89,
              "key.swift_declaration" : "var session: URLSession { get }",
              "key.swift_name" : "session",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)session"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 59,
              "key.doc.comment" : "The operation queue on which delegate callbacks are run.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 94,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "operationQueue",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly)\n    NSOperationQueue *_Nonnull operationQueue;",
              "key.parsed_scope.end" : 94,
              "key.parsed_scope.start" : 94,
              "key.swift_declaration" : "var operationQueue: OperationQueue { get }",
              "key.swift_name" : "operationQueue",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)operationQueue"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 65,
              "key.doc.comment" : "Responses sent from the server in data tasks created with `dataTaskWithRequest:success:failure:` and run using the `GET` \/ `POST` \/ et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to an instance of `__FWJSONResponseSerializer`.\n\n- warning: `responseSerializer` must not be `nil`.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 101,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "responseSerializer",
              "key.parsed_declaration" : "@property (nonatomic, strong, readwrite)\n    id<__FWURLResponseSerialization> _Nonnull responseSerializer;",
              "key.parsed_scope.end" : 101,
              "key.parsed_scope.start" : 101,
              "key.swift_declaration" : "var responseSerializer: URLResponseSerialization { get set }",
              "key.swift_name" : "responseSerializer",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)responseSerializer"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 104,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Managing Security Policy",
              "key.parsed_scope.end" : 104,
              "key.parsed_scope.start" : 104
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 51,
              "key.doc.comment" : "The security policy used by created session to evaluate server trust for secure connections. `__FWURLSessionManager` uses the `defaultPolicy` unless otherwise specified.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 110,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "securityPolicy",
              "key.parsed_declaration" : "@property (nonatomic, strong, readwrite)\n    __FWSecurityPolicy *_Nonnull securityPolicy;",
              "key.parsed_scope.end" : 110,
              "key.parsed_scope.start" : 110,
              "key.swift_declaration" : "var securityPolicy: SecurityPolicy { get set }",
              "key.swift_name" : "securityPolicy",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)securityPolicy"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 113,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Getting Session Tasks",
              "key.parsed_scope.end" : 113,
              "key.parsed_scope.start" : 113
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 71,
              "key.doc.comment" : "The data, upload, and download tasks currently run by the managed session.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 119,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "tasks",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly)\n    NSArray<NSURLSessionTask *> *_Nonnull tasks;",
              "key.parsed_scope.end" : 119,
              "key.parsed_scope.start" : 119,
              "key.swift_declaration" : "var tasks: [URLSessionTask] { get }",
              "key.swift_name" : "tasks",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)tasks"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 75,
              "key.doc.comment" : "The data tasks currently run by the managed session.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 124,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "dataTasks",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly)\n    NSArray<NSURLSessionDataTask *> *_Nonnull dataTasks;",
              "key.parsed_scope.end" : 124,
              "key.parsed_scope.start" : 124,
              "key.swift_declaration" : "var dataTasks: [URLSessionDataTask] { get }",
              "key.swift_name" : "dataTasks",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)dataTasks"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 77,
              "key.doc.comment" : "The upload tasks currently run by the managed session.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 129,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "uploadTasks",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly)\n    NSArray<NSURLSessionUploadTask *> *_Nonnull uploadTasks;",
              "key.parsed_scope.end" : 129,
              "key.parsed_scope.start" : 129,
              "key.swift_declaration" : "var uploadTasks: [URLSessionUploadTask] { get }",
              "key.swift_name" : "uploadTasks",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)uploadTasks"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 79,
              "key.doc.comment" : "The download tasks currently run by the managed session.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 134,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "downloadTasks",
              "key.parsed_declaration" : "@property (nonatomic, strong, readonly)\n    NSArray<NSURLSessionDownloadTask *> *_Nonnull downloadTasks;",
              "key.parsed_scope.end" : 134,
              "key.parsed_scope.start" : 134,
              "key.swift_declaration" : "var downloadTasks: [URLSessionDownloadTask] { get }",
              "key.swift_name" : "downloadTasks",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)downloadTasks"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 137,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Managing Callback Queues",
              "key.parsed_scope.end" : 137,
              "key.parsed_scope.start" : 137
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 58,
              "key.doc.comment" : "The dispatch queue for `completionBlock`. If `NULL` (default), the main queue is used.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 143,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "completionQueue",
              "key.parsed_declaration" : "@property (nonatomic, strong, readwrite, nullable)\n    dispatch_queue_t completionQueue;",
              "key.parsed_scope.end" : 143,
              "key.parsed_scope.start" : 143,
              "key.swift_declaration" : "var completionQueue: dispatch_queue_t? { get set }",
              "key.swift_name" : "completionQueue",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)completionQueue"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 58,
              "key.doc.comment" : "The dispatch group for `completionBlock`. If `NULL` (default), a private dispatch group is used.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 148,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.name" : "completionGroup",
              "key.parsed_declaration" : "@property (nonatomic, strong, readwrite, nullable)\n    dispatch_group_t completionGroup;",
              "key.parsed_scope.end" : 148,
              "key.parsed_scope.start" : 148,
              "key.swift_declaration" : "var completionGroup: dispatch_group_t? { get set }",
              "key.swift_name" : "completionGroup",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(py)completionGroup"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 151,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Initialization",
              "key.parsed_scope.end" : 151,
              "key.parsed_scope.start" : 151
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 17,
              "key.doc.comment" : "Creates and returns a manager for a session created with the specified configuration. This is the designated initializer.\n\n- parameter: configuration The configuration used to create the managed session.\n\n- returns: A manager for a newly-created session.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 161,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The configuration used to create the managed session."
                    }
                  ],
                  "name" : "configuration"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "A manager for a newly-created session."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-initWithSessionConfiguration:",
              "key.parsed_declaration" : "- (nonnull instancetype)initWithSessionConfiguration:\n    (nullable NSURLSessionConfiguration *)configuration;",
              "key.parsed_scope.end" : 161,
              "key.parsed_scope.start" : 161,
              "key.swift_declaration" : "init(sessionConfiguration configuration: URLSessionConfiguration?)",
              "key.swift_name" : "init(sessionConfiguration:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)initWithSessionConfiguration:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Invalidates the managed session, optionally canceling pending tasks and optionally resets given session.\n\n- parameter: cancelPendingTasks  Whether or not to cancel pending tasks.\n- parameter: resetSession        Whether or not to reset the session of the manager.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 169,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "Whether or not to cancel pending tasks.\n "
                    }
                  ],
                  "name" : "cancelPendingTasks"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "Whether or not to reset the session of the manager."
                    }
                  ],
                  "name" : "resetSession"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-invalidateSessionCancelingTasks:resetSession:",
              "key.parsed_declaration" : "- (void)invalidateSessionCancelingTasks:(BOOL)cancelPendingTasks\n                           resetSession:(BOOL)resetSession;",
              "key.parsed_scope.end" : 169,
              "key.parsed_scope.start" : 169,
              "key.swift_declaration" : "func invalidateSessionCancelingTasks(_ cancelPendingTasks: Bool, resetSession: Bool)",
              "key.swift_name" : "invalidateSessionCancelingTasks(_:resetSession:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)invalidateSessionCancelingTasks:resetSession:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 172,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Running Data Tasks",
              "key.parsed_scope.end" : 172,
              "key.parsed_scope.start" : 172
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 27,
              "key.doc.comment" : "Creates an `NSURLSessionDataTask` with the specified request.\n\n- parameter: request The HTTP request for the request.\n- parameter: uploadProgressBlock A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: downloadProgressBlock A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 183,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP request for the request.\n"
                    }
                  ],
                  "name" : "request"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "uploadProgressBlock"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "downloadProgressBlock"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any."
                    }
                  ],
                  "name" : "completionHandler"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:",
              "key.parsed_declaration" : "- (nonnull NSURLSessionDataTask *)\n    dataTaskWithRequest:(nonnull NSURLRequest *)request\n         uploadProgress:(nullable void (^)(NSProgress *_Nonnull __strong))\n                            uploadProgressBlock\n       downloadProgress:(nullable void (^)(NSProgress *_Nonnull __strong))\n                            downloadProgressBlock\n      completionHandler:\n          (nullable void (^)(NSURLResponse *_Nonnull __strong,\n                             id _Nullable __strong,\n                             NSError *_Nullable __strong))completionHandler;",
              "key.parsed_scope.end" : 186,
              "key.parsed_scope.start" : 183,
              "key.swift_declaration" : "func dataTask(with request: URLRequest, uploadProgress uploadProgressBlock: ((Progress) -> Void)?, downloadProgress downloadProgressBlock: ((Progress) -> Void)?, completionHandler: ((URLResponse, Any?, Error?) -> Void)? = nil) -> URLSessionDataTask",
              "key.swift_name" : "dataTask(with:uploadProgress:downloadProgress:completionHandler:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 189,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Running Upload Tasks",
              "key.parsed_scope.end" : 189,
              "key.parsed_scope.start" : 189
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 29,
              "key.doc.comment" : "Creates an `NSURLSessionUploadTask` with the specified request for a local file.\n\n- parameter: request The HTTP request for the request.\n- parameter: fileURL A URL to the local file to be uploaded.\n- parameter: uploadProgressBlock A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.\n\n- see: `attemptsToRecreateUploadTasksForBackgroundSessions`",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 202,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP request for the request.\n"
                    }
                  ],
                  "name" : "request"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A URL to the local file to be uploaded.\n"
                    }
                  ],
                  "name" : "fileURL"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "uploadProgressBlock"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any."
                    }
                  ],
                  "name" : "completionHandler"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-uploadTaskWithRequest:fromFile:progress:completionHandler:",
              "key.parsed_declaration" : "- (nonnull NSURLSessionUploadTask *)\n    uploadTaskWithRequest:(nonnull NSURLRequest *)request\n                 fromFile:(nonnull NSURL *)fileURL\n                 progress:(nullable void (^)(NSProgress *_Nonnull __strong))\n                              uploadProgressBlock\n        completionHandler:\n            (nullable void (^)(NSURLResponse *_Nonnull __strong,\n                               id _Nullable __strong,\n                               NSError *_Nullable __strong))completionHandler;",
              "key.parsed_scope.end" : 205,
              "key.parsed_scope.start" : 202,
              "key.swift_declaration" : "func uploadTask(with request: URLRequest, fromFile fileURL: URL, progress uploadProgressBlock: ((Progress) -> Void)?, completionHandler: ((URLResponse, Any?, Error?) -> Void)? = nil) -> URLSessionUploadTask",
              "key.swift_name" : "uploadTask(with:fromFile:progress:completionHandler:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)uploadTaskWithRequest:fromFile:progress:completionHandler:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 29,
              "key.doc.comment" : "Creates an `NSURLSessionUploadTask` with the specified request for an HTTP body.\n\n- parameter: request The HTTP request for the request.\n- parameter: bodyData A data object containing the HTTP body to be uploaded.\n- parameter: uploadProgressBlock A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 215,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP request for the request.\n"
                    }
                  ],
                  "name" : "request"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A data object containing the HTTP body to be uploaded.\n"
                    }
                  ],
                  "name" : "bodyData"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "uploadProgressBlock"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any."
                    }
                  ],
                  "name" : "completionHandler"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-uploadTaskWithRequest:fromData:progress:completionHandler:",
              "key.parsed_declaration" : "- (nonnull NSURLSessionUploadTask *)\n    uploadTaskWithRequest:(nonnull NSURLRequest *)request\n                 fromData:(nullable NSData *)bodyData\n                 progress:(nullable void (^)(NSProgress *_Nonnull __strong))\n                              uploadProgressBlock\n        completionHandler:\n            (nullable void (^)(NSURLResponse *_Nonnull __strong,\n                               id _Nullable __strong,\n                               NSError *_Nullable __strong))completionHandler;",
              "key.parsed_scope.end" : 218,
              "key.parsed_scope.start" : 215,
              "key.swift_declaration" : "func uploadTask(with request: URLRequest, from bodyData: Data?, progress uploadProgressBlock: ((Progress) -> Void)?, completionHandler: ((URLResponse, Any?, Error?) -> Void)? = nil) -> URLSessionUploadTask",
              "key.swift_name" : "uploadTask(with:from:progress:completionHandler:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)uploadTaskWithRequest:fromData:progress:completionHandler:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 29,
              "key.doc.comment" : "Creates an `NSURLSessionUploadTask` with the specified streaming request.\n\n- parameter: request The HTTP request for the request.\n- parameter: uploadProgressBlock A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 227,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP request for the request.\n"
                    }
                  ],
                  "name" : "request"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "uploadProgressBlock"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any."
                    }
                  ],
                  "name" : "completionHandler"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-uploadTaskWithStreamedRequest:progress:completionHandler:",
              "key.parsed_declaration" : "- (nonnull NSURLSessionUploadTask *)\n    uploadTaskWithStreamedRequest:(nonnull NSURLRequest *)request\n                         progress:\n                             (nullable void (^)(NSProgress *_Nonnull __strong))\n                                 uploadProgressBlock\n                completionHandler:\n                    (nullable void (^)(\n                        NSURLResponse *_Nonnull __strong, id _Nullable __strong,\n                        NSError *_Nullable __strong))completionHandler;",
              "key.parsed_scope.end" : 229,
              "key.parsed_scope.start" : 227,
              "key.swift_declaration" : "func uploadTask(withStreamedRequest request: URLRequest, progress uploadProgressBlock: ((Progress) -> Void)?, completionHandler: ((URLResponse, Any?, Error?) -> Void)? = nil) -> URLSessionUploadTask",
              "key.swift_name" : "uploadTask(withStreamedRequest:progress:completionHandler:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)uploadTaskWithStreamedRequest:progress:completionHandler:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 232,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Running Download Tasks",
              "key.parsed_scope.end" : 232,
              "key.parsed_scope.start" : 232
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 31,
              "key.doc.comment" : "Creates an `NSURLSessionDownloadTask` with the specified request.\n\n- parameter: request The HTTP request for the request.\n- parameter: downloadProgressBlock A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: destination A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path & the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.\n- parameter: completionHandler A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any.\n\n- warning: If using a background `NSURLSessionConfiguration` on iOS, these blocks will be lost when the app is terminated. Background sessions may prefer to use `-setDownloadTaskDidFinishDownloadingBlock:` to specify the URL for saving the downloaded file, rather than the destination block of this method.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 245,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The HTTP request for the request.\n"
                    }
                  ],
                  "name" : "request"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "downloadProgressBlock"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : " A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path \n&\n the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.\n "
                    }
                  ],
                  "name" : "destination"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any."
                    }
                  ],
                  "name" : "completionHandler"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-downloadTaskWithRequest:progress:destination:completionHandler:",
              "key.parsed_declaration" : "- (nonnull NSURLSessionDownloadTask *)\n    downloadTaskWithRequest:(nonnull NSURLRequest *)request\n                   progress:(nullable void (^)(NSProgress *_Nonnull __strong))\n                                downloadProgressBlock\n                destination:(nullable NSURL *_Nonnull (^)(\n                                NSURL *_Nonnull __strong,\n                                NSURLResponse *_Nonnull __strong))destination\n          completionHandler:\n              (nullable void (^)(NSURLResponse *_Nonnull __strong,\n                                 NSURL *_Nullable __strong,\n                                 NSError *_Nullable __strong))completionHandler;",
              "key.parsed_scope.end" : 248,
              "key.parsed_scope.start" : 245,
              "key.swift_declaration" : "func downloadTask(with request: URLRequest, progress downloadProgressBlock: ((Progress) -> Void)?, destination: ((URL, URLResponse) -> URL)?, completionHandler: ((URLResponse, URL?, Error?) -> Void)? = nil) -> URLSessionDownloadTask",
              "key.swift_name" : "downloadTask(with:progress:destination:completionHandler:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)downloadTaskWithRequest:progress:destination:completionHandler:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 31,
              "key.doc.comment" : "Creates an `NSURLSessionDownloadTask` with the specified resume data.\n\n- parameter: resumeData The data used to resume downloading.\n- parameter: downloadProgressBlock A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n- parameter: destination A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path & the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.\n- parameter: completionHandler A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 258,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The data used to resume downloading.\n"
                    }
                  ],
                  "name" : "resumeData"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.\n"
                    }
                  ],
                  "name" : "downloadProgressBlock"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : " A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path \n&\n the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.\n "
                    }
                  ],
                  "name" : "destination"
                },
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any."
                    }
                  ],
                  "name" : "completionHandler"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-downloadTaskWithResumeData:progress:destination:completionHandler:",
              "key.parsed_declaration" : "- (nonnull NSURLSessionDownloadTask *)\n    downloadTaskWithResumeData:(nonnull NSData *)resumeData\n                      progress:\n                          (nullable void (^)(NSProgress *_Nonnull __strong))\n                              downloadProgressBlock\n                   destination:(nullable NSURL *_Nonnull (^)(\n                                   NSURL *_Nonnull __strong,\n                                   NSURLResponse *_Nonnull __strong))destination\n             completionHandler:\n                 (nullable void (^)(NSURLResponse *_Nonnull __strong,\n                                    NSURL *_Nullable __strong,\n                                    NSError *_Nullable __strong))\n                     completionHandler;",
              "key.parsed_scope.end" : 261,
              "key.parsed_scope.start" : 258,
              "key.swift_declaration" : "func downloadTask(withResumeData resumeData: Data, progress downloadProgressBlock: ((Progress) -> Void)?, destination: ((URL, URLResponse) -> URL)?, completionHandler: ((URLResponse, URL?, Error?) -> Void)? = nil) -> URLSessionDownloadTask",
              "key.swift_name" : "downloadTask(withResumeData:progress:destination:completionHandler:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)downloadTaskWithResumeData:progress:destination:completionHandler:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 264,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Getting Progress for Tasks",
              "key.parsed_scope.end" : 264,
              "key.parsed_scope.start" : 264
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 26,
              "key.doc.comment" : "Returns the upload progress of the specified task.\n\n- parameter: task The session task. Must not be `nil`.\n\n- returns: An `NSProgress` object reporting the upload progress of a task, or `nil` if the progress is unavailable.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 274,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The session task. Must not be `nil`."
                    }
                  ],
                  "name" : "task"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "An `NSProgress` object reporting the upload progress of a task, or `nil` if the progress is unavailable."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-uploadProgressForTask:",
              "key.parsed_declaration" : "- (nullable NSProgress *)uploadProgressForTask:(nonnull NSURLSessionTask *)task;",
              "key.parsed_scope.end" : 274,
              "key.parsed_scope.start" : 274,
              "key.swift_declaration" : "func uploadProgress(for task: URLSessionTask) -> Progress?",
              "key.swift_name" : "uploadProgress(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)uploadProgressForTask:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 26,
              "key.doc.comment" : "Returns the download progress of the specified task.\n\n- parameter: task The session task. Must not be `nil`.\n\n- returns: An `NSProgress` object reporting the download progress of a task, or `nil` if the progress is unavailable.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 283,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "The session task. Must not be `nil`."
                    }
                  ],
                  "name" : "task"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "kind" : "",
                  "Para" : "An `NSProgress` object reporting the download progress of a task, or `nil` if the progress is unavailable."
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-downloadProgressForTask:",
              "key.parsed_declaration" : "- (nullable NSProgress *)downloadProgressForTask:\n    (nonnull NSURLSessionTask *)task;",
              "key.parsed_scope.end" : 283,
              "key.parsed_scope.start" : 283,
              "key.swift_declaration" : "func downloadProgress(for task: URLSessionTask) -> Progress?",
              "key.swift_name" : "downloadProgress(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)downloadProgressForTask:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a user info to be used for the specified task.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 288,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setUserInfo:forTask:",
              "key.parsed_declaration" : "- (void)setUserInfo:(nullable NSDictionary *)userInfo\n            forTask:(nonnull NSURLSessionTask *)task;",
              "key.parsed_scope.end" : 288,
              "key.parsed_scope.start" : 288,
              "key.swift_declaration" : "func setUserInfo(_ userInfo: [AnyHashable : Any]?, for task: URLSessionTask)",
              "key.swift_name" : "setUserInfo(_:for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setUserInfo:forTask:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 28,
              "key.doc.comment" : "Returns the user info of the specified task.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 293,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-userInfoForTask:",
              "key.parsed_declaration" : "- (nullable NSDictionary *)userInfoForTask:(nonnull NSURLSessionTask *)task;",
              "key.parsed_scope.end" : 293,
              "key.parsed_scope.start" : 293,
              "key.swift_declaration" : "func userInfo(for task: URLSessionTask) -> [AnyHashable : Any]?",
              "key.swift_name" : "userInfo(for:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)userInfoForTask:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 296,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Setting Session Delegate Callbacks",
              "key.parsed_scope.end" : 296,
              "key.parsed_scope.start" : 296
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when the managed session becomes invalid, as handled by the `NSURLSessionDelegate` method `URLSession:didBecomeInvalidWithError:`.\n\n- parameter: block A block object to be executed when the managed session becomes invalid. The block has no return value, and takes two arguments: the session, and the error related to the cause of invalidation.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 304,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when the managed session becomes invalid. The block has no return value, and takes two arguments: the session, and the error related to the cause of invalidation."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setSessionDidBecomeInvalidBlock:",
              "key.parsed_declaration" : "- (void)setSessionDidBecomeInvalidBlock:\n    (nullable void (^)(NSURLSession *_Nonnull __strong,\n                       NSError *_Nonnull __strong))block;",
              "key.parsed_scope.end" : 304,
              "key.parsed_scope.start" : 304,
              "key.swift_declaration" : "func setSessionDidBecomeInvalidBlock(_ block: ((URLSession, Error) -> Void)?)",
              "key.swift_name" : "setSessionDidBecomeInvalidBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setSessionDidBecomeInvalidBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when a connection level authentication challenge has occurred, as handled by the `NSURLSessionDelegate` method `URLSession:didReceiveChallenge:completionHandler:`.\n\n- parameter: block A block object to be executed when a connection level authentication challenge has occurred. The block returns the disposition of the authentication challenge, and takes three arguments: the session, the authentication challenge, and a pointer to the credential that should be used to resolve the challenge.\n\n- warning: Implementing a session authentication challenge handler yourself totally bypasses FWNetworking's security policy defined in `__FWSecurityPolicy`. Make sure you fully understand the implications before implementing a custom session authentication challenge handler. If you do not want to bypass FWNetworking's security policy, use `-setAuthenticationChallengeHandler:` instead.\n\n- see: -securityPolicy\n- see: -setAuthenticationChallengeHandler:",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 316,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when a connection level authentication challenge has occurred. The block returns the disposition of the authentication challenge, and takes three arguments: the session, the authentication challenge, and a pointer to the credential that should be used to resolve the challenge."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setSessionDidReceiveAuthenticationChallengeBlock:",
              "key.parsed_declaration" : "- (void)setSessionDidReceiveAuthenticationChallengeBlock:\n    (nullable NSURLSessionAuthChallengeDisposition (^)(\n        NSURLSession *_Nonnull __strong,\n        NSURLAuthenticationChallenge *_Nonnull __strong,\n        NSURLCredential *_Nullable __autoreleasing *_Nullable))block;",
              "key.parsed_scope.end" : 316,
              "key.parsed_scope.start" : 316,
              "key.swift_declaration" : "func setSessionDidReceiveAuthenticationChallenge(_ block: ((URLSession, URLAuthenticationChallenge, AutoreleasingUnsafeMutablePointer<URLCredential?>?) -> URLSession.AuthChallengeDisposition)?)",
              "key.swift_name" : "setSessionDidReceiveAuthenticationChallenge(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setSessionDidReceiveAuthenticationChallengeBlock:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 319,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Setting Task Delegate Callbacks",
              "key.parsed_scope.end" : 319,
              "key.parsed_scope.start" : 319
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when a task requires a new request body stream to send to the remote server, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:needNewBodyStream:`.\n\n- parameter: block A block object to be executed when a task requires a new request body stream.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 327,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when a task requires a new request body stream."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setTaskNeedNewBodyStreamBlock:",
              "key.parsed_declaration" : "- (void)setTaskNeedNewBodyStreamBlock:\n    (nullable NSInputStream *_Nonnull (^)(NSURLSession *_Nonnull __strong,\n                                          NSURLSessionTask *_Nonnull __strong))\n        block;",
              "key.parsed_scope.end" : 327,
              "key.parsed_scope.start" : 327,
              "key.swift_declaration" : "func setTaskNeedNewBodyStreamBlock(_ block: ((URLSession, URLSessionTask) -> InputStream)?)",
              "key.swift_name" : "setTaskNeedNewBodyStreamBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setTaskNeedNewBodyStreamBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when an HTTP request is attempting to perform a redirection to a different URL, as handled by the `NSURLSessionTaskDelegate` method `URLSession:willPerformHTTPRedirection:newRequest:completionHandler:`.\n\n- parameter: block A block object to be executed when an HTTP request is attempting to perform a redirection to a different URL. The block returns the request to be made for the redirection, and takes four arguments: the session, the task, the redirection response, and the request corresponding to the redirection response.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 334,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when an HTTP request is attempting to perform a redirection to a different URL. The block returns the request to be made for the redirection, and takes four arguments: the session, the task, the redirection response, and the request corresponding to the redirection response."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setTaskWillPerformHTTPRedirectionBlock:",
              "key.parsed_declaration" : "- (void)setTaskWillPerformHTTPRedirectionBlock:\n    (nullable NSURLRequest *_Nullable (^)(\n        NSURLSession *_Nonnull __strong, NSURLSessionTask *_Nonnull __strong,\n        NSURLResponse *_Nonnull __strong,\n        NSURLRequest *_Nonnull __strong))block;",
              "key.parsed_scope.end" : 334,
              "key.parsed_scope.start" : 334,
              "key.swift_declaration" : "func setTaskWillPerformHTTPRedirectionBlock(_ block: ((URLSession, URLSessionTask, URLResponse, URLRequest) -> URLRequest?)?)",
              "key.swift_name" : "setTaskWillPerformHTTPRedirectionBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setTaskWillPerformHTTPRedirectionBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when a session task has received a request specific authentication challenge, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didReceiveChallenge:completionHandler:`.\n\n- parameter: authenticationChallengeHandler A block object to be executed when a session task has received a request specific authentication challenge.\n\nWhen implementing an authentication challenge handler, you should check the authentication method first (`challenge.protectionSpace.authenticationMethod `) to decide if you want to handle the authentication challenge yourself or if you want FWNetworking to handle it. If you want FWNetworking to handle the authentication challenge, just return `@(NSURLSessionAuthChallengePerformDefaultHandling)`. For example, you certainly want FWNetworking to handle certificate validation (i.e. authentication method == `NSURLAuthenticationMethodServerTrust`) as defined by the security policy. If you want to handle the challenge yourself, you have four options:\n\n1. Return `nil` from the authentication challenge handler. You **MUST** call the completion handler with a disposition and credentials yourself. Use this if you need to present a user interface to let the user enter their credentials.\n2. Return an `NSError` object from the authentication challenge handler. You **MUST NOT** call the completion handler when returning an `NSError `. The returned error will be reported in the completion handler of the task. Use this if you need to abort an authentication challenge with a specific error.\n3. Return an `NSURLCredential` object from the authentication challenge handler. You **MUST NOT** call the completion handler when returning an `NSURLCredential`. The returned credentials will be used to fulfil the challenge. Use this when you can get credentials without presenting a user interface.\n4. Return an `NSNumber` object wrapping an `NSURLSessionAuthChallengeDisposition`. Supported values are `@(NSURLSessionAuthChallengePerformDefaultHandling)`, `@(NSURLSessionAuthChallengeCancelAuthenticationChallenge)` and `@(NSURLSessionAuthChallengeRejectProtectionSpace)`. You **MUST NOT** call the completion handler when returning an `NSNumber`.\n\nIf you return anything else from the authentication challenge handler, an exception will be thrown.\n\nFor more information about how URL sessions handle the different types of authentication challenges, see [NSURLSession](https:\/\/developer.apple.com\/reference\/foundation\/nsurlsession?language=objc) and [URL Session Programming Guide](https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/URLLoadingSystem\/URLLoadingSystem.html).\n\n- see: -securityPolicy",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 354,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when a session task has received a request specific authentication challenge."
                    }
                  ],
                  "name" : "authenticationChallengeHandler"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setAuthenticationChallengeHandler:",
              "key.parsed_declaration" : "- (void)setAuthenticationChallengeHandler:\n    (nonnull id _Nonnull (^)(\n        NSURLSession *_Nonnull __strong, NSURLSessionTask *_Nonnull __strong,\n        NSURLAuthenticationChallenge *_Nonnull __strong,\n        void (^_Nonnull __strong)(NSURLSessionAuthChallengeDisposition,\n                                  NSURLCredential *_Nullable __strong)))\n        authenticationChallengeHandler;",
              "key.parsed_scope.end" : 354,
              "key.parsed_scope.start" : 354,
              "key.swift_declaration" : "func setAuthenticationChallengeHandler(_ authenticationChallengeHandler: @escaping (URLSession, URLSessionTask, URLAuthenticationChallenge, @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Any)",
              "key.swift_name" : "setAuthenticationChallengeHandler(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setAuthenticationChallengeHandler:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed periodically to track upload progress, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:`.\n\n- parameter: block A block object to be called when an undetermined number of bytes have been uploaded to the server. This block has no return value and takes five arguments: the session, the task, the number of bytes written since the last time the upload progress block was called, the total bytes written, and the total bytes expected to be written during the request, as initially determined by the length of the HTTP body. This block may be called multiple times, and will execute on the main thread.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 361,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be called when an undetermined number of bytes have been uploaded to the server. This block has no return value and takes five arguments: the session, the task, the number of bytes written since the last time the upload progress block was called, the total bytes written, and the total bytes expected to be written during the request, as initially determined by the length of the HTTP body. This block may be called multiple times, and will execute on the main thread."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setTaskDidSendBodyDataBlock:",
              "key.parsed_declaration" : "- (void)setTaskDidSendBodyDataBlock:\n    (nullable void (^)(NSURLSession *_Nonnull __strong,\n                       NSURLSessionTask *_Nonnull __strong, int64_t, int64_t,\n                       int64_t))block;",
              "key.parsed_scope.end" : 361,
              "key.parsed_scope.start" : 361,
              "key.swift_declaration" : "func setTaskDidSendBodyDataBlock(_ block: ((URLSession, URLSessionTask, Int64, Int64, Int64) -> Void)?)",
              "key.swift_name" : "setTaskDidSendBodyDataBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setTaskDidSendBodyDataBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed as the last message related to a specific task, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didCompleteWithError:`.\n\n- parameter: block A block object to be executed when a session task is completed. The block has no return value, and takes three arguments: the session, the task, and any error that occurred in the process of executing the task.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 368,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when a session task is completed. The block has no return value, and takes three arguments: the session, the task, and any error that occurred in the process of executing the task."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setTaskDidCompleteBlock:",
              "key.parsed_declaration" : "- (void)setTaskDidCompleteBlock:\n    (nullable void (^)(NSURLSession *_Nonnull __strong,\n                       NSURLSessionTask *_Nonnull __strong,\n                       NSError *_Nullable __strong))block;",
              "key.parsed_scope.end" : 368,
              "key.parsed_scope.start" : 368,
              "key.swift_declaration" : "func setTaskDidComplete(_ block: ((URLSession, URLSessionTask, Error?) -> Void)?)",
              "key.swift_name" : "setTaskDidComplete(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setTaskDidCompleteBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when metrics are finalized related to a specific task, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didFinishCollectingMetrics:`.\n\n- parameter: block A block object to be executed when a session task is completed. The block has no return value, and takes three arguments: the session, the task, and any metrics that were collected in the process of executing the task.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 375,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when a session task is completed. The block has no return value, and takes three arguments: the session, the task, and any metrics that were collected in the process of executing the task."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setTaskDidFinishCollectingMetricsBlock:",
              "key.parsed_declaration" : "- (void)setTaskDidFinishCollectingMetricsBlock:\n    (nullable void (^)(NSURLSession *_Nonnull __strong,\n                       NSURLSessionTask *_Nonnull __strong,\n                       NSURLSessionTaskMetrics *_Nullable __strong))block;",
              "key.parsed_scope.end" : 375,
              "key.parsed_scope.start" : 375,
              "key.swift_declaration" : "func setTaskDidFinishCollectingMetricsBlock(_ block: ((URLSession, URLSessionTask, URLSessionTaskMetrics?) -> Void)?)",
              "key.swift_name" : "setTaskDidFinishCollectingMetricsBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setTaskDidFinishCollectingMetricsBlock:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 377,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Setting Data Task Delegate Callbacks",
              "key.parsed_scope.end" : 377,
              "key.parsed_scope.start" : 377
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when a data task has received a response, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:didReceiveResponse:completionHandler:`.\n\n- parameter: block A block object to be executed when a data task has received a response. The block returns the disposition of the session response, and takes three arguments: the session, the data task, and the received response.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 385,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when a data task has received a response. The block returns the disposition of the session response, and takes three arguments: the session, the data task, and the received response."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setDataTaskDidReceiveResponseBlock:",
              "key.parsed_declaration" : "- (void)setDataTaskDidReceiveResponseBlock:\n    (nullable NSURLSessionResponseDisposition (^)(\n        NSURLSession *_Nonnull __strong,\n        NSURLSessionDataTask *_Nonnull __strong,\n        NSURLResponse *_Nonnull __strong))block;",
              "key.parsed_scope.end" : 385,
              "key.parsed_scope.start" : 385,
              "key.swift_declaration" : "func setDataTaskDidReceiveResponseBlock(_ block: ((URLSession, URLSessionDataTask, URLResponse) -> URLSession.ResponseDisposition)?)",
              "key.swift_name" : "setDataTaskDidReceiveResponseBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setDataTaskDidReceiveResponseBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when a data task has become a download task, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:didBecomeDownloadTask:`.\n\n- parameter: block A block object to be executed when a data task has become a download task. The block has no return value, and takes three arguments: the session, the data task, and the download task it has become.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 392,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when a data task has become a download task. The block has no return value, and takes three arguments: the session, the data task, and the download task it has become."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setDataTaskDidBecomeDownloadTaskBlock:",
              "key.parsed_declaration" : "- (void)setDataTaskDidBecomeDownloadTaskBlock:\n    (nullable void (^)(NSURLSession *_Nonnull __strong,\n                       NSURLSessionDataTask *_Nonnull __strong,\n                       NSURLSessionDownloadTask *_Nonnull __strong))block;",
              "key.parsed_scope.end" : 392,
              "key.parsed_scope.start" : 392,
              "key.swift_declaration" : "func setDataTaskDidBecomeDownloadTaskBlock(_ block: ((URLSession, URLSessionDataTask, URLSessionDownloadTask) -> Void)?)",
              "key.swift_name" : "setDataTaskDidBecomeDownloadTaskBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setDataTaskDidBecomeDownloadTaskBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when a data task receives data, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:didReceiveData:`.\n\n- parameter: block A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes three arguments: the session, the data task, and the data received. This block may be called multiple times, and will execute on the session manager operation queue.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 399,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes three arguments: the session, the data task, and the data received. This block may be called multiple times, and will execute on the session manager operation queue."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setDataTaskDidReceiveDataBlock:",
              "key.parsed_declaration" : "- (void)setDataTaskDidReceiveDataBlock:\n    (nullable void (^)(NSURLSession *_Nonnull __strong,\n                       NSURLSessionDataTask *_Nonnull __strong,\n                       NSData *_Nonnull __strong))block;",
              "key.parsed_scope.end" : 399,
              "key.parsed_scope.start" : 399,
              "key.swift_declaration" : "func setDataTaskDidReceiveDataBlock(_ block: ((URLSession, URLSessionDataTask, Data) -> Void)?)",
              "key.swift_name" : "setDataTaskDidReceiveDataBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setDataTaskDidReceiveDataBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed to determine the caching behavior of a data task, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:willCacheResponse:completionHandler:`.\n\n- parameter: block A block object to be executed to determine the caching behavior of a data task. The block returns the response to cache, and takes three arguments: the session, the data task, and the proposed cached URL response.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 406,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed to determine the caching behavior of a data task. The block returns the response to cache, and takes three arguments: the session, the data task, and the proposed cached URL response."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setDataTaskWillCacheResponseBlock:",
              "key.parsed_declaration" : "- (void)setDataTaskWillCacheResponseBlock:\n    (nullable NSCachedURLResponse *_Nonnull (^)(\n        NSURLSession *_Nonnull __strong,\n        NSURLSessionDataTask *_Nonnull __strong,\n        NSCachedURLResponse *_Nonnull __strong))block;",
              "key.parsed_scope.end" : 406,
              "key.parsed_scope.start" : 406,
              "key.swift_declaration" : "func setDataTaskWillCacheResponseBlock(_ block: ((URLSession, URLSessionDataTask, CachedURLResponse) -> CachedURLResponse)?)",
              "key.swift_name" : "setDataTaskWillCacheResponseBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setDataTaskWillCacheResponseBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed once all messages enqueued for a session have been delivered, as handled by the `NSURLSessionDataDelegate` method `URLSessionDidFinishEventsForBackgroundURLSession:`.\n\n- parameter: block A block object to be executed once all messages enqueued for a session have been delivered. The block has no return value and takes a single argument: the session.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 413,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed once all messages enqueued for a session have been delivered. The block has no return value and takes a single argument: the session."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setDidFinishEventsForBackgroundURLSessionBlock:",
              "key.parsed_declaration" : "- (void)setDidFinishEventsForBackgroundURLSessionBlock:\n    (nullable void (^)(NSURLSession *_Nonnull __strong))block;",
              "key.parsed_scope.end" : 413,
              "key.parsed_scope.start" : 413,
              "key.swift_declaration" : "func setDidFinishEventsForBackgroundURLSessionBlock(_ block: ((URLSession) -> Void)?)",
              "key.swift_name" : "setDidFinishEventsForBackgroundURLSessionBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setDidFinishEventsForBackgroundURLSessionBlock:"
            },
            {
              "key.doc.column" : 1,
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.line" : 416,
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.mark",
              "key.name" : "Setting Download Task Delegate Callbacks",
              "key.parsed_scope.end" : 416,
              "key.parsed_scope.start" : 416
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when a download task has completed a download, as handled by the `NSURLSessionDownloadDelegate` method `URLSession:downloadTask:didFinishDownloadingToURL:`.\n\n- parameter: block A block object to be executed when a download task has completed. The block returns the URL the download should be moved to, and takes three arguments: the session, the download task, and the temporary location of the downloaded file. If the file manager encounters an error while attempting to move the temporary file to the destination, an `__FWURLSessionDownloadTaskDidFailToMoveFileNotification` will be posted, with the download task as its object, and the user info of the error.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 424,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when a download task has completed. The block returns the URL the download should be moved to, and takes three arguments: the session, the download task, and the temporary location of the downloaded file. If the file manager encounters an error while attempting to move the temporary file to the destination, an `__FWURLSessionDownloadTaskDidFailToMoveFileNotification` will be posted, with the download task as its object, and the user info of the error."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setDownloadTaskDidFinishDownloadingBlock:",
              "key.parsed_declaration" : "- (void)setDownloadTaskDidFinishDownloadingBlock:\n    (nullable NSURL *_Nullable (^)(NSURLSession *_Nonnull __strong,\n                                   NSURLSessionDownloadTask *_Nonnull __strong,\n                                   NSURL *_Nonnull __strong))block;",
              "key.parsed_scope.end" : 424,
              "key.parsed_scope.start" : 424,
              "key.swift_declaration" : "func setDownloadTaskDidFinishDownloadingBlock(_ block: ((URLSession, URLSessionDownloadTask, URL) -> URL?)?)",
              "key.swift_name" : "setDownloadTaskDidFinishDownloadingBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setDownloadTaskDidFinishDownloadingBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed periodically to track download progress, as handled by the `NSURLSessionDownloadDelegate` method `URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:`.\n\n- parameter: block A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes five arguments: the session, the download task, the number of bytes read since the last time the download progress block was called, the total bytes read, and the total bytes expected to be read during the request, as initially determined by the expected content size of the `NSHTTPURLResponse` object. This block may be called multiple times, and will execute on the session manager operation queue.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 431,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes five arguments: the session, the download task, the number of bytes read since the last time the download progress block was called, the total bytes read, and the total bytes expected to be read during the request, as initially determined by the expected content size of the `NSHTTPURLResponse` object. This block may be called multiple times, and will execute on the session manager operation queue."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setDownloadTaskDidWriteDataBlock:",
              "key.parsed_declaration" : "- (void)setDownloadTaskDidWriteDataBlock:\n    (nullable void (^)(NSURLSession *_Nonnull __strong,\n                       NSURLSessionDownloadTask *_Nonnull __strong, int64_t,\n                       int64_t, int64_t))block;",
              "key.parsed_scope.end" : 431,
              "key.parsed_scope.start" : 431,
              "key.swift_declaration" : "func setDownloadTaskDidWriteDataBlock(_ block: ((URLSession, URLSessionDownloadTask, Int64, Int64, Int64) -> Void)?)",
              "key.swift_name" : "setDownloadTaskDidWriteDataBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setDownloadTaskDidWriteDataBlock:"
            },
            {
              "key.always_deprecated" : false,
              "key.always_unavailable" : false,
              "key.deprecation_message" : "",
              "key.doc.column" : 9,
              "key.doc.comment" : "Sets a block to be executed when a download task has been resumed, as handled by the `NSURLSessionDownloadDelegate` method `URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:`.\n\n- parameter: block A block object to be executed when a download task has been resumed. The block has no return value and takes four arguments: the session, the download task, the file offset of the resumed download, and the total number of bytes expected to be downloaded.",
              "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : 438,
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "kind" : "",
                      "Para" : "A block object to be executed when a download task has been resumed. The block has no return value and takes four arguments: the session, the download task, the file offset of the resumed download, and the total number of bytes expected to be downloaded."
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.name" : "-setDownloadTaskDidResumeBlock:",
              "key.parsed_declaration" : "- (void)setDownloadTaskDidResumeBlock:\n    (nullable void (^)(NSURLSession *_Nonnull __strong,\n                       NSURLSessionDownloadTask *_Nonnull __strong, int64_t,\n                       int64_t))block;",
              "key.parsed_scope.end" : 438,
              "key.parsed_scope.start" : 438,
              "key.swift_declaration" : "func setDownloadTaskDidResumeBlock(_ block: ((URLSession, URLSessionDownloadTask, Int64, Int64) -> Void)?)",
              "key.swift_name" : "setDownloadTaskDidResumeBlock(_:)",
              "key.unavailable_message" : "",
              "key.usr" : "c:objc(cs)__FWURLSessionManager(im)setDownloadTaskDidResumeBlock:"
            }
          ],
          "key.swift_declaration" : "class URLSessionManager : NSObject, URLSessionDelegate, URLSessionTaskDelegate, URLSessionDataDelegate, URLSessionDownloadDelegate, NSSecureCoding, NSCopying",
          "key.swift_name" : "URLSessionManager",
          "key.unavailable_message" : "",
          "key.usr" : "c:objc(cs)__FWURLSessionManager"
        },
        {
          "key.doc.column" : 1,
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.line" : 443,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.mark",
          "key.name" : "Notifications",
          "key.parsed_scope.end" : 443,
          "key.parsed_scope.start" : 443
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 44,
          "key.doc.comment" : "Posted when a task resumes.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 449,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingTaskDidResumeNotification",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingTaskDidResumeNotification) const\n    NSNotificationName __FWNetworkingTaskDidResumeNotification",
          "key.parsed_scope.end" : 449,
          "key.parsed_scope.start" : 449,
          "key.swift_declaration" : "static let NetworkingTaskDidResumeNotification: NSNotification.Name",
          "key.swift_name" : "NetworkingTaskDidResumeNotification",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingTaskDidResumeNotification"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 44,
          "key.doc.comment" : "Posted when a task finishes executing. Includes a userInfo dictionary with additional information about the task.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 454,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingTaskDidCompleteNotification",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingTaskDidCompleteNotification) const\n    NSNotificationName __FWNetworkingTaskDidCompleteNotification",
          "key.parsed_scope.end" : 454,
          "key.parsed_scope.start" : 454,
          "key.swift_declaration" : "static let NetworkingTaskDidCompleteNotification: NSNotification.Name",
          "key.swift_name" : "NetworkingTaskDidCompleteNotification",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingTaskDidCompleteNotification"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 44,
          "key.doc.comment" : "Posted when a task suspends its execution.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 459,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingTaskDidSuspendNotification",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingTaskDidSuspendNotification) const\n    NSNotificationName __FWNetworkingTaskDidSuspendNotification",
          "key.parsed_scope.end" : 459,
          "key.parsed_scope.start" : 459,
          "key.swift_declaration" : "static let NetworkingTaskDidSuspendNotification: NSNotification.Name",
          "key.swift_name" : "NetworkingTaskDidSuspendNotification",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingTaskDidSuspendNotification"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 44,
          "key.doc.comment" : "Posted when a session is invalidated.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 464,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWURLSessionDidInvalidateNotification",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(URLSessionDidInvalidateNotification) const\n    NSNotificationName __FWURLSessionDidInvalidateNotification",
          "key.parsed_scope.end" : 464,
          "key.parsed_scope.start" : 464,
          "key.swift_declaration" : "static let URLSessionDidInvalidateNotification: NSNotification.Name",
          "key.swift_name" : "URLSessionDidInvalidateNotification",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWURLSessionDidInvalidateNotification"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 44,
          "key.doc.comment" : "Posted when a session download task finished moving the temporary download file to a specified destination successfully.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 469,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWURLSessionDownloadTaskDidMoveFileSuccessfullyNotification",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(URLSessionDownloadTaskDidMoveFileSuccessfullyNotification)\n    const NSNotificationName\n    __FWURLSessionDownloadTaskDidMoveFileSuccessfullyNotification",
          "key.parsed_scope.end" : 469,
          "key.parsed_scope.start" : 469,
          "key.swift_declaration" : "static let URLSessionDownloadTaskDidMoveFileSuccessfullyNotification: NSNotification.Name",
          "key.swift_name" : "URLSessionDownloadTaskDidMoveFileSuccessfullyNotification",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWURLSessionDownloadTaskDidMoveFileSuccessfullyNotification"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 44,
          "key.doc.comment" : "Posted when a session download task encountered an error when moving the temporary download file to a specified destination.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 474,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWURLSessionDownloadTaskDidFailToMoveFileNotification",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(URLSessionDownloadTaskDidFailToMoveFileNotification) const\n    NSNotificationName __FWURLSessionDownloadTaskDidFailToMoveFileNotification",
          "key.parsed_scope.end" : 474,
          "key.parsed_scope.start" : 474,
          "key.swift_declaration" : "static let URLSessionDownloadTaskDidFailToMoveFileNotification: NSNotification.Name",
          "key.swift_name" : "URLSessionDownloadTaskDidFailToMoveFileNotification",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWURLSessionDownloadTaskDidFailToMoveFileNotification"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "The raw response data of the task. Included in the userInfo dictionary of the `__FWNetworkingTaskDidCompleteNotification` if response data exists for the task.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 479,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingTaskDidCompleteResponseDataKey",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingTaskDidCompleteResponseDataKey) NSString *const\n    __FWNetworkingTaskDidCompleteResponseDataKey",
          "key.parsed_scope.end" : 479,
          "key.parsed_scope.start" : 479,
          "key.swift_declaration" : "let NetworkingTaskDidCompleteResponseDataKey: String",
          "key.swift_name" : "NetworkingTaskDidCompleteResponseDataKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingTaskDidCompleteResponseDataKey"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "The serialized response object of the task. Included in the userInfo dictionary of the `__FWNetworkingTaskDidCompleteNotification` if the response was serialized.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 484,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingTaskDidCompleteSerializedResponseKey",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingTaskDidCompleteSerializedResponseKey)\n    NSString *const __FWNetworkingTaskDidCompleteSerializedResponseKey",
          "key.parsed_scope.end" : 484,
          "key.parsed_scope.start" : 484,
          "key.swift_declaration" : "let NetworkingTaskDidCompleteSerializedResponseKey: String",
          "key.swift_name" : "NetworkingTaskDidCompleteSerializedResponseKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingTaskDidCompleteSerializedResponseKey"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "The response serializer used to serialize the response. Included in the userInfo dictionary of the `__FWNetworkingTaskDidCompleteNotification` if the task has an associated response serializer.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 489,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingTaskDidCompleteResponseSerializerKey",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingTaskDidCompleteResponseSerializerKey)\n    NSString *const __FWNetworkingTaskDidCompleteResponseSerializerKey",
          "key.parsed_scope.end" : 489,
          "key.parsed_scope.start" : 489,
          "key.swift_declaration" : "let NetworkingTaskDidCompleteResponseSerializerKey: String",
          "key.swift_name" : "NetworkingTaskDidCompleteResponseSerializerKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingTaskDidCompleteResponseSerializerKey"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "The file path associated with the download task. Included in the userInfo dictionary of the `__FWNetworkingTaskDidCompleteNotification` if an the response data has been stored directly to disk.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 494,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingTaskDidCompleteAssetPathKey",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingTaskDidCompleteAssetPathKey) NSString *const\n    __FWNetworkingTaskDidCompleteAssetPathKey",
          "key.parsed_scope.end" : 494,
          "key.parsed_scope.start" : 494,
          "key.swift_declaration" : "let NetworkingTaskDidCompleteAssetPathKey: String",
          "key.swift_name" : "NetworkingTaskDidCompleteAssetPathKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingTaskDidCompleteAssetPathKey"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "Any error associated with the task, or the serialization of the response. Included in the userInfo dictionary of the `__FWNetworkingTaskDidCompleteNotification` if an error exists.",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 499,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingTaskDidCompleteErrorKey",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingTaskDidCompleteErrorKey) NSString *const\n    __FWNetworkingTaskDidCompleteErrorKey",
          "key.parsed_scope.end" : 499,
          "key.parsed_scope.start" : 499,
          "key.swift_declaration" : "let NetworkingTaskDidCompleteErrorKey: String",
          "key.swift_name" : "NetworkingTaskDidCompleteErrorKey",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingTaskDidCompleteErrorKey"
        },
        {
          "key.always_deprecated" : false,
          "key.always_unavailable" : false,
          "key.deprecation_message" : "",
          "key.doc.column" : 36,
          "key.doc.comment" : "The session task metrics taken from the download task. Included in the userInfo dictionary of the `__FWNetworkingTaskDidCompleteSessionTaskMetrics`",
          "key.doc.file" : "docs\/FWFramework\/URLSessionManager.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : 504,
          "key.filepath" : "docs\/FWFramework\/URLSessionManager.h",
          "key.kind" : "sourcekitten.source.lang.objc.decl.constant",
          "key.name" : "__FWNetworkingTaskDidCompleteSessionTaskMetrics",
          "key.parsed_declaration" : "extern NS_SWIFT_NAME(NetworkingTaskDidCompleteSessionTaskMetrics)\n    NSString *const __FWNetworkingTaskDidCompleteSessionTaskMetrics",
          "key.parsed_scope.end" : 504,
          "key.parsed_scope.start" : 504,
          "key.swift_declaration" : "let NetworkingTaskDidCompleteSessionTaskMetrics: String",
          "key.swift_name" : "NetworkingTaskDidCompleteSessionTaskMetrics",
          "key.unavailable_message" : "",
          "key.usr" : "c:@__FWNetworkingTaskDidCompleteSessionTaskMetrics"
        }
      ]
    }
  }
]

